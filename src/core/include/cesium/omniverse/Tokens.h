#pragma once

#include <omni/fabric/SimStageWithHistory.h>
#include <pxr/base/tf/token.h>

// clang-format off

namespace cesium::omniverse::FabricTokens {
extern const omni::fabric::TokenC baseColorTexture;
extern const omni::fabric::TokenC cesium_base_color_texture;
extern const omni::fabric::TokenC cesium_material;
extern const omni::fabric::TokenC cesium_texture_lookup;
extern const omni::fabric::TokenC constant;
extern const omni::fabric::TokenC doubleSided;
extern const omni::fabric::TokenC extent;
extern const omni::fabric::TokenC faceVertexCounts;
extern const omni::fabric::TokenC faceVertexIndices;
extern const omni::fabric::TokenC info_implementationSource;
extern const omni::fabric::TokenC info_mdl_sourceAsset;
extern const omni::fabric::TokenC info_mdl_sourceAsset_subIdentifier;
extern const omni::fabric::TokenC inputs_alpha_cutoff;
extern const omni::fabric::TokenC inputs_alpha_mode;
extern const omni::fabric::TokenC inputs_base_alpha;
extern const omni::fabric::TokenC inputs_base_color_factor;
extern const omni::fabric::TokenC inputs_base_color_texture;
extern const omni::fabric::TokenC inputs_emissive_factor;
extern const omni::fabric::TokenC inputs_excludeFromWhiteMode;
extern const omni::fabric::TokenC inputs_metallic_factor;
extern const omni::fabric::TokenC inputs_offset;
extern const omni::fabric::TokenC inputs_rotation;
extern const omni::fabric::TokenC inputs_roughness_factor;
extern const omni::fabric::TokenC inputs_scale;
extern const omni::fabric::TokenC inputs_tex_coord_index;
extern const omni::fabric::TokenC inputs_texture;
extern const omni::fabric::TokenC inputs_vertex_color_name;
extern const omni::fabric::TokenC inputs_wrap_s;
extern const omni::fabric::TokenC inputs_wrap_t;
extern const omni::fabric::TokenC Material;
extern const omni::fabric::TokenC material_binding;
extern const omni::fabric::TokenC Mesh;
extern const omni::fabric::TokenC none;
extern const omni::fabric::TokenC out;
extern const omni::fabric::TokenC outputs_mdl_displacement;
extern const omni::fabric::TokenC outputs_mdl_surface;
extern const omni::fabric::TokenC outputs_mdl_volume;
extern const omni::fabric::TokenC outputs_out;
extern const omni::fabric::TokenC points;
extern const omni::fabric::TokenC primvarInterpolations;
extern const omni::fabric::TokenC primvars;
extern const omni::fabric::TokenC primvars_displayColor;
extern const omni::fabric::TokenC primvars_displayOpacity;
extern const omni::fabric::TokenC primvars_normals;
extern const omni::fabric::TokenC primvars_st;
extern const omni::fabric::TokenC primvars_vertexColor;
extern const omni::fabric::TokenC Shader;
extern const omni::fabric::TokenC sourceAsset;
extern const omni::fabric::TokenC subdivisionScheme;
extern const omni::fabric::TokenC vertex;
extern const omni::fabric::TokenC vertexColor;
extern const omni::fabric::TokenC _auto;
extern const omni::fabric::TokenC _cesium_localToEcefTransform;
extern const omni::fabric::TokenC _cesium_tilesetId;
extern const omni::fabric::TokenC _deletedPrims;
extern const omni::fabric::TokenC _paramColorSpace;
extern const omni::fabric::TokenC _sdrMetadata;
extern const omni::fabric::TokenC _worldExtent;
extern const omni::fabric::TokenC _worldOrientation;
extern const omni::fabric::TokenC _worldPosition;
extern const omni::fabric::TokenC _worldScale;
extern const omni::fabric::TokenC _worldVisibility;
}

namespace cesium::omniverse::UsdTokens {
extern const pxr::TfToken& baseColorTexture;
extern const pxr::TfToken& cesium_base_color_texture;
extern const pxr::TfToken& cesium_material;
extern const pxr::TfToken& cesium_texture_lookup;
extern const pxr::TfToken& constant;
extern const pxr::TfToken& doubleSided;
extern const pxr::TfToken& extent;
extern const pxr::TfToken& faceVertexCounts;
extern const pxr::TfToken& faceVertexIndices;
extern const pxr::TfToken& info_implementationSource;
extern const pxr::TfToken& info_mdl_sourceAsset;
extern const pxr::TfToken& info_mdl_sourceAsset_subIdentifier;
extern const pxr::TfToken& inputs_alpha_cutoff;
extern const pxr::TfToken& inputs_alpha_mode;
extern const pxr::TfToken& inputs_base_alpha;
extern const pxr::TfToken& inputs_base_color_factor;
extern const pxr::TfToken& inputs_base_color_texture;
extern const pxr::TfToken& inputs_emissive_factor;
extern const pxr::TfToken& inputs_excludeFromWhiteMode;
extern const pxr::TfToken& inputs_metallic_factor;
extern const pxr::TfToken& inputs_offset;
extern const pxr::TfToken& inputs_rotation;
extern const pxr::TfToken& inputs_roughness_factor;
extern const pxr::TfToken& inputs_scale;
extern const pxr::TfToken& inputs_tex_coord_index;
extern const pxr::TfToken& inputs_texture;
extern const pxr::TfToken& inputs_vertex_color_name;
extern const pxr::TfToken& inputs_wrap_s;
extern const pxr::TfToken& inputs_wrap_t;
extern const pxr::TfToken& Material;
extern const pxr::TfToken& material_binding;
extern const pxr::TfToken& Mesh;
extern const pxr::TfToken& none;
extern const pxr::TfToken& out;
extern const pxr::TfToken& outputs_mdl_displacement;
extern const pxr::TfToken& outputs_mdl_surface;
extern const pxr::TfToken& outputs_mdl_volume;
extern const pxr::TfToken& outputs_out;
extern const pxr::TfToken& points;
extern const pxr::TfToken& primvarInterpolations;
extern const pxr::TfToken& primvars;
extern const pxr::TfToken& primvars_displayColor;
extern const pxr::TfToken& primvars_displayOpacity;
extern const pxr::TfToken& primvars_normals;
extern const pxr::TfToken& primvars_st;
extern const pxr::TfToken& primvars_vertexColor;
extern const pxr::TfToken& Shader;
extern const pxr::TfToken& sourceAsset;
extern const pxr::TfToken& subdivisionScheme;
extern const pxr::TfToken& vertex;
extern const pxr::TfToken& vertexColor;
extern const pxr::TfToken& _auto;
extern const pxr::TfToken& _cesium_localToEcefTransform;
extern const pxr::TfToken& _cesium_tilesetId;
extern const pxr::TfToken& _deletedPrims;
extern const pxr::TfToken& _paramColorSpace;
extern const pxr::TfToken& _sdrMetadata;
extern const pxr::TfToken& _worldExtent;
extern const pxr::TfToken& _worldOrientation;
extern const pxr::TfToken& _worldPosition;
extern const pxr::TfToken& _worldScale;
extern const pxr::TfToken& _worldVisibility;
}

namespace cesium::omniverse::FabricTypes {
// Due to legacy support the eRelationship type is defined as a scalar value but is secretly an array
const omni::fabric::Type doubleSided(omni::fabric::BaseDataType::eBool, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type extent(omni::fabric::BaseDataType::eDouble, 6, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type faceVertexCounts(omni::fabric::BaseDataType::eInt, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type faceVertexIndices(omni::fabric::BaseDataType::eInt, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type info_implementationSource(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type info_mdl_sourceAsset(omni::fabric::BaseDataType::eAsset, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type info_mdl_sourceAsset_subIdentifier(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_alpha_cutoff(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_alpha_mode(omni::fabric::BaseDataType::eInt, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_base_alpha(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_base_color_factor(omni::fabric::BaseDataType::eFloat, 3, 0, omni::fabric::AttributeRole::eColor);
const omni::fabric::Type inputs_emissive_factor(omni::fabric::BaseDataType::eFloat, 3, 0, omni::fabric::AttributeRole::eColor);
const omni::fabric::Type inputs_excludeFromWhiteMode(omni::fabric::BaseDataType::eBool, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_metallic_factor(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_offset(omni::fabric::BaseDataType::eFloat, 2, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_rotation(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_roughness_factor(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_scale(omni::fabric::BaseDataType::eFloat, 2, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_tex_coord_index(omni::fabric::BaseDataType::eInt, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_texture(omni::fabric::BaseDataType::eAsset, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_vertex_color_name(omni::fabric::BaseDataType::eUChar, 1, 1, omni::fabric::AttributeRole::eText);
const omni::fabric::Type inputs_wrap_s(omni::fabric::BaseDataType::eInt, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type inputs_wrap_t(omni::fabric::BaseDataType::eInt, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type Material(omni::fabric::BaseDataType::eTag, 1, 0, omni::fabric::AttributeRole::ePrimTypeName);
const omni::fabric::Type material_binding(omni::fabric::BaseDataType::eRelationship, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type Mesh(omni::fabric::BaseDataType::eTag, 1, 0, omni::fabric::AttributeRole::ePrimTypeName);
const omni::fabric::Type outputs_out(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type points(omni::fabric::BaseDataType::eFloat, 3, 1, omni::fabric::AttributeRole::ePosition);
const omni::fabric::Type primvarInterpolations(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type primvars(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type primvars_displayColor(omni::fabric::BaseDataType::eFloat, 3, 1, omni::fabric::AttributeRole::eColor);
const omni::fabric::Type primvars_displayOpacity(omni::fabric::BaseDataType::eFloat, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type primvars_normals(omni::fabric::BaseDataType::eFloat, 3, 1, omni::fabric::AttributeRole::eNormal);
const omni::fabric::Type primvars_st(omni::fabric::BaseDataType::eFloat, 2, 1, omni::fabric::AttributeRole::eTexCoord);
const omni::fabric::Type primvars_vertexColor(omni::fabric::BaseDataType::eFloat, 3, 1, omni::fabric::AttributeRole::eColor);
const omni::fabric::Type Shader(omni::fabric::BaseDataType::eTag, 1, 0, omni::fabric::AttributeRole::ePrimTypeName);
const omni::fabric::Type subdivisionScheme(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _cesium_localToEcefTransform(omni::fabric::BaseDataType::eDouble, 16, 0, omni::fabric::AttributeRole::eMatrix);
const omni::fabric::Type _cesium_tilesetId(omni::fabric::BaseDataType::eInt64, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _paramColorSpace(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _sdrMetadata(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _worldExtent(omni::fabric::BaseDataType::eDouble, 6, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _worldOrientation(omni::fabric::BaseDataType::eFloat, 4, 0, omni::fabric::AttributeRole::eQuaternion);
const omni::fabric::Type _worldPosition(omni::fabric::BaseDataType::eDouble, 3, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _worldScale(omni::fabric::BaseDataType::eFloat, 3, 0, omni::fabric::AttributeRole::eVector);
const omni::fabric::Type _worldVisibility(omni::fabric::BaseDataType::eBool, 1, 0, omni::fabric::AttributeRole::eNone);
}
// clang-format on
