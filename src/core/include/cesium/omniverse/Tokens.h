#pragma once

#include <omni/fabric/SimStageWithHistory.h>
#include <pxr/base/tf/token.h>

// clang-format off

namespace cesium::omniverse::FabricTokens {
extern const omni::fabric::TokenC a;
extern const omni::fabric::TokenC add;
extern const omni::fabric::TokenC add_float2_float2;
extern const omni::fabric::TokenC albedo_add;
extern const omni::fabric::TokenC b;
extern const omni::fabric::TokenC constant;
extern const omni::fabric::TokenC coord;
extern const omni::fabric::TokenC diffuse_color_constant;
extern const omni::fabric::TokenC diffuse_texture;
extern const omni::fabric::TokenC displacement;
extern const omni::fabric::TokenC doubleSided;
extern const omni::fabric::TokenC faceVertexCounts;
extern const omni::fabric::TokenC faceVertexIndices;
extern const omni::fabric::TokenC id;
extern const omni::fabric::TokenC info_id;
extern const omni::fabric::TokenC info_implementationSource;
extern const omni::fabric::TokenC info_sourceAsset_subIdentifier;
extern const omni::fabric::TokenC lookup_color;
extern const omni::fabric::TokenC Material;
extern const omni::fabric::TokenC materialId;
extern const omni::fabric::TokenC Mesh;
extern const omni::fabric::TokenC metallic_constant;
extern const omni::fabric::TokenC multiply;
extern const omni::fabric::TokenC multiply_float2_float2;
extern const omni::fabric::TokenC none;
extern const omni::fabric::TokenC nvidia_support_definitions_mdl;
extern const omni::fabric::TokenC OmniPBR;
extern const omni::fabric::TokenC OmniPBR_mdl;
extern const omni::fabric::TokenC out;
extern const omni::fabric::TokenC outputs_displacement;
extern const omni::fabric::TokenC outputs_out;
extern const omni::fabric::TokenC outputs_surface;
extern const omni::fabric::TokenC points;
extern const omni::fabric::TokenC primvarInterpolations;
extern const omni::fabric::TokenC primvars;
extern const omni::fabric::TokenC primvars_displayColor;
extern const omni::fabric::TokenC primvars_normals;
extern const omni::fabric::TokenC primvars_st;
extern const omni::fabric::TokenC reflection_roughness_constant;
extern const omni::fabric::TokenC Shader;
extern const omni::fabric::TokenC specular_level;
extern const omni::fabric::TokenC subdivisionScheme;
extern const omni::fabric::TokenC surface;
extern const omni::fabric::TokenC tex;
extern const omni::fabric::TokenC texture_coordinate_2d;
extern const omni::fabric::TokenC vertex;
extern const omni::fabric::TokenC visibility;
extern const omni::fabric::TokenC wrap_u;
extern const omni::fabric::TokenC wrap_v;
extern const omni::fabric::TokenC _auto;
extern const omni::fabric::TokenC _cesium_localToEcefTransform;
extern const omni::fabric::TokenC _cesium_tileId;
extern const omni::fabric::TokenC _cesium_tilesetId;
extern const omni::fabric::TokenC _deletedPrims;
extern const omni::fabric::TokenC _localExtent;
extern const omni::fabric::TokenC _localMatrix;
extern const omni::fabric::TokenC _nodePaths;
extern const omni::fabric::TokenC _paramColorSpace;
extern const omni::fabric::TokenC _relationship_ids;
extern const omni::fabric::TokenC _relationship_names;
extern const omni::fabric::TokenC _terminal_names;
extern const omni::fabric::TokenC _terminal_sourceNames;
extern const omni::fabric::TokenC _terminal_sourceIds;
extern const omni::fabric::TokenC _sdrMetadata;
extern const omni::fabric::TokenC _worldExtent;
extern const omni::fabric::TokenC _worldOrientation;
extern const omni::fabric::TokenC _worldPosition;
extern const omni::fabric::TokenC _worldScale;
extern const omni::fabric::TokenC _worldVisibility;
}

namespace cesium::omniverse::UsdTokens {
extern const pxr::TfToken& a;
extern const pxr::TfToken& add;
extern const pxr::TfToken& add_float2_float2;
extern const pxr::TfToken& albedo_add;
extern const pxr::TfToken& b;
extern const pxr::TfToken& constant;
extern const pxr::TfToken& coord;
extern const pxr::TfToken& diffuse_color_constant;
extern const pxr::TfToken& diffuse_texture;
extern const pxr::TfToken& displacement;
extern const pxr::TfToken& doubleSided;
extern const pxr::TfToken& faceVertexCounts;
extern const pxr::TfToken& faceVertexIndices;
extern const pxr::TfToken& id;
extern const pxr::TfToken& info_id;
extern const pxr::TfToken& info_implementationSource;
extern const pxr::TfToken& info_sourceAsset_subIdentifier;
extern const pxr::TfToken& lookup_color;
extern const pxr::TfToken& Material;
extern const pxr::TfToken& materialId;
extern const pxr::TfToken& Mesh;
extern const pxr::TfToken& metallic_constant;
extern const pxr::TfToken& multiply;
extern const pxr::TfToken& multiply_float2_float2;
extern const pxr::TfToken& none;
extern const pxr::TfToken& nvidia_support_definitions_mdl;
extern const pxr::TfToken& OmniPBR;
extern const pxr::TfToken& OmniPBR_mdl;
extern const pxr::TfToken& out;
extern const pxr::TfToken& outputs_displacement;
extern const pxr::TfToken& outputs_out;
extern const pxr::TfToken& outputs_surface;
extern const pxr::TfToken& points;
extern const pxr::TfToken& primvarInterpolations;
extern const pxr::TfToken& primvars;
extern const pxr::TfToken& primvars_displayColor;
extern const pxr::TfToken& primvars_normals;
extern const pxr::TfToken& primvars_st;
extern const pxr::TfToken& reflection_roughness_constant;
extern const pxr::TfToken& Shader;
extern const pxr::TfToken& specular_level;
extern const pxr::TfToken& subdivisionScheme;
extern const pxr::TfToken& surface;
extern const pxr::TfToken& tex;
extern const pxr::TfToken& texture_coordinate_2d;
extern const pxr::TfToken& vertex;
extern const pxr::TfToken& visibility;
extern const pxr::TfToken& wrap_u;
extern const pxr::TfToken& wrap_v;
extern const pxr::TfToken& _auto;
extern const pxr::TfToken& _cesium_localToEcefTransform;
extern const pxr::TfToken& _cesium_tileId;
extern const pxr::TfToken& _cesium_tilesetId;
extern const pxr::TfToken& _deletedPrims;
extern const pxr::TfToken& _localExtent;
extern const pxr::TfToken& _localMatrix;
extern const pxr::TfToken& _nodePaths;
extern const pxr::TfToken& _paramColorSpace;
extern const pxr::TfToken& _relationship_ids;
extern const pxr::TfToken& _relationship_names;
extern const pxr::TfToken& _terminal_names;
extern const pxr::TfToken& _terminal_sourceNames;
extern const pxr::TfToken& _terminal_sourceIds;
extern const pxr::TfToken& _worldExtent;
extern const pxr::TfToken& _worldOrientation;
extern const pxr::TfToken& _worldPosition;
extern const pxr::TfToken& _worldScale;
extern const pxr::TfToken& _worldVisibility;
}

namespace cesium::omniverse::FabricTypes {
const omni::fabric::Type albedo_add(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type b(omni::fabric::BaseDataType::eFloat, 2, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type diffuse_color_constant(omni::fabric::BaseDataType::eFloat, 3, 0, omni::fabric::AttributeRole::eColor);
const omni::fabric::Type diffuse_texture(omni::fabric::BaseDataType::eAsset, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type doubleSided(omni::fabric::BaseDataType::eBool, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type faceVertexCounts(omni::fabric::BaseDataType::eInt, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type faceVertexIndices(omni::fabric::BaseDataType::eInt, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type id(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type info_id(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type info_implementationSource(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type info_sourceAsset_subIdentifier(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type Material(omni::fabric::BaseDataType::eTag, 1, 0, omni::fabric::AttributeRole::ePrimTypeName);
const omni::fabric::Type materialId(omni::fabric::BaseDataType::eUInt64, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type MaterialNetwork(omni::fabric::BaseDataType::eTag, 1, 0, omni::fabric::AttributeRole::ePrimTypeName);
const omni::fabric::Type Mesh(omni::fabric::BaseDataType::eTag, 1, 0, omni::fabric::AttributeRole::ePrimTypeName);
const omni::fabric::Type metallic_constant(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type points(omni::fabric::BaseDataType::eFloat, 3, 1, omni::fabric::AttributeRole::ePosition);
const omni::fabric::Type primvarInterpolations(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type primvars(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type primvars_displayColor(omni::fabric::BaseDataType::eFloat, 3, 1, omni::fabric::AttributeRole::eColor);
const omni::fabric::Type primvars_normals(omni::fabric::BaseDataType::eFloat, 3, 1, omni::fabric::AttributeRole::eNormal);
const omni::fabric::Type primvars_st(omni::fabric::BaseDataType::eFloat, 2, 1, omni::fabric::AttributeRole::eTexCoord);
const omni::fabric::Type reflection_roughness_constant(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type Shader(omni::fabric::BaseDataType::eTag, 1, 0, omni::fabric::AttributeRole::ePrimTypeName);
const omni::fabric::Type specular_level(omni::fabric::BaseDataType::eFloat, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type subdivisionScheme(omni::fabric::BaseDataType::eToken, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type tex(omni::fabric::BaseDataType::eAsset, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type visibility(omni::fabric::BaseDataType::eBool, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type wrap_u(omni::fabric::BaseDataType::eInt, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type wrap_v(omni::fabric::BaseDataType::eInt, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _cesium_localToEcefTransform(omni::fabric::BaseDataType::eDouble, 16, 0, omni::fabric::AttributeRole::eMatrix);
const omni::fabric::Type _cesium_tileId(omni::fabric::BaseDataType::eInt64, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _cesium_tilesetId(omni::fabric::BaseDataType::eInt64, 1, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _localExtent(omni::fabric::BaseDataType::eDouble, 6, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _localMatrix(omni::fabric::BaseDataType::eDouble, 16, 0, omni::fabric::AttributeRole::eMatrix);
const omni::fabric::Type _nodePaths(omni::fabric::BaseDataType::eRelationship);
const omni::fabric::Type _paramColorSpace(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _relationship_ids(omni::fabric::BaseDataType::eInt, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _relationship_names(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _sdrMetadata(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _terminal_names(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _terminal_sourceNames(omni::fabric::BaseDataType::eToken, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _terminal_sourceIds(omni::fabric::BaseDataType::eInt, 1, 1, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _worldExtent(omni::fabric::BaseDataType::eDouble, 6, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _worldOrientation(omni::fabric::BaseDataType::eFloat, 4, 0, omni::fabric::AttributeRole::eQuaternion);
const omni::fabric::Type _worldPosition(omni::fabric::BaseDataType::eDouble, 3, 0, omni::fabric::AttributeRole::eNone);
const omni::fabric::Type _worldScale(omni::fabric::BaseDataType::eFloat, 3, 0, omni::fabric::AttributeRole::eVector);
const omni::fabric::Type _worldVisibility(omni::fabric::BaseDataType::eBool, 1, 0, omni::fabric::AttributeRole::eNone);
}
// clang-format on
