#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (12083.675703889348, -24846.52689596732, 544.1843697205376)
                double3 target = (13170.923768322338, -25723.34919599786, 0.000009692792673376971)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./CustomCesiumTests.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (0, 1, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            bool "rtx:raytracing:fractionalCutoutOpacity" = 1
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            token "rtx:rendermode" = "PathTracing"
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def Mesh "Sphere" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6, 0, 6, 7, 0, 7, 8, 0, 8, 9, 0, 9, 10, 0, 10, 11, 0, 11, 12, 0, 12, 13, 0, 13, 14, 0, 14, 15, 0, 15, 16, 0, 16, 17, 0, 17, 18, 0, 18, 19, 0, 19, 20, 0, 20, 21, 0, 21, 22, 0, 22, 23, 0, 23, 24, 0, 24, 25, 0, 25, 26, 0, 26, 27, 0, 27, 28, 0, 28, 29, 0, 29, 30, 0, 30, 31, 0, 31, 32, 0, 32, 1, 1, 33, 34, 2, 2, 34, 35, 3, 3, 35, 36, 4, 4, 36, 37, 5, 5, 37, 38, 6, 6, 38, 39, 7, 7, 39, 40, 8, 8, 40, 41, 9, 9, 41, 42, 10, 10, 42, 43, 11, 11, 43, 44, 12, 12, 44, 45, 13, 13, 45, 46, 14, 14, 46, 47, 15, 15, 47, 48, 16, 16, 48, 49, 17, 17, 49, 50, 18, 18, 50, 51, 19, 19, 51, 52, 20, 20, 52, 53, 21, 21, 53, 54, 22, 22, 54, 55, 23, 23, 55, 56, 24, 24, 56, 57, 25, 25, 57, 58, 26, 26, 58, 59, 27, 27, 59, 60, 28, 28, 60, 61, 29, 29, 61, 62, 30, 30, 62, 63, 31, 31, 63, 64, 32, 32, 64, 33, 1, 33, 65, 66, 34, 34, 66, 67, 35, 35, 67, 68, 36, 36, 68, 69, 37, 37, 69, 70, 38, 38, 70, 71, 39, 39, 71, 72, 40, 40, 72, 73, 41, 41, 73, 74, 42, 42, 74, 75, 43, 43, 75, 76, 44, 44, 76, 77, 45, 45, 77, 78, 46, 46, 78, 79, 47, 47, 79, 80, 48, 48, 80, 81, 49, 49, 81, 82, 50, 50, 82, 83, 51, 51, 83, 84, 52, 52, 84, 85, 53, 53, 85, 86, 54, 54, 86, 87, 55, 55, 87, 88, 56, 56, 88, 89, 57, 57, 89, 90, 58, 58, 90, 91, 59, 59, 91, 92, 60, 60, 92, 93, 61, 61, 93, 94, 62, 62, 94, 95, 63, 63, 95, 96, 64, 64, 96, 65, 33, 65, 97, 98, 66, 66, 98, 99, 67, 67, 99, 100, 68, 68, 100, 101, 69, 69, 101, 102, 70, 70, 102, 103, 71, 71, 103, 104, 72, 72, 104, 105, 73, 73, 105, 106, 74, 74, 106, 107, 75, 75, 107, 108, 76, 76, 108, 109, 77, 77, 109, 110, 78, 78, 110, 111, 79, 79, 111, 112, 80, 80, 112, 113, 81, 81, 113, 114, 82, 82, 114, 115, 83, 83, 115, 116, 84, 84, 116, 117, 85, 85, 117, 118, 86, 86, 118, 119, 87, 87, 119, 120, 88, 88, 120, 121, 89, 89, 121, 122, 90, 90, 122, 123, 91, 91, 123, 124, 92, 92, 124, 125, 93, 93, 125, 126, 94, 94, 126, 127, 95, 95, 127, 128, 96, 96, 128, 97, 65, 97, 129, 130, 98, 98, 130, 131, 99, 99, 131, 132, 100, 100, 132, 133, 101, 101, 133, 134, 102, 102, 134, 135, 103, 103, 135, 136, 104, 104, 136, 137, 105, 105, 137, 138, 106, 106, 138, 139, 107, 107, 139, 140, 108, 108, 140, 141, 109, 109, 141, 142, 110, 110, 142, 143, 111, 111, 143, 144, 112, 112, 144, 145, 113, 113, 145, 146, 114, 114, 146, 147, 115, 115, 147, 148, 116, 116, 148, 149, 117, 117, 149, 150, 118, 118, 150, 151, 119, 119, 151, 152, 120, 120, 152, 153, 121, 121, 153, 154, 122, 122, 154, 155, 123, 123, 155, 156, 124, 124, 156, 157, 125, 125, 157, 158, 126, 126, 158, 159, 127, 127, 159, 160, 128, 128, 160, 129, 97, 129, 161, 162, 130, 130, 162, 163, 131, 131, 163, 164, 132, 132, 164, 165, 133, 133, 165, 166, 134, 134, 166, 167, 135, 135, 167, 168, 136, 136, 168, 169, 137, 137, 169, 170, 138, 138, 170, 171, 139, 139, 171, 172, 140, 140, 172, 173, 141, 141, 173, 174, 142, 142, 174, 175, 143, 143, 175, 176, 144, 144, 176, 177, 145, 145, 177, 178, 146, 146, 178, 179, 147, 147, 179, 180, 148, 148, 180, 181, 149, 149, 181, 182, 150, 150, 182, 183, 151, 151, 183, 184, 152, 152, 184, 185, 153, 153, 185, 186, 154, 154, 186, 187, 155, 155, 187, 188, 156, 156, 188, 189, 157, 157, 189, 190, 158, 158, 190, 191, 159, 159, 191, 192, 160, 160, 192, 161, 129, 161, 193, 194, 162, 162, 194, 195, 163, 163, 195, 196, 164, 164, 196, 197, 165, 165, 197, 198, 166, 166, 198, 199, 167, 167, 199, 200, 168, 168, 200, 201, 169, 169, 201, 202, 170, 170, 202, 203, 171, 171, 203, 204, 172, 172, 204, 205, 173, 173, 205, 206, 174, 174, 206, 207, 175, 175, 207, 208, 176, 176, 208, 209, 177, 177, 209, 210, 178, 178, 210, 211, 179, 179, 211, 212, 180, 180, 212, 213, 181, 181, 213, 214, 182, 182, 214, 215, 183, 183, 215, 216, 184, 184, 216, 217, 185, 185, 217, 218, 186, 186, 218, 219, 187, 187, 219, 220, 188, 188, 220, 221, 189, 189, 221, 222, 190, 190, 222, 223, 191, 191, 223, 224, 192, 192, 224, 193, 161, 193, 225, 226, 194, 194, 226, 227, 195, 195, 227, 228, 196, 196, 228, 229, 197, 197, 229, 230, 198, 198, 230, 231, 199, 199, 231, 232, 200, 200, 232, 233, 201, 201, 233, 234, 202, 202, 234, 235, 203, 203, 235, 236, 204, 204, 236, 237, 205, 205, 237, 238, 206, 206, 238, 239, 207, 207, 239, 240, 208, 208, 240, 241, 209, 209, 241, 242, 210, 210, 242, 243, 211, 211, 243, 244, 212, 212, 244, 245, 213, 213, 245, 246, 214, 214, 246, 247, 215, 215, 247, 248, 216, 216, 248, 249, 217, 217, 249, 250, 218, 218, 250, 251, 219, 219, 251, 252, 220, 220, 252, 253, 221, 221, 253, 254, 222, 222, 254, 255, 223, 223, 255, 256, 224, 224, 256, 225, 193, 225, 257, 258, 226, 226, 258, 259, 227, 227, 259, 260, 228, 228, 260, 261, 229, 229, 261, 262, 230, 230, 262, 263, 231, 231, 263, 264, 232, 232, 264, 265, 233, 233, 265, 266, 234, 234, 266, 267, 235, 235, 267, 268, 236, 236, 268, 269, 237, 237, 269, 270, 238, 238, 270, 271, 239, 239, 271, 272, 240, 240, 272, 273, 241, 241, 273, 274, 242, 242, 274, 275, 243, 243, 275, 276, 244, 244, 276, 277, 245, 245, 277, 278, 246, 246, 278, 279, 247, 247, 279, 280, 248, 248, 280, 281, 249, 249, 281, 282, 250, 250, 282, 283, 251, 251, 283, 284, 252, 252, 284, 285, 253, 253, 285, 286, 254, 254, 286, 287, 255, 255, 287, 288, 256, 256, 288, 257, 225, 257, 289, 290, 258, 258, 290, 291, 259, 259, 291, 292, 260, 260, 292, 293, 261, 261, 293, 294, 262, 262, 294, 295, 263, 263, 295, 296, 264, 264, 296, 297, 265, 265, 297, 298, 266, 266, 298, 299, 267, 267, 299, 300, 268, 268, 300, 301, 269, 269, 301, 302, 270, 270, 302, 303, 271, 271, 303, 304, 272, 272, 304, 305, 273, 273, 305, 306, 274, 274, 306, 307, 275, 275, 307, 308, 276, 276, 308, 309, 277, 277, 309, 310, 278, 278, 310, 311, 279, 279, 311, 312, 280, 280, 312, 313, 281, 281, 313, 314, 282, 282, 314, 315, 283, 283, 315, 316, 284, 284, 316, 317, 285, 285, 317, 318, 286, 286, 318, 319, 287, 287, 319, 320, 288, 288, 320, 289, 257, 289, 321, 322, 290, 290, 322, 323, 291, 291, 323, 324, 292, 292, 324, 325, 293, 293, 325, 326, 294, 294, 326, 327, 295, 295, 327, 328, 296, 296, 328, 329, 297, 297, 329, 330, 298, 298, 330, 331, 299, 299, 331, 332, 300, 300, 332, 333, 301, 301, 333, 334, 302, 302, 334, 335, 303, 303, 335, 336, 304, 304, 336, 337, 305, 305, 337, 338, 306, 306, 338, 339, 307, 307, 339, 340, 308, 308, 340, 341, 309, 309, 341, 342, 310, 310, 342, 343, 311, 311, 343, 344, 312, 312, 344, 345, 313, 313, 345, 346, 314, 314, 346, 347, 315, 315, 347, 348, 316, 316, 348, 349, 317, 317, 349, 350, 318, 318, 350, 351, 319, 319, 351, 352, 320, 320, 352, 321, 289, 321, 353, 354, 322, 322, 354, 355, 323, 323, 355, 356, 324, 324, 356, 357, 325, 325, 357, 358, 326, 326, 358, 359, 327, 327, 359, 360, 328, 328, 360, 361, 329, 329, 361, 362, 330, 330, 362, 363, 331, 331, 363, 364, 332, 332, 364, 365, 333, 333, 365, 366, 334, 334, 366, 367, 335, 335, 367, 368, 336, 336, 368, 369, 337, 337, 369, 370, 338, 338, 370, 371, 339, 339, 371, 372, 340, 340, 372, 373, 341, 341, 373, 374, 342, 342, 374, 375, 343, 343, 375, 376, 344, 344, 376, 377, 345, 345, 377, 378, 346, 346, 378, 379, 347, 347, 379, 380, 348, 348, 380, 381, 349, 349, 381, 382, 350, 350, 382, 383, 351, 351, 383, 384, 352, 352, 384, 353, 321, 353, 385, 386, 354, 354, 386, 387, 355, 355, 387, 388, 356, 356, 388, 389, 357, 357, 389, 390, 358, 358, 390, 391, 359, 359, 391, 392, 360, 360, 392, 393, 361, 361, 393, 394, 362, 362, 394, 395, 363, 363, 395, 396, 364, 364, 396, 397, 365, 365, 397, 398, 366, 366, 398, 399, 367, 367, 399, 400, 368, 368, 400, 401, 369, 369, 401, 402, 370, 370, 402, 403, 371, 371, 403, 404, 372, 372, 404, 405, 373, 373, 405, 406, 374, 374, 406, 407, 375, 375, 407, 408, 376, 376, 408, 409, 377, 377, 409, 410, 378, 378, 410, 411, 379, 379, 411, 412, 380, 380, 412, 413, 381, 381, 413, 414, 382, 382, 414, 415, 383, 383, 415, 416, 384, 384, 416, 385, 353, 385, 417, 418, 386, 386, 418, 419, 387, 387, 419, 420, 388, 388, 420, 421, 389, 389, 421, 422, 390, 390, 422, 423, 391, 391, 423, 424, 392, 392, 424, 425, 393, 393, 425, 426, 394, 394, 426, 427, 395, 395, 427, 428, 396, 396, 428, 429, 397, 397, 429, 430, 398, 398, 430, 431, 399, 399, 431, 432, 400, 400, 432, 433, 401, 401, 433, 434, 402, 402, 434, 435, 403, 403, 435, 436, 404, 404, 436, 437, 405, 405, 437, 438, 406, 406, 438, 439, 407, 407, 439, 440, 408, 408, 440, 441, 409, 409, 441, 442, 410, 410, 442, 443, 411, 411, 443, 444, 412, 412, 444, 445, 413, 413, 445, 446, 414, 414, 446, 447, 415, 415, 447, 448, 416, 416, 448, 417, 385, 417, 449, 450, 418, 418, 450, 451, 419, 419, 451, 452, 420, 420, 452, 453, 421, 421, 453, 454, 422, 422, 454, 455, 423, 423, 455, 456, 424, 424, 456, 457, 425, 425, 457, 458, 426, 426, 458, 459, 427, 427, 459, 460, 428, 428, 460, 461, 429, 429, 461, 462, 430, 430, 462, 463, 431, 431, 463, 464, 432, 432, 464, 465, 433, 433, 465, 466, 434, 434, 466, 467, 435, 435, 467, 468, 436, 436, 468, 469, 437, 437, 469, 470, 438, 438, 470, 471, 439, 439, 471, 472, 440, 440, 472, 473, 441, 441, 473, 474, 442, 442, 474, 475, 443, 443, 475, 476, 444, 444, 476, 477, 445, 445, 477, 478, 446, 446, 478, 479, 447, 447, 479, 480, 448, 448, 480, 449, 417, 449, 481, 450, 450, 481, 451, 451, 481, 452, 452, 481, 453, 453, 481, 454, 454, 481, 455, 455, 481, 456, 456, 481, 457, 457, 481, 458, 458, 481, 459, 459, 481, 460, 460, 481, 461, 461, 481, 462, 462, 481, 463, 463, 481, 464, 464, 481, 465, 465, 481, 466, 466, 481, 467, 467, 481, 468, 468, 481, 469, 469, 481, 470, 470, 481, 471, 471, 481, 472, 472, 481, 473, 473, 481, 474, 474, 481, 475, 475, 481, 476, 476, 481, 477, 477, 481, 478, 478, 481, 479, 479, 481, 480, 480, 481, 449]
        rel material:binding = </World/Looks/CutDot> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, -50, 0), (9.754517, -49.03926, 0), (9.567085, -49.03926, 1.9030117), (0, -50, 0), (9.567085, -49.03926, 1.9030117), (9.011998, -49.03926, 3.7328918), (0, -50, 0), (9.011998, -49.03926, 3.7328918), (8.110583, -49.03926, 5.4193187), (0, -50, 0), (8.110583, -49.03926, 5.4193187), (6.8974843, -49.03926, 6.8974843), (0, -50, 0), (6.8974843, -49.03926, 6.8974843), (5.4193187, -49.03926, 8.110583), (0, -50, 0), (5.4193187, -49.03926, 8.110583), (3.7328918, -49.03926, 9.011998), (0, -50, 0), (3.7328918, -49.03926, 9.011998), (1.9030117, -49.03926, 9.567085), (0, -50, 0), (1.9030117, -49.03926, 9.567085), (5.9729185e-16, -49.03926, 9.754517), (0, -50, 0), (5.9729185e-16, -49.03926, 9.754517), (-1.9030117, -49.03926, 9.567085), (0, -50, 0), (-1.9030117, -49.03926, 9.567085), (-3.7328918, -49.03926, 9.011998), (0, -50, 0), (-3.7328918, -49.03926, 9.011998), (-5.4193187, -49.03926, 8.110583), (0, -50, 0), (-5.4193187, -49.03926, 8.110583), (-6.8974843, -49.03926, 6.8974843), (0, -50, 0), (-6.8974843, -49.03926, 6.8974843), (-8.110583, -49.03926, 5.4193187), (0, -50, 0), (-8.110583, -49.03926, 5.4193187), (-9.011998, -49.03926, 3.7328918), (0, -50, 0), (-9.011998, -49.03926, 3.7328918), (-9.567085, -49.03926, 1.9030117), (0, -50, 0), (-9.567085, -49.03926, 1.9030117), (-9.754517, -49.03926, 1.1945837e-15), (0, -50, 0), (-9.754517, -49.03926, 1.1945837e-15), (-9.567085, -49.03926, -1.9030117), (0, -50, 0), (-9.567085, -49.03926, -1.9030117), (-9.011998, -49.03926, -3.7328918), (0, -50, 0), (-9.011998, -49.03926, -3.7328918), (-8.110583, -49.03926, -5.4193187), (0, -50, 0), (-8.110583, -49.03926, -5.4193187), (-6.8974843, -49.03926, -6.8974843), (0, -50, 0), (-6.8974843, -49.03926, -6.8974843), (-5.4193187, -49.03926, -8.110583), (0, -50, 0), (-5.4193187, -49.03926, -8.110583), (-3.7328918, -49.03926, -9.011998), (0, -50, 0), (-3.7328918, -49.03926, -9.011998), (-1.9030117, -49.03926, -9.567085), (0, -50, 0), (-1.9030117, -49.03926, -9.567085), (-1.7918755e-15, -49.03926, -9.754517), (0, -50, 0), (-1.7918755e-15, -49.03926, -9.754517), (1.9030117, -49.03926, -9.567085), (0, -50, 0), (1.9030117, -49.03926, -9.567085), (3.7328918, -49.03926, -9.011998), (0, -50, 0), (3.7328918, -49.03926, -9.011998), (5.4193187, -49.03926, -8.110583), (0, -50, 0), (5.4193187, -49.03926, -8.110583), (6.8974843, -49.03926, -6.8974843), (0, -50, 0), (6.8974843, -49.03926, -6.8974843), (8.110583, -49.03926, -5.4193187), (0, -50, 0), (8.110583, -49.03926, -5.4193187), (9.011998, -49.03926, -3.7328918), (0, -50, 0), (9.011998, -49.03926, -3.7328918), (9.567085, -49.03926, -1.9030117), (0, -50, 0), (9.567085, -49.03926, -1.9030117), (9.754517, -49.03926, 0), (9.754517, -49.03926, 0), (19.13417, -46.193974, 0), (18.766514, -46.193974, 3.7328918), (9.567085, -49.03926, 1.9030117), (9.567085, -49.03926, 1.9030117), (18.766514, -46.193974, 3.7328918), (17.67767, -46.193974, 7.322331), (9.011998, -49.03926, 3.7328918), (9.011998, -49.03926, 3.7328918), (17.67767, -46.193974, 7.322331), (15.909483, -46.193974, 10.630376), (8.110583, -49.03926, 5.4193187), (8.110583, -49.03926, 5.4193187), (15.909483, -46.193974, 10.630376), (13.529902, -46.193974, 13.529902), (6.8974843, -49.03926, 6.8974843), (6.8974843, -49.03926, 6.8974843), (13.529902, -46.193974, 13.529902), (10.630376, -46.193974, 15.909483), (5.4193187, -49.03926, 8.110583), (5.4193187, -49.03926, 8.110583), (10.630376, -46.193974, 15.909483), (7.322331, -46.193974, 17.67767), (3.7328918, -49.03926, 9.011998), (3.7328918, -49.03926, 9.011998), (7.322331, -46.193974, 17.67767), (3.7328918, -46.193974, 18.766514), (1.9030117, -49.03926, 9.567085), (1.9030117, -49.03926, 9.567085), (3.7328918, -46.193974, 18.766514), (1.1716302e-15, -46.193974, 19.13417), (5.9729185e-16, -49.03926, 9.754517), (5.9729185e-16, -49.03926, 9.754517), (1.1716302e-15, -46.193974, 19.13417), (-3.7328918, -46.193974, 18.766514), (-1.9030117, -49.03926, 9.567085), (-1.9030117, -49.03926, 9.567085), (-3.7328918, -46.193974, 18.766514), (-7.322331, -46.193974, 17.67767), (-3.7328918, -49.03926, 9.011998), (-3.7328918, -49.03926, 9.011998), (-7.322331, -46.193974, 17.67767), (-10.630376, -46.193974, 15.909483), (-5.4193187, -49.03926, 8.110583), (-5.4193187, -49.03926, 8.110583), (-10.630376, -46.193974, 15.909483), (-13.529902, -46.193974, 13.529902), (-6.8974843, -49.03926, 6.8974843), (-6.8974843, -49.03926, 6.8974843), (-13.529902, -46.193974, 13.529902), (-15.909483, -46.193974, 10.630376), (-8.110583, -49.03926, 5.4193187), (-8.110583, -49.03926, 5.4193187), (-15.909483, -46.193974, 10.630376), (-17.67767, -46.193974, 7.322331), (-9.011998, -49.03926, 3.7328918), (-9.011998, -49.03926, 3.7328918), (-17.67767, -46.193974, 7.322331), (-18.766514, -46.193974, 3.7328918), (-9.567085, -49.03926, 1.9030117), (-9.567085, -49.03926, 1.9030117), (-18.766514, -46.193974, 3.7328918), (-19.13417, -46.193974, 2.3432603e-15), (-9.754517, -49.03926, 1.1945837e-15), (-9.754517, -49.03926, 1.1945837e-15), (-19.13417, -46.193974, 2.3432603e-15), (-18.766514, -46.193974, -3.7328918), (-9.567085, -49.03926, -1.9030117), (-9.567085, -49.03926, -1.9030117), (-18.766514, -46.193974, -3.7328918), (-17.67767, -46.193974, -7.322331), (-9.011998, -49.03926, -3.7328918), (-9.011998, -49.03926, -3.7328918), (-17.67767, -46.193974, -7.322331), (-15.909483, -46.193974, -10.630376), (-8.110583, -49.03926, -5.4193187), (-8.110583, -49.03926, -5.4193187), (-15.909483, -46.193974, -10.630376), (-13.529902, -46.193974, -13.529902), (-6.8974843, -49.03926, -6.8974843), (-6.8974843, -49.03926, -6.8974843), (-13.529902, -46.193974, -13.529902), (-10.630376, -46.193974, -15.909483), (-5.4193187, -49.03926, -8.110583), (-5.4193187, -49.03926, -8.110583), (-10.630376, -46.193974, -15.909483), (-7.322331, -46.193974, -17.67767), (-3.7328918, -49.03926, -9.011998), (-3.7328918, -49.03926, -9.011998), (-7.322331, -46.193974, -17.67767), (-3.7328918, -46.193974, -18.766514), (-1.9030117, -49.03926, -9.567085), (-1.9030117, -49.03926, -9.567085), (-3.7328918, -46.193974, -18.766514), (-3.5148903e-15, -46.193974, -19.13417), (-1.7918755e-15, -49.03926, -9.754517), (-1.7918755e-15, -49.03926, -9.754517), (-3.5148903e-15, -46.193974, -19.13417), (3.7328918, -46.193974, -18.766514), (1.9030117, -49.03926, -9.567085), (1.9030117, -49.03926, -9.567085), (3.7328918, -46.193974, -18.766514), (7.322331, -46.193974, -17.67767), (3.7328918, -49.03926, -9.011998), (3.7328918, -49.03926, -9.011998), (7.322331, -46.193974, -17.67767), (10.630376, -46.193974, -15.909483), (5.4193187, -49.03926, -8.110583), (5.4193187, -49.03926, -8.110583), (10.630376, -46.193974, -15.909483), (13.529902, -46.193974, -13.529902), (6.8974843, -49.03926, -6.8974843), (6.8974843, -49.03926, -6.8974843), (13.529902, -46.193974, -13.529902), (15.909483, -46.193974, -10.630376), (8.110583, -49.03926, -5.4193187), (8.110583, -49.03926, -5.4193187), (15.909483, -46.193974, -10.630376), (17.67767, -46.193974, -7.322331), (9.011998, -49.03926, -3.7328918), (9.011998, -49.03926, -3.7328918), (17.67767, -46.193974, -7.322331), (18.766514, -46.193974, -3.7328918), (9.567085, -49.03926, -1.9030117), (9.567085, -49.03926, -1.9030117), (18.766514, -46.193974, -3.7328918), (19.13417, -46.193974, 0), (9.754517, -49.03926, 0), (19.13417, -46.193974, 0), (27.778513, -41.57348, 0), (27.244755, -41.57348, 5.4193187), (18.766514, -46.193974, 3.7328918), (18.766514, -46.193974, 3.7328918), (27.244755, -41.57348, 5.4193187), (25.664, -41.57348, 10.630376), (17.67767, -46.193974, 7.322331), (17.67767, -46.193974, 7.322331), (25.664, -41.57348, 10.630376), (23.096987, -41.57348, 15.432914), (15.909483, -46.193974, 10.630376), (15.909483, -46.193974, 10.630376), (23.096987, -41.57348, 15.432914), (19.642374, -41.57348, 19.642374), (13.529902, -46.193974, 13.529902), (13.529902, -46.193974, 13.529902), (19.642374, -41.57348, 19.642374), (15.432914, -41.57348, 23.096987), (10.630376, -46.193974, 15.909483), (10.630376, -46.193974, 15.909483), (15.432914, -41.57348, 23.096987), (10.630376, -41.57348, 25.664), (7.322331, -46.193974, 17.67767), (7.322331, -46.193974, 17.67767), (10.630376, -41.57348, 25.664), (5.4193187, -41.57348, 27.244755), (3.7328918, -46.193974, 18.766514), (3.7328918, -46.193974, 18.766514), (5.4193187, -41.57348, 27.244755), (1.7009433e-15, -41.57348, 27.778513), (1.1716302e-15, -46.193974, 19.13417), (1.1716302e-15, -46.193974, 19.13417), (1.7009433e-15, -41.57348, 27.778513), (-5.4193187, -41.57348, 27.244755), (-3.7328918, -46.193974, 18.766514), (-3.7328918, -46.193974, 18.766514), (-5.4193187, -41.57348, 27.244755), (-10.630376, -41.57348, 25.664), (-7.322331, -46.193974, 17.67767), (-7.322331, -46.193974, 17.67767), (-10.630376, -41.57348, 25.664), (-15.432914, -41.57348, 23.096987), (-10.630376, -46.193974, 15.909483), (-10.630376, -46.193974, 15.909483), (-15.432914, -41.57348, 23.096987), (-19.642374, -41.57348, 19.642374), (-13.529902, -46.193974, 13.529902), (-13.529902, -46.193974, 13.529902), (-19.642374, -41.57348, 19.642374), (-23.096987, -41.57348, 15.432914), (-15.909483, -46.193974, 10.630376), (-15.909483, -46.193974, 10.630376), (-23.096987, -41.57348, 15.432914), (-25.664, -41.57348, 10.630376), (-17.67767, -46.193974, 7.322331), (-17.67767, -46.193974, 7.322331), (-25.664, -41.57348, 10.630376), (-27.244755, -41.57348, 5.4193187), (-18.766514, -46.193974, 3.7328918), (-18.766514, -46.193974, 3.7328918), (-27.244755, -41.57348, 5.4193187), (-27.778513, -41.57348, 3.4018865e-15), (-19.13417, -46.193974, 2.3432603e-15), (-19.13417, -46.193974, 2.3432603e-15), (-27.778513, -41.57348, 3.4018865e-15), (-27.244755, -41.57348, -5.4193187), (-18.766514, -46.193974, -3.7328918), (-18.766514, -46.193974, -3.7328918), (-27.244755, -41.57348, -5.4193187), (-25.664, -41.57348, -10.630376), (-17.67767, -46.193974, -7.322331), (-17.67767, -46.193974, -7.322331), (-25.664, -41.57348, -10.630376), (-23.096987, -41.57348, -15.432914), (-15.909483, -46.193974, -10.630376), (-15.909483, -46.193974, -10.630376), (-23.096987, -41.57348, -15.432914), (-19.642374, -41.57348, -19.642374), (-13.529902, -46.193974, -13.529902), (-13.529902, -46.193974, -13.529902), (-19.642374, -41.57348, -19.642374), (-15.432914, -41.57348, -23.096987), (-10.630376, -46.193974, -15.909483), (-10.630376, -46.193974, -15.909483), (-15.432914, -41.57348, -23.096987), (-10.630376, -41.57348, -25.664), (-7.322331, -46.193974, -17.67767), (-7.322331, -46.193974, -17.67767), (-10.630376, -41.57348, -25.664), (-5.4193187, -41.57348, -27.244755), (-3.7328918, -46.193974, -18.766514), (-3.7328918, -46.193974, -18.766514), (-5.4193187, -41.57348, -27.244755), (-5.1028297e-15, -41.57348, -27.778513), (-3.5148903e-15, -46.193974, -19.13417), (-3.5148903e-15, -46.193974, -19.13417), (-5.1028297e-15, -41.57348, -27.778513), (5.4193187, -41.57348, -27.244755), (3.7328918, -46.193974, -18.766514), (3.7328918, -46.193974, -18.766514), (5.4193187, -41.57348, -27.244755), (10.630376, -41.57348, -25.664), (7.322331, -46.193974, -17.67767), (7.322331, -46.193974, -17.67767), (10.630376, -41.57348, -25.664), (15.432914, -41.57348, -23.096987), (10.630376, -46.193974, -15.909483), (10.630376, -46.193974, -15.909483), (15.432914, -41.57348, -23.096987), (19.642374, -41.57348, -19.642374), (13.529902, -46.193974, -13.529902), (13.529902, -46.193974, -13.529902), (19.642374, -41.57348, -19.642374), (23.096987, -41.57348, -15.432914), (15.909483, -46.193974, -10.630376), (15.909483, -46.193974, -10.630376), (23.096987, -41.57348, -15.432914), (25.664, -41.57348, -10.630376), (17.67767, -46.193974, -7.322331), (17.67767, -46.193974, -7.322331), (25.664, -41.57348, -10.630376), (27.244755, -41.57348, -5.4193187), (18.766514, -46.193974, -3.7328918), (18.766514, -46.193974, -3.7328918), (27.244755, -41.57348, -5.4193187), (27.778513, -41.57348, 0), (19.13417, -46.193974, 0), (27.778513, -41.57348, 0), (35.35534, -35.35534, 0), (34.676, -35.35534, 6.8974843), (27.244755, -41.57348, 5.4193187), (27.244755, -41.57348, 5.4193187), (34.676, -35.35534, 6.8974843), (32.664074, -35.35534, 13.529902), (25.664, -41.57348, 10.630376), (25.664, -41.57348, 10.630376), (32.664074, -35.35534, 13.529902), (29.396889, -35.35534, 19.642374), (23.096987, -41.57348, 15.432914), (23.096987, -41.57348, 15.432914), (29.396889, -35.35534, 19.642374), (25, -35.35534, 25), (19.642374, -41.57348, 19.642374), (19.642374, -41.57348, 19.642374), (25, -35.35534, 25), (19.642374, -35.35534, 29.396889), (15.432914, -41.57348, 23.096987), (15.432914, -41.57348, 23.096987), (19.642374, -35.35534, 29.396889), (13.529902, -35.35534, 32.664074), (10.630376, -41.57348, 25.664), (10.630376, -41.57348, 25.664), (13.529902, -35.35534, 32.664074), (6.8974843, -35.35534, 34.676), (5.4193187, -41.57348, 27.244755), (5.4193187, -41.57348, 27.244755), (6.8974843, -35.35534, 34.676), (2.1648902e-15, -35.35534, 35.35534), (1.7009433e-15, -41.57348, 27.778513), (1.7009433e-15, -41.57348, 27.778513), (2.1648902e-15, -35.35534, 35.35534), (-6.8974843, -35.35534, 34.676), (-5.4193187, -41.57348, 27.244755), (-5.4193187, -41.57348, 27.244755), (-6.8974843, -35.35534, 34.676), (-13.529902, -35.35534, 32.664074), (-10.630376, -41.57348, 25.664), (-10.630376, -41.57348, 25.664), (-13.529902, -35.35534, 32.664074), (-19.642374, -35.35534, 29.396889), (-15.432914, -41.57348, 23.096987), (-15.432914, -41.57348, 23.096987), (-19.642374, -35.35534, 29.396889), (-25, -35.35534, 25), (-19.642374, -41.57348, 19.642374), (-19.642374, -41.57348, 19.642374), (-25, -35.35534, 25), (-29.396889, -35.35534, 19.642374), (-23.096987, -41.57348, 15.432914), (-23.096987, -41.57348, 15.432914), (-29.396889, -35.35534, 19.642374), (-32.664074, -35.35534, 13.529902), (-25.664, -41.57348, 10.630376), (-25.664, -41.57348, 10.630376), (-32.664074, -35.35534, 13.529902), (-34.676, -35.35534, 6.8974843), (-27.244755, -41.57348, 5.4193187), (-27.244755, -41.57348, 5.4193187), (-34.676, -35.35534, 6.8974843), (-35.35534, -35.35534, 4.3297804e-15), (-27.778513, -41.57348, 3.4018865e-15), (-27.778513, -41.57348, 3.4018865e-15), (-35.35534, -35.35534, 4.3297804e-15), (-34.676, -35.35534, -6.8974843), (-27.244755, -41.57348, -5.4193187), (-27.244755, -41.57348, -5.4193187), (-34.676, -35.35534, -6.8974843), (-32.664074, -35.35534, -13.529902), (-25.664, -41.57348, -10.630376), (-25.664, -41.57348, -10.630376), (-32.664074, -35.35534, -13.529902), (-29.396889, -35.35534, -19.642374), (-23.096987, -41.57348, -15.432914), (-23.096987, -41.57348, -15.432914), (-29.396889, -35.35534, -19.642374), (-25, -35.35534, -25), (-19.642374, -41.57348, -19.642374), (-19.642374, -41.57348, -19.642374), (-25, -35.35534, -25), (-19.642374, -35.35534, -29.396889), (-15.432914, -41.57348, -23.096987), (-15.432914, -41.57348, -23.096987), (-19.642374, -35.35534, -29.396889), (-13.529902, -35.35534, -32.664074), (-10.630376, -41.57348, -25.664), (-10.630376, -41.57348, -25.664), (-13.529902, -35.35534, -32.664074), (-6.8974843, -35.35534, -34.676), (-5.4193187, -41.57348, -27.244755), (-5.4193187, -41.57348, -27.244755), (-6.8974843, -35.35534, -34.676), (-6.49467e-15, -35.35534, -35.35534), (-5.1028297e-15, -41.57348, -27.778513), (-5.1028297e-15, -41.57348, -27.778513), (-6.49467e-15, -35.35534, -35.35534), (6.8974843, -35.35534, -34.676), (5.4193187, -41.57348, -27.244755), (5.4193187, -41.57348, -27.244755), (6.8974843, -35.35534, -34.676), (13.529902, -35.35534, -32.664074), (10.630376, -41.57348, -25.664), (10.630376, -41.57348, -25.664), (13.529902, -35.35534, -32.664074), (19.642374, -35.35534, -29.396889), (15.432914, -41.57348, -23.096987), (15.432914, -41.57348, -23.096987), (19.642374, -35.35534, -29.396889), (25, -35.35534, -25), (19.642374, -41.57348, -19.642374), (19.642374, -41.57348, -19.642374), (25, -35.35534, -25), (29.396889, -35.35534, -19.642374), (23.096987, -41.57348, -15.432914), (23.096987, -41.57348, -15.432914), (29.396889, -35.35534, -19.642374), (32.664074, -35.35534, -13.529902), (25.664, -41.57348, -10.630376), (25.664, -41.57348, -10.630376), (32.664074, -35.35534, -13.529902), (34.676, -35.35534, -6.8974843), (27.244755, -41.57348, -5.4193187), (27.244755, -41.57348, -5.4193187), (34.676, -35.35534, -6.8974843), (35.35534, -35.35534, 0), (27.778513, -41.57348, 0), (35.35534, -35.35534, 0), (41.57348, -27.778513, 0), (40.77466, -27.778513, 8.110583), (34.676, -35.35534, 6.8974843), (34.676, -35.35534, 6.8974843), (40.77466, -27.778513, 8.110583), (38.408886, -27.778513, 15.909483), (32.664074, -35.35534, 13.529902), (32.664074, -35.35534, 13.529902), (38.408886, -27.778513, 15.909483), (34.567085, -27.778513, 23.096987), (29.396889, -35.35534, 19.642374), (29.396889, -35.35534, 19.642374), (34.567085, -27.778513, 23.096987), (29.396889, -27.778513, 29.396889), (25, -35.35534, 25), (25, -35.35534, 25), (29.396889, -27.778513, 29.396889), (23.096987, -27.778513, 34.567085), (19.642374, -35.35534, 29.396889), (19.642374, -35.35534, 29.396889), (23.096987, -27.778513, 34.567085), (15.909483, -27.778513, 38.408886), (13.529902, -35.35534, 32.664074), (13.529902, -35.35534, 32.664074), (15.909483, -27.778513, 38.408886), (8.110583, -27.778513, 40.77466), (6.8974843, -35.35534, 34.676), (6.8974843, -35.35534, 34.676), (8.110583, -27.778513, 40.77466), (2.5456415e-15, -27.778513, 41.57348), (2.1648902e-15, -35.35534, 35.35534), (2.1648902e-15, -35.35534, 35.35534), (2.5456415e-15, -27.778513, 41.57348), (-8.110583, -27.778513, 40.77466), (-6.8974843, -35.35534, 34.676), (-6.8974843, -35.35534, 34.676), (-8.110583, -27.778513, 40.77466), (-15.909483, -27.778513, 38.408886), (-13.529902, -35.35534, 32.664074), (-13.529902, -35.35534, 32.664074), (-15.909483, -27.778513, 38.408886), (-23.096987, -27.778513, 34.567085), (-19.642374, -35.35534, 29.396889), (-19.642374, -35.35534, 29.396889), (-23.096987, -27.778513, 34.567085), (-29.396889, -27.778513, 29.396889), (-25, -35.35534, 25), (-25, -35.35534, 25), (-29.396889, -27.778513, 29.396889), (-34.567085, -27.778513, 23.096987), (-29.396889, -35.35534, 19.642374), (-29.396889, -35.35534, 19.642374), (-34.567085, -27.778513, 23.096987), (-38.408886, -27.778513, 15.909483), (-32.664074, -35.35534, 13.529902), (-32.664074, -35.35534, 13.529902), (-38.408886, -27.778513, 15.909483), (-40.77466, -27.778513, 8.110583), (-34.676, -35.35534, 6.8974843), (-34.676, -35.35534, 6.8974843), (-40.77466, -27.778513, 8.110583), (-41.57348, -27.778513, 5.091283e-15), (-35.35534, -35.35534, 4.3297804e-15), (-35.35534, -35.35534, 4.3297804e-15), (-41.57348, -27.778513, 5.091283e-15), (-40.77466, -27.778513, -8.110583), (-34.676, -35.35534, -6.8974843), (-34.676, -35.35534, -6.8974843), (-40.77466, -27.778513, -8.110583), (-38.408886, -27.778513, -15.909483), (-32.664074, -35.35534, -13.529902), (-32.664074, -35.35534, -13.529902), (-38.408886, -27.778513, -15.909483), (-34.567085, -27.778513, -23.096987), (-29.396889, -35.35534, -19.642374), (-29.396889, -35.35534, -19.642374), (-34.567085, -27.778513, -23.096987), (-29.396889, -27.778513, -29.396889), (-25, -35.35534, -25), (-25, -35.35534, -25), (-29.396889, -27.778513, -29.396889), (-23.096987, -27.778513, -34.567085), (-19.642374, -35.35534, -29.396889), (-19.642374, -35.35534, -29.396889), (-23.096987, -27.778513, -34.567085), (-15.909483, -27.778513, -38.408886), (-13.529902, -35.35534, -32.664074), (-13.529902, -35.35534, -32.664074), (-15.909483, -27.778513, -38.408886), (-8.110583, -27.778513, -40.77466), (-6.8974843, -35.35534, -34.676), (-6.8974843, -35.35534, -34.676), (-8.110583, -27.778513, -40.77466), (-7.6369244e-15, -27.778513, -41.57348), (-6.49467e-15, -35.35534, -35.35534), (-6.49467e-15, -35.35534, -35.35534), (-7.6369244e-15, -27.778513, -41.57348), (8.110583, -27.778513, -40.77466), (6.8974843, -35.35534, -34.676), (6.8974843, -35.35534, -34.676), (8.110583, -27.778513, -40.77466), (15.909483, -27.778513, -38.408886), (13.529902, -35.35534, -32.664074), (13.529902, -35.35534, -32.664074), (15.909483, -27.778513, -38.408886), (23.096987, -27.778513, -34.567085), (19.642374, -35.35534, -29.396889), (19.642374, -35.35534, -29.396889), (23.096987, -27.778513, -34.567085), (29.396889, -27.778513, -29.396889), (25, -35.35534, -25), (25, -35.35534, -25), (29.396889, -27.778513, -29.396889), (34.567085, -27.778513, -23.096987), (29.396889, -35.35534, -19.642374), (29.396889, -35.35534, -19.642374), (34.567085, -27.778513, -23.096987), (38.408886, -27.778513, -15.909483), (32.664074, -35.35534, -13.529902), (32.664074, -35.35534, -13.529902), (38.408886, -27.778513, -15.909483), (40.77466, -27.778513, -8.110583), (34.676, -35.35534, -6.8974843), (34.676, -35.35534, -6.8974843), (40.77466, -27.778513, -8.110583), (41.57348, -27.778513, 0), (35.35534, -35.35534, 0), (41.57348, -27.778513, 0), (46.193974, -19.13417, 0), (45.306374, -19.13417, 9.011998), (40.77466, -27.778513, 8.110583), (40.77466, -27.778513, 8.110583), (45.306374, -19.13417, 9.011998), (42.67767, -19.13417, 17.67767), (38.408886, -27.778513, 15.909483), (38.408886, -27.778513, 15.909483), (42.67767, -19.13417, 17.67767), (38.408886, -19.13417, 25.664), (34.567085, -27.778513, 23.096987), (34.567085, -27.778513, 23.096987), (38.408886, -19.13417, 25.664), (32.664074, -19.13417, 32.664074), (29.396889, -27.778513, 29.396889), (29.396889, -27.778513, 29.396889), (32.664074, -19.13417, 32.664074), (25.664, -19.13417, 38.408886), (23.096987, -27.778513, 34.567085), (23.096987, -27.778513, 34.567085), (25.664, -19.13417, 38.408886), (17.67767, -19.13417, 42.67767), (15.909483, -27.778513, 38.408886), (15.909483, -27.778513, 38.408886), (17.67767, -19.13417, 42.67767), (9.011998, -19.13417, 45.306374), (8.110583, -27.778513, 40.77466), (8.110583, -27.778513, 40.77466), (9.011998, -19.13417, 45.306374), (2.8285653e-15, -19.13417, 46.193974), (2.5456415e-15, -27.778513, 41.57348), (2.5456415e-15, -27.778513, 41.57348), (2.8285653e-15, -19.13417, 46.193974), (-9.011998, -19.13417, 45.306374), (-8.110583, -27.778513, 40.77466), (-8.110583, -27.778513, 40.77466), (-9.011998, -19.13417, 45.306374), (-17.67767, -19.13417, 42.67767), (-15.909483, -27.778513, 38.408886), (-15.909483, -27.778513, 38.408886), (-17.67767, -19.13417, 42.67767), (-25.664, -19.13417, 38.408886), (-23.096987, -27.778513, 34.567085), (-23.096987, -27.778513, 34.567085), (-25.664, -19.13417, 38.408886), (-32.664074, -19.13417, 32.664074), (-29.396889, -27.778513, 29.396889), (-29.396889, -27.778513, 29.396889), (-32.664074, -19.13417, 32.664074), (-38.408886, -19.13417, 25.664), (-34.567085, -27.778513, 23.096987), (-34.567085, -27.778513, 23.096987), (-38.408886, -19.13417, 25.664), (-42.67767, -19.13417, 17.67767), (-38.408886, -27.778513, 15.909483), (-38.408886, -27.778513, 15.909483), (-42.67767, -19.13417, 17.67767), (-45.306374, -19.13417, 9.011998), (-40.77466, -27.778513, 8.110583), (-40.77466, -27.778513, 8.110583), (-45.306374, -19.13417, 9.011998), (-46.193974, -19.13417, 5.6571306e-15), (-41.57348, -27.778513, 5.091283e-15), (-41.57348, -27.778513, 5.091283e-15), (-46.193974, -19.13417, 5.6571306e-15), (-45.306374, -19.13417, -9.011998), (-40.77466, -27.778513, -8.110583), (-40.77466, -27.778513, -8.110583), (-45.306374, -19.13417, -9.011998), (-42.67767, -19.13417, -17.67767), (-38.408886, -27.778513, -15.909483), (-38.408886, -27.778513, -15.909483), (-42.67767, -19.13417, -17.67767), (-38.408886, -19.13417, -25.664), (-34.567085, -27.778513, -23.096987), (-34.567085, -27.778513, -23.096987), (-38.408886, -19.13417, -25.664), (-32.664074, -19.13417, -32.664074), (-29.396889, -27.778513, -29.396889), (-29.396889, -27.778513, -29.396889), (-32.664074, -19.13417, -32.664074), (-25.664, -19.13417, -38.408886), (-23.096987, -27.778513, -34.567085), (-23.096987, -27.778513, -34.567085), (-25.664, -19.13417, -38.408886), (-17.67767, -19.13417, -42.67767), (-15.909483, -27.778513, -38.408886), (-15.909483, -27.778513, -38.408886), (-17.67767, -19.13417, -42.67767), (-9.011998, -19.13417, -45.306374), (-8.110583, -27.778513, -40.77466), (-8.110583, -27.778513, -40.77466), (-9.011998, -19.13417, -45.306374), (-8.4856955e-15, -19.13417, -46.193974), (-7.6369244e-15, -27.778513, -41.57348), (-7.6369244e-15, -27.778513, -41.57348), (-8.4856955e-15, -19.13417, -46.193974), (9.011998, -19.13417, -45.306374), (8.110583, -27.778513, -40.77466), (8.110583, -27.778513, -40.77466), (9.011998, -19.13417, -45.306374), (17.67767, -19.13417, -42.67767), (15.909483, -27.778513, -38.408886), (15.909483, -27.778513, -38.408886), (17.67767, -19.13417, -42.67767), (25.664, -19.13417, -38.408886), (23.096987, -27.778513, -34.567085), (23.096987, -27.778513, -34.567085), (25.664, -19.13417, -38.408886), (32.664074, -19.13417, -32.664074), (29.396889, -27.778513, -29.396889), (29.396889, -27.778513, -29.396889), (32.664074, -19.13417, -32.664074), (38.408886, -19.13417, -25.664), (34.567085, -27.778513, -23.096987), (34.567085, -27.778513, -23.096987), (38.408886, -19.13417, -25.664), (42.67767, -19.13417, -17.67767), (38.408886, -27.778513, -15.909483), (38.408886, -27.778513, -15.909483), (42.67767, -19.13417, -17.67767), (45.306374, -19.13417, -9.011998), (40.77466, -27.778513, -8.110583), (40.77466, -27.778513, -8.110583), (45.306374, -19.13417, -9.011998), (46.193974, -19.13417, 0), (41.57348, -27.778513, 0), (46.193974, -19.13417, 0), (49.03926, -9.754517, 0), (48.09699, -9.754517, 9.567085), (45.306374, -19.13417, 9.011998), (45.306374, -19.13417, 9.011998), (48.09699, -9.754517, 9.567085), (45.306374, -9.754517, 18.766514), (42.67767, -19.13417, 17.67767), (42.67767, -19.13417, 17.67767), (45.306374, -9.754517, 18.766514), (40.77466, -9.754517, 27.244755), (38.408886, -19.13417, 25.664), (38.408886, -19.13417, 25.664), (40.77466, -9.754517, 27.244755), (34.676, -9.754517, 34.676), (32.664074, -19.13417, 32.664074), (32.664074, -19.13417, 32.664074), (34.676, -9.754517, 34.676), (27.244755, -9.754517, 40.77466), (25.664, -19.13417, 38.408886), (25.664, -19.13417, 38.408886), (27.244755, -9.754517, 40.77466), (18.766514, -9.754517, 45.306374), (17.67767, -19.13417, 42.67767), (17.67767, -19.13417, 42.67767), (18.766514, -9.754517, 45.306374), (9.567085, -9.754517, 48.09699), (9.011998, -19.13417, 45.306374), (9.011998, -19.13417, 45.306374), (9.567085, -9.754517, 48.09699), (3.002789e-15, -9.754517, 49.03926), (2.8285653e-15, -19.13417, 46.193974), (2.8285653e-15, -19.13417, 46.193974), (3.002789e-15, -9.754517, 49.03926), (-9.567085, -9.754517, 48.09699), (-9.011998, -19.13417, 45.306374), (-9.011998, -19.13417, 45.306374), (-9.567085, -9.754517, 48.09699), (-18.766514, -9.754517, 45.306374), (-17.67767, -19.13417, 42.67767), (-17.67767, -19.13417, 42.67767), (-18.766514, -9.754517, 45.306374), (-27.244755, -9.754517, 40.77466), (-25.664, -19.13417, 38.408886), (-25.664, -19.13417, 38.408886), (-27.244755, -9.754517, 40.77466), (-34.676, -9.754517, 34.676), (-32.664074, -19.13417, 32.664074), (-32.664074, -19.13417, 32.664074), (-34.676, -9.754517, 34.676), (-40.77466, -9.754517, 27.244755), (-38.408886, -19.13417, 25.664), (-38.408886, -19.13417, 25.664), (-40.77466, -9.754517, 27.244755), (-45.306374, -9.754517, 18.766514), (-42.67767, -19.13417, 17.67767), (-42.67767, -19.13417, 17.67767), (-45.306374, -9.754517, 18.766514), (-48.09699, -9.754517, 9.567085), (-45.306374, -19.13417, 9.011998), (-45.306374, -19.13417, 9.011998), (-48.09699, -9.754517, 9.567085), (-49.03926, -9.754517, 6.005578e-15), (-46.193974, -19.13417, 5.6571306e-15), (-46.193974, -19.13417, 5.6571306e-15), (-49.03926, -9.754517, 6.005578e-15), (-48.09699, -9.754517, -9.567085), (-45.306374, -19.13417, -9.011998), (-45.306374, -19.13417, -9.011998), (-48.09699, -9.754517, -9.567085), (-45.306374, -9.754517, -18.766514), (-42.67767, -19.13417, -17.67767), (-42.67767, -19.13417, -17.67767), (-45.306374, -9.754517, -18.766514), (-40.77466, -9.754517, -27.244755), (-38.408886, -19.13417, -25.664), (-38.408886, -19.13417, -25.664), (-40.77466, -9.754517, -27.244755), (-34.676, -9.754517, -34.676), (-32.664074, -19.13417, -32.664074), (-32.664074, -19.13417, -32.664074), (-34.676, -9.754517, -34.676), (-27.244755, -9.754517, -40.77466), (-25.664, -19.13417, -38.408886), (-25.664, -19.13417, -38.408886), (-27.244755, -9.754517, -40.77466), (-18.766514, -9.754517, -45.306374), (-17.67767, -19.13417, -42.67767), (-17.67767, -19.13417, -42.67767), (-18.766514, -9.754517, -45.306374), (-9.567085, -9.754517, -48.09699), (-9.011998, -19.13417, -45.306374), (-9.011998, -19.13417, -45.306374), (-9.567085, -9.754517, -48.09699), (-9.0083665e-15, -9.754517, -49.03926), (-8.4856955e-15, -19.13417, -46.193974), (-8.4856955e-15, -19.13417, -46.193974), (-9.0083665e-15, -9.754517, -49.03926), (9.567085, -9.754517, -48.09699), (9.011998, -19.13417, -45.306374), (9.011998, -19.13417, -45.306374), (9.567085, -9.754517, -48.09699), (18.766514, -9.754517, -45.306374), (17.67767, -19.13417, -42.67767), (17.67767, -19.13417, -42.67767), (18.766514, -9.754517, -45.306374), (27.244755, -9.754517, -40.77466), (25.664, -19.13417, -38.408886), (25.664, -19.13417, -38.408886), (27.244755, -9.754517, -40.77466), (34.676, -9.754517, -34.676), (32.664074, -19.13417, -32.664074), (32.664074, -19.13417, -32.664074), (34.676, -9.754517, -34.676), (40.77466, -9.754517, -27.244755), (38.408886, -19.13417, -25.664), (38.408886, -19.13417, -25.664), (40.77466, -9.754517, -27.244755), (45.306374, -9.754517, -18.766514), (42.67767, -19.13417, -17.67767), (42.67767, -19.13417, -17.67767), (45.306374, -9.754517, -18.766514), (48.09699, -9.754517, -9.567085), (45.306374, -19.13417, -9.011998), (45.306374, -19.13417, -9.011998), (48.09699, -9.754517, -9.567085), (49.03926, -9.754517, 0), (46.193974, -19.13417, 0), (49.03926, -9.754517, 0), (50, 0, 0), (49.03926, 0, 9.754517), (48.09699, -9.754517, 9.567085), (48.09699, -9.754517, 9.567085), (49.03926, 0, 9.754517), (46.193974, 0, 19.13417), (45.306374, -9.754517, 18.766514), (45.306374, -9.754517, 18.766514), (46.193974, 0, 19.13417), (41.57348, 0, 27.778513), (40.77466, -9.754517, 27.244755), (40.77466, -9.754517, 27.244755), (41.57348, 0, 27.778513), (35.35534, 0, 35.35534), (34.676, -9.754517, 34.676), (34.676, -9.754517, 34.676), (35.35534, 0, 35.35534), (27.778513, 0, 41.57348), (27.244755, -9.754517, 40.77466), (27.244755, -9.754517, 40.77466), (27.778513, 0, 41.57348), (19.13417, 0, 46.193974), (18.766514, -9.754517, 45.306374), (18.766514, -9.754517, 45.306374), (19.13417, 0, 46.193974), (9.754517, 0, 49.03926), (9.567085, -9.754517, 48.09699), (9.567085, -9.754517, 48.09699), (9.754517, 0, 49.03926), (3.061617e-15, 0, 50), (3.002789e-15, -9.754517, 49.03926), (3.002789e-15, -9.754517, 49.03926), (3.061617e-15, 0, 50), (-9.754517, 0, 49.03926), (-9.567085, -9.754517, 48.09699), (-9.567085, -9.754517, 48.09699), (-9.754517, 0, 49.03926), (-19.13417, 0, 46.193974), (-18.766514, -9.754517, 45.306374), (-18.766514, -9.754517, 45.306374), (-19.13417, 0, 46.193974), (-27.778513, 0, 41.57348), (-27.244755, -9.754517, 40.77466), (-27.244755, -9.754517, 40.77466), (-27.778513, 0, 41.57348), (-35.35534, 0, 35.35534), (-34.676, -9.754517, 34.676), (-34.676, -9.754517, 34.676), (-35.35534, 0, 35.35534), (-41.57348, 0, 27.778513), (-40.77466, -9.754517, 27.244755), (-40.77466, -9.754517, 27.244755), (-41.57348, 0, 27.778513), (-46.193974, 0, 19.13417), (-45.306374, -9.754517, 18.766514), (-45.306374, -9.754517, 18.766514), (-46.193974, 0, 19.13417), (-49.03926, 0, 9.754517), (-48.09699, -9.754517, 9.567085), (-48.09699, -9.754517, 9.567085), (-49.03926, 0, 9.754517), (-50, 0, 6.123234e-15), (-49.03926, -9.754517, 6.005578e-15), (-49.03926, -9.754517, 6.005578e-15), (-50, 0, 6.123234e-15), (-49.03926, 0, -9.754517), (-48.09699, -9.754517, -9.567085), (-48.09699, -9.754517, -9.567085), (-49.03926, 0, -9.754517), (-46.193974, 0, -19.13417), (-45.306374, -9.754517, -18.766514), (-45.306374, -9.754517, -18.766514), (-46.193974, 0, -19.13417), (-41.57348, 0, -27.778513), (-40.77466, -9.754517, -27.244755), (-40.77466, -9.754517, -27.244755), (-41.57348, 0, -27.778513), (-35.35534, 0, -35.35534), (-34.676, -9.754517, -34.676), (-34.676, -9.754517, -34.676), (-35.35534, 0, -35.35534), (-27.778513, 0, -41.57348), (-27.244755, -9.754517, -40.77466), (-27.244755, -9.754517, -40.77466), (-27.778513, 0, -41.57348), (-19.13417, 0, -46.193974), (-18.766514, -9.754517, -45.306374), (-18.766514, -9.754517, -45.306374), (-19.13417, 0, -46.193974), (-9.754517, 0, -49.03926), (-9.567085, -9.754517, -48.09699), (-9.567085, -9.754517, -48.09699), (-9.754517, 0, -49.03926), (-9.184851e-15, 0, -50), (-9.0083665e-15, -9.754517, -49.03926), (-9.0083665e-15, -9.754517, -49.03926), (-9.184851e-15, 0, -50), (9.754517, 0, -49.03926), (9.567085, -9.754517, -48.09699), (9.567085, -9.754517, -48.09699), (9.754517, 0, -49.03926), (19.13417, 0, -46.193974), (18.766514, -9.754517, -45.306374), (18.766514, -9.754517, -45.306374), (19.13417, 0, -46.193974), (27.778513, 0, -41.57348), (27.244755, -9.754517, -40.77466), (27.244755, -9.754517, -40.77466), (27.778513, 0, -41.57348), (35.35534, 0, -35.35534), (34.676, -9.754517, -34.676), (34.676, -9.754517, -34.676), (35.35534, 0, -35.35534), (41.57348, 0, -27.778513), (40.77466, -9.754517, -27.244755), (40.77466, -9.754517, -27.244755), (41.57348, 0, -27.778513), (46.193974, 0, -19.13417), (45.306374, -9.754517, -18.766514), (45.306374, -9.754517, -18.766514), (46.193974, 0, -19.13417), (49.03926, 0, -9.754517), (48.09699, -9.754517, -9.567085), (48.09699, -9.754517, -9.567085), (49.03926, 0, -9.754517), (50, 0, 0), (49.03926, -9.754517, 0), (50, 0, 0), (49.03926, 9.754517, 0), (48.09699, 9.754517, 9.567085), (49.03926, 0, 9.754517), (49.03926, 0, 9.754517), (48.09699, 9.754517, 9.567085), (45.306374, 9.754517, 18.766514), (46.193974, 0, 19.13417), (46.193974, 0, 19.13417), (45.306374, 9.754517, 18.766514), (40.77466, 9.754517, 27.244755), (41.57348, 0, 27.778513), (41.57348, 0, 27.778513), (40.77466, 9.754517, 27.244755), (34.676, 9.754517, 34.676), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (34.676, 9.754517, 34.676), (27.244755, 9.754517, 40.77466), (27.778513, 0, 41.57348), (27.778513, 0, 41.57348), (27.244755, 9.754517, 40.77466), (18.766514, 9.754517, 45.306374), (19.13417, 0, 46.193974), (19.13417, 0, 46.193974), (18.766514, 9.754517, 45.306374), (9.567085, 9.754517, 48.09699), (9.754517, 0, 49.03926), (9.754517, 0, 49.03926), (9.567085, 9.754517, 48.09699), (3.002789e-15, 9.754517, 49.03926), (3.061617e-15, 0, 50), (3.061617e-15, 0, 50), (3.002789e-15, 9.754517, 49.03926), (-9.567085, 9.754517, 48.09699), (-9.754517, 0, 49.03926), (-9.754517, 0, 49.03926), (-9.567085, 9.754517, 48.09699), (-18.766514, 9.754517, 45.306374), (-19.13417, 0, 46.193974), (-19.13417, 0, 46.193974), (-18.766514, 9.754517, 45.306374), (-27.244755, 9.754517, 40.77466), (-27.778513, 0, 41.57348), (-27.778513, 0, 41.57348), (-27.244755, 9.754517, 40.77466), (-34.676, 9.754517, 34.676), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-34.676, 9.754517, 34.676), (-40.77466, 9.754517, 27.244755), (-41.57348, 0, 27.778513), (-41.57348, 0, 27.778513), (-40.77466, 9.754517, 27.244755), (-45.306374, 9.754517, 18.766514), (-46.193974, 0, 19.13417), (-46.193974, 0, 19.13417), (-45.306374, 9.754517, 18.766514), (-48.09699, 9.754517, 9.567085), (-49.03926, 0, 9.754517), (-49.03926, 0, 9.754517), (-48.09699, 9.754517, 9.567085), (-49.03926, 9.754517, 6.005578e-15), (-50, 0, 6.123234e-15), (-50, 0, 6.123234e-15), (-49.03926, 9.754517, 6.005578e-15), (-48.09699, 9.754517, -9.567085), (-49.03926, 0, -9.754517), (-49.03926, 0, -9.754517), (-48.09699, 9.754517, -9.567085), (-45.306374, 9.754517, -18.766514), (-46.193974, 0, -19.13417), (-46.193974, 0, -19.13417), (-45.306374, 9.754517, -18.766514), (-40.77466, 9.754517, -27.244755), (-41.57348, 0, -27.778513), (-41.57348, 0, -27.778513), (-40.77466, 9.754517, -27.244755), (-34.676, 9.754517, -34.676), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-34.676, 9.754517, -34.676), (-27.244755, 9.754517, -40.77466), (-27.778513, 0, -41.57348), (-27.778513, 0, -41.57348), (-27.244755, 9.754517, -40.77466), (-18.766514, 9.754517, -45.306374), (-19.13417, 0, -46.193974), (-19.13417, 0, -46.193974), (-18.766514, 9.754517, -45.306374), (-9.567085, 9.754517, -48.09699), (-9.754517, 0, -49.03926), (-9.754517, 0, -49.03926), (-9.567085, 9.754517, -48.09699), (-9.0083665e-15, 9.754517, -49.03926), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (-9.0083665e-15, 9.754517, -49.03926), (9.567085, 9.754517, -48.09699), (9.754517, 0, -49.03926), (9.754517, 0, -49.03926), (9.567085, 9.754517, -48.09699), (18.766514, 9.754517, -45.306374), (19.13417, 0, -46.193974), (19.13417, 0, -46.193974), (18.766514, 9.754517, -45.306374), (27.244755, 9.754517, -40.77466), (27.778513, 0, -41.57348), (27.778513, 0, -41.57348), (27.244755, 9.754517, -40.77466), (34.676, 9.754517, -34.676), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (34.676, 9.754517, -34.676), (40.77466, 9.754517, -27.244755), (41.57348, 0, -27.778513), (41.57348, 0, -27.778513), (40.77466, 9.754517, -27.244755), (45.306374, 9.754517, -18.766514), (46.193974, 0, -19.13417), (46.193974, 0, -19.13417), (45.306374, 9.754517, -18.766514), (48.09699, 9.754517, -9.567085), (49.03926, 0, -9.754517), (49.03926, 0, -9.754517), (48.09699, 9.754517, -9.567085), (49.03926, 9.754517, 0), (50, 0, 0), (49.03926, 9.754517, 0), (46.193974, 19.13417, 0), (45.306374, 19.13417, 9.011998), (48.09699, 9.754517, 9.567085), (48.09699, 9.754517, 9.567085), (45.306374, 19.13417, 9.011998), (42.67767, 19.13417, 17.67767), (45.306374, 9.754517, 18.766514), (45.306374, 9.754517, 18.766514), (42.67767, 19.13417, 17.67767), (38.408886, 19.13417, 25.664), (40.77466, 9.754517, 27.244755), (40.77466, 9.754517, 27.244755), (38.408886, 19.13417, 25.664), (32.664074, 19.13417, 32.664074), (34.676, 9.754517, 34.676), (34.676, 9.754517, 34.676), (32.664074, 19.13417, 32.664074), (25.664, 19.13417, 38.408886), (27.244755, 9.754517, 40.77466), (27.244755, 9.754517, 40.77466), (25.664, 19.13417, 38.408886), (17.67767, 19.13417, 42.67767), (18.766514, 9.754517, 45.306374), (18.766514, 9.754517, 45.306374), (17.67767, 19.13417, 42.67767), (9.011998, 19.13417, 45.306374), (9.567085, 9.754517, 48.09699), (9.567085, 9.754517, 48.09699), (9.011998, 19.13417, 45.306374), (2.8285653e-15, 19.13417, 46.193974), (3.002789e-15, 9.754517, 49.03926), (3.002789e-15, 9.754517, 49.03926), (2.8285653e-15, 19.13417, 46.193974), (-9.011998, 19.13417, 45.306374), (-9.567085, 9.754517, 48.09699), (-9.567085, 9.754517, 48.09699), (-9.011998, 19.13417, 45.306374), (-17.67767, 19.13417, 42.67767), (-18.766514, 9.754517, 45.306374), (-18.766514, 9.754517, 45.306374), (-17.67767, 19.13417, 42.67767), (-25.664, 19.13417, 38.408886), (-27.244755, 9.754517, 40.77466), (-27.244755, 9.754517, 40.77466), (-25.664, 19.13417, 38.408886), (-32.664074, 19.13417, 32.664074), (-34.676, 9.754517, 34.676), (-34.676, 9.754517, 34.676), (-32.664074, 19.13417, 32.664074), (-38.408886, 19.13417, 25.664), (-40.77466, 9.754517, 27.244755), (-40.77466, 9.754517, 27.244755), (-38.408886, 19.13417, 25.664), (-42.67767, 19.13417, 17.67767), (-45.306374, 9.754517, 18.766514), (-45.306374, 9.754517, 18.766514), (-42.67767, 19.13417, 17.67767), (-45.306374, 19.13417, 9.011998), (-48.09699, 9.754517, 9.567085), (-48.09699, 9.754517, 9.567085), (-45.306374, 19.13417, 9.011998), (-46.193974, 19.13417, 5.6571306e-15), (-49.03926, 9.754517, 6.005578e-15), (-49.03926, 9.754517, 6.005578e-15), (-46.193974, 19.13417, 5.6571306e-15), (-45.306374, 19.13417, -9.011998), (-48.09699, 9.754517, -9.567085), (-48.09699, 9.754517, -9.567085), (-45.306374, 19.13417, -9.011998), (-42.67767, 19.13417, -17.67767), (-45.306374, 9.754517, -18.766514), (-45.306374, 9.754517, -18.766514), (-42.67767, 19.13417, -17.67767), (-38.408886, 19.13417, -25.664), (-40.77466, 9.754517, -27.244755), (-40.77466, 9.754517, -27.244755), (-38.408886, 19.13417, -25.664), (-32.664074, 19.13417, -32.664074), (-34.676, 9.754517, -34.676), (-34.676, 9.754517, -34.676), (-32.664074, 19.13417, -32.664074), (-25.664, 19.13417, -38.408886), (-27.244755, 9.754517, -40.77466), (-27.244755, 9.754517, -40.77466), (-25.664, 19.13417, -38.408886), (-17.67767, 19.13417, -42.67767), (-18.766514, 9.754517, -45.306374), (-18.766514, 9.754517, -45.306374), (-17.67767, 19.13417, -42.67767), (-9.011998, 19.13417, -45.306374), (-9.567085, 9.754517, -48.09699), (-9.567085, 9.754517, -48.09699), (-9.011998, 19.13417, -45.306374), (-8.4856955e-15, 19.13417, -46.193974), (-9.0083665e-15, 9.754517, -49.03926), (-9.0083665e-15, 9.754517, -49.03926), (-8.4856955e-15, 19.13417, -46.193974), (9.011998, 19.13417, -45.306374), (9.567085, 9.754517, -48.09699), (9.567085, 9.754517, -48.09699), (9.011998, 19.13417, -45.306374), (17.67767, 19.13417, -42.67767), (18.766514, 9.754517, -45.306374), (18.766514, 9.754517, -45.306374), (17.67767, 19.13417, -42.67767), (25.664, 19.13417, -38.408886), (27.244755, 9.754517, -40.77466), (27.244755, 9.754517, -40.77466), (25.664, 19.13417, -38.408886), (32.664074, 19.13417, -32.664074), (34.676, 9.754517, -34.676), (34.676, 9.754517, -34.676), (32.664074, 19.13417, -32.664074), (38.408886, 19.13417, -25.664), (40.77466, 9.754517, -27.244755), (40.77466, 9.754517, -27.244755), (38.408886, 19.13417, -25.664), (42.67767, 19.13417, -17.67767), (45.306374, 9.754517, -18.766514), (45.306374, 9.754517, -18.766514), (42.67767, 19.13417, -17.67767), (45.306374, 19.13417, -9.011998), (48.09699, 9.754517, -9.567085), (48.09699, 9.754517, -9.567085), (45.306374, 19.13417, -9.011998), (46.193974, 19.13417, 0), (49.03926, 9.754517, 0), (46.193974, 19.13417, 0), (41.57348, 27.778513, 0), (40.77466, 27.778513, 8.110583), (45.306374, 19.13417, 9.011998), (45.306374, 19.13417, 9.011998), (40.77466, 27.778513, 8.110583), (38.408886, 27.778513, 15.909483), (42.67767, 19.13417, 17.67767), (42.67767, 19.13417, 17.67767), (38.408886, 27.778513, 15.909483), (34.567085, 27.778513, 23.096987), (38.408886, 19.13417, 25.664), (38.408886, 19.13417, 25.664), (34.567085, 27.778513, 23.096987), (29.396889, 27.778513, 29.396889), (32.664074, 19.13417, 32.664074), (32.664074, 19.13417, 32.664074), (29.396889, 27.778513, 29.396889), (23.096987, 27.778513, 34.567085), (25.664, 19.13417, 38.408886), (25.664, 19.13417, 38.408886), (23.096987, 27.778513, 34.567085), (15.909483, 27.778513, 38.408886), (17.67767, 19.13417, 42.67767), (17.67767, 19.13417, 42.67767), (15.909483, 27.778513, 38.408886), (8.110583, 27.778513, 40.77466), (9.011998, 19.13417, 45.306374), (9.011998, 19.13417, 45.306374), (8.110583, 27.778513, 40.77466), (2.5456415e-15, 27.778513, 41.57348), (2.8285653e-15, 19.13417, 46.193974), (2.8285653e-15, 19.13417, 46.193974), (2.5456415e-15, 27.778513, 41.57348), (-8.110583, 27.778513, 40.77466), (-9.011998, 19.13417, 45.306374), (-9.011998, 19.13417, 45.306374), (-8.110583, 27.778513, 40.77466), (-15.909483, 27.778513, 38.408886), (-17.67767, 19.13417, 42.67767), (-17.67767, 19.13417, 42.67767), (-15.909483, 27.778513, 38.408886), (-23.096987, 27.778513, 34.567085), (-25.664, 19.13417, 38.408886), (-25.664, 19.13417, 38.408886), (-23.096987, 27.778513, 34.567085), (-29.396889, 27.778513, 29.396889), (-32.664074, 19.13417, 32.664074), (-32.664074, 19.13417, 32.664074), (-29.396889, 27.778513, 29.396889), (-34.567085, 27.778513, 23.096987), (-38.408886, 19.13417, 25.664), (-38.408886, 19.13417, 25.664), (-34.567085, 27.778513, 23.096987), (-38.408886, 27.778513, 15.909483), (-42.67767, 19.13417, 17.67767), (-42.67767, 19.13417, 17.67767), (-38.408886, 27.778513, 15.909483), (-40.77466, 27.778513, 8.110583), (-45.306374, 19.13417, 9.011998), (-45.306374, 19.13417, 9.011998), (-40.77466, 27.778513, 8.110583), (-41.57348, 27.778513, 5.091283e-15), (-46.193974, 19.13417, 5.6571306e-15), (-46.193974, 19.13417, 5.6571306e-15), (-41.57348, 27.778513, 5.091283e-15), (-40.77466, 27.778513, -8.110583), (-45.306374, 19.13417, -9.011998), (-45.306374, 19.13417, -9.011998), (-40.77466, 27.778513, -8.110583), (-38.408886, 27.778513, -15.909483), (-42.67767, 19.13417, -17.67767), (-42.67767, 19.13417, -17.67767), (-38.408886, 27.778513, -15.909483), (-34.567085, 27.778513, -23.096987), (-38.408886, 19.13417, -25.664), (-38.408886, 19.13417, -25.664), (-34.567085, 27.778513, -23.096987), (-29.396889, 27.778513, -29.396889), (-32.664074, 19.13417, -32.664074), (-32.664074, 19.13417, -32.664074), (-29.396889, 27.778513, -29.396889), (-23.096987, 27.778513, -34.567085), (-25.664, 19.13417, -38.408886), (-25.664, 19.13417, -38.408886), (-23.096987, 27.778513, -34.567085), (-15.909483, 27.778513, -38.408886), (-17.67767, 19.13417, -42.67767), (-17.67767, 19.13417, -42.67767), (-15.909483, 27.778513, -38.408886), (-8.110583, 27.778513, -40.77466), (-9.011998, 19.13417, -45.306374), (-9.011998, 19.13417, -45.306374), (-8.110583, 27.778513, -40.77466), (-7.6369244e-15, 27.778513, -41.57348), (-8.4856955e-15, 19.13417, -46.193974), (-8.4856955e-15, 19.13417, -46.193974), (-7.6369244e-15, 27.778513, -41.57348), (8.110583, 27.778513, -40.77466), (9.011998, 19.13417, -45.306374), (9.011998, 19.13417, -45.306374), (8.110583, 27.778513, -40.77466), (15.909483, 27.778513, -38.408886), (17.67767, 19.13417, -42.67767), (17.67767, 19.13417, -42.67767), (15.909483, 27.778513, -38.408886), (23.096987, 27.778513, -34.567085), (25.664, 19.13417, -38.408886), (25.664, 19.13417, -38.408886), (23.096987, 27.778513, -34.567085), (29.396889, 27.778513, -29.396889), (32.664074, 19.13417, -32.664074), (32.664074, 19.13417, -32.664074), (29.396889, 27.778513, -29.396889), (34.567085, 27.778513, -23.096987), (38.408886, 19.13417, -25.664), (38.408886, 19.13417, -25.664), (34.567085, 27.778513, -23.096987), (38.408886, 27.778513, -15.909483), (42.67767, 19.13417, -17.67767), (42.67767, 19.13417, -17.67767), (38.408886, 27.778513, -15.909483), (40.77466, 27.778513, -8.110583), (45.306374, 19.13417, -9.011998), (45.306374, 19.13417, -9.011998), (40.77466, 27.778513, -8.110583), (41.57348, 27.778513, 0), (46.193974, 19.13417, 0), (41.57348, 27.778513, 0), (35.35534, 35.35534, 0), (34.676, 35.35534, 6.8974843), (40.77466, 27.778513, 8.110583), (40.77466, 27.778513, 8.110583), (34.676, 35.35534, 6.8974843), (32.664074, 35.35534, 13.529902), (38.408886, 27.778513, 15.909483), (38.408886, 27.778513, 15.909483), (32.664074, 35.35534, 13.529902), (29.396889, 35.35534, 19.642374), (34.567085, 27.778513, 23.096987), (34.567085, 27.778513, 23.096987), (29.396889, 35.35534, 19.642374), (25, 35.35534, 25), (29.396889, 27.778513, 29.396889), (29.396889, 27.778513, 29.396889), (25, 35.35534, 25), (19.642374, 35.35534, 29.396889), (23.096987, 27.778513, 34.567085), (23.096987, 27.778513, 34.567085), (19.642374, 35.35534, 29.396889), (13.529902, 35.35534, 32.664074), (15.909483, 27.778513, 38.408886), (15.909483, 27.778513, 38.408886), (13.529902, 35.35534, 32.664074), (6.8974843, 35.35534, 34.676), (8.110583, 27.778513, 40.77466), (8.110583, 27.778513, 40.77466), (6.8974843, 35.35534, 34.676), (2.1648902e-15, 35.35534, 35.35534), (2.5456415e-15, 27.778513, 41.57348), (2.5456415e-15, 27.778513, 41.57348), (2.1648902e-15, 35.35534, 35.35534), (-6.8974843, 35.35534, 34.676), (-8.110583, 27.778513, 40.77466), (-8.110583, 27.778513, 40.77466), (-6.8974843, 35.35534, 34.676), (-13.529902, 35.35534, 32.664074), (-15.909483, 27.778513, 38.408886), (-15.909483, 27.778513, 38.408886), (-13.529902, 35.35534, 32.664074), (-19.642374, 35.35534, 29.396889), (-23.096987, 27.778513, 34.567085), (-23.096987, 27.778513, 34.567085), (-19.642374, 35.35534, 29.396889), (-25, 35.35534, 25), (-29.396889, 27.778513, 29.396889), (-29.396889, 27.778513, 29.396889), (-25, 35.35534, 25), (-29.396889, 35.35534, 19.642374), (-34.567085, 27.778513, 23.096987), (-34.567085, 27.778513, 23.096987), (-29.396889, 35.35534, 19.642374), (-32.664074, 35.35534, 13.529902), (-38.408886, 27.778513, 15.909483), (-38.408886, 27.778513, 15.909483), (-32.664074, 35.35534, 13.529902), (-34.676, 35.35534, 6.8974843), (-40.77466, 27.778513, 8.110583), (-40.77466, 27.778513, 8.110583), (-34.676, 35.35534, 6.8974843), (-35.35534, 35.35534, 4.3297804e-15), (-41.57348, 27.778513, 5.091283e-15), (-41.57348, 27.778513, 5.091283e-15), (-35.35534, 35.35534, 4.3297804e-15), (-34.676, 35.35534, -6.8974843), (-40.77466, 27.778513, -8.110583), (-40.77466, 27.778513, -8.110583), (-34.676, 35.35534, -6.8974843), (-32.664074, 35.35534, -13.529902), (-38.408886, 27.778513, -15.909483), (-38.408886, 27.778513, -15.909483), (-32.664074, 35.35534, -13.529902), (-29.396889, 35.35534, -19.642374), (-34.567085, 27.778513, -23.096987), (-34.567085, 27.778513, -23.096987), (-29.396889, 35.35534, -19.642374), (-25, 35.35534, -25), (-29.396889, 27.778513, -29.396889), (-29.396889, 27.778513, -29.396889), (-25, 35.35534, -25), (-19.642374, 35.35534, -29.396889), (-23.096987, 27.778513, -34.567085), (-23.096987, 27.778513, -34.567085), (-19.642374, 35.35534, -29.396889), (-13.529902, 35.35534, -32.664074), (-15.909483, 27.778513, -38.408886), (-15.909483, 27.778513, -38.408886), (-13.529902, 35.35534, -32.664074), (-6.8974843, 35.35534, -34.676), (-8.110583, 27.778513, -40.77466), (-8.110583, 27.778513, -40.77466), (-6.8974843, 35.35534, -34.676), (-6.49467e-15, 35.35534, -35.35534), (-7.6369244e-15, 27.778513, -41.57348), (-7.6369244e-15, 27.778513, -41.57348), (-6.49467e-15, 35.35534, -35.35534), (6.8974843, 35.35534, -34.676), (8.110583, 27.778513, -40.77466), (8.110583, 27.778513, -40.77466), (6.8974843, 35.35534, -34.676), (13.529902, 35.35534, -32.664074), (15.909483, 27.778513, -38.408886), (15.909483, 27.778513, -38.408886), (13.529902, 35.35534, -32.664074), (19.642374, 35.35534, -29.396889), (23.096987, 27.778513, -34.567085), (23.096987, 27.778513, -34.567085), (19.642374, 35.35534, -29.396889), (25, 35.35534, -25), (29.396889, 27.778513, -29.396889), (29.396889, 27.778513, -29.396889), (25, 35.35534, -25), (29.396889, 35.35534, -19.642374), (34.567085, 27.778513, -23.096987), (34.567085, 27.778513, -23.096987), (29.396889, 35.35534, -19.642374), (32.664074, 35.35534, -13.529902), (38.408886, 27.778513, -15.909483), (38.408886, 27.778513, -15.909483), (32.664074, 35.35534, -13.529902), (34.676, 35.35534, -6.8974843), (40.77466, 27.778513, -8.110583), (40.77466, 27.778513, -8.110583), (34.676, 35.35534, -6.8974843), (35.35534, 35.35534, 0), (41.57348, 27.778513, 0), (35.35534, 35.35534, 0), (27.778513, 41.57348, 0), (27.244755, 41.57348, 5.4193187), (34.676, 35.35534, 6.8974843), (34.676, 35.35534, 6.8974843), (27.244755, 41.57348, 5.4193187), (25.664, 41.57348, 10.630376), (32.664074, 35.35534, 13.529902), (32.664074, 35.35534, 13.529902), (25.664, 41.57348, 10.630376), (23.096987, 41.57348, 15.432914), (29.396889, 35.35534, 19.642374), (29.396889, 35.35534, 19.642374), (23.096987, 41.57348, 15.432914), (19.642374, 41.57348, 19.642374), (25, 35.35534, 25), (25, 35.35534, 25), (19.642374, 41.57348, 19.642374), (15.432914, 41.57348, 23.096987), (19.642374, 35.35534, 29.396889), (19.642374, 35.35534, 29.396889), (15.432914, 41.57348, 23.096987), (10.630376, 41.57348, 25.664), (13.529902, 35.35534, 32.664074), (13.529902, 35.35534, 32.664074), (10.630376, 41.57348, 25.664), (5.4193187, 41.57348, 27.244755), (6.8974843, 35.35534, 34.676), (6.8974843, 35.35534, 34.676), (5.4193187, 41.57348, 27.244755), (1.7009433e-15, 41.57348, 27.778513), (2.1648902e-15, 35.35534, 35.35534), (2.1648902e-15, 35.35534, 35.35534), (1.7009433e-15, 41.57348, 27.778513), (-5.4193187, 41.57348, 27.244755), (-6.8974843, 35.35534, 34.676), (-6.8974843, 35.35534, 34.676), (-5.4193187, 41.57348, 27.244755), (-10.630376, 41.57348, 25.664), (-13.529902, 35.35534, 32.664074), (-13.529902, 35.35534, 32.664074), (-10.630376, 41.57348, 25.664), (-15.432914, 41.57348, 23.096987), (-19.642374, 35.35534, 29.396889), (-19.642374, 35.35534, 29.396889), (-15.432914, 41.57348, 23.096987), (-19.642374, 41.57348, 19.642374), (-25, 35.35534, 25), (-25, 35.35534, 25), (-19.642374, 41.57348, 19.642374), (-23.096987, 41.57348, 15.432914), (-29.396889, 35.35534, 19.642374), (-29.396889, 35.35534, 19.642374), (-23.096987, 41.57348, 15.432914), (-25.664, 41.57348, 10.630376), (-32.664074, 35.35534, 13.529902), (-32.664074, 35.35534, 13.529902), (-25.664, 41.57348, 10.630376), (-27.244755, 41.57348, 5.4193187), (-34.676, 35.35534, 6.8974843), (-34.676, 35.35534, 6.8974843), (-27.244755, 41.57348, 5.4193187), (-27.778513, 41.57348, 3.4018865e-15), (-35.35534, 35.35534, 4.3297804e-15), (-35.35534, 35.35534, 4.3297804e-15), (-27.778513, 41.57348, 3.4018865e-15), (-27.244755, 41.57348, -5.4193187), (-34.676, 35.35534, -6.8974843), (-34.676, 35.35534, -6.8974843), (-27.244755, 41.57348, -5.4193187), (-25.664, 41.57348, -10.630376), (-32.664074, 35.35534, -13.529902), (-32.664074, 35.35534, -13.529902), (-25.664, 41.57348, -10.630376), (-23.096987, 41.57348, -15.432914), (-29.396889, 35.35534, -19.642374), (-29.396889, 35.35534, -19.642374), (-23.096987, 41.57348, -15.432914), (-19.642374, 41.57348, -19.642374), (-25, 35.35534, -25), (-25, 35.35534, -25), (-19.642374, 41.57348, -19.642374), (-15.432914, 41.57348, -23.096987), (-19.642374, 35.35534, -29.396889), (-19.642374, 35.35534, -29.396889), (-15.432914, 41.57348, -23.096987), (-10.630376, 41.57348, -25.664), (-13.529902, 35.35534, -32.664074), (-13.529902, 35.35534, -32.664074), (-10.630376, 41.57348, -25.664), (-5.4193187, 41.57348, -27.244755), (-6.8974843, 35.35534, -34.676), (-6.8974843, 35.35534, -34.676), (-5.4193187, 41.57348, -27.244755), (-5.1028297e-15, 41.57348, -27.778513), (-6.49467e-15, 35.35534, -35.35534), (-6.49467e-15, 35.35534, -35.35534), (-5.1028297e-15, 41.57348, -27.778513), (5.4193187, 41.57348, -27.244755), (6.8974843, 35.35534, -34.676), (6.8974843, 35.35534, -34.676), (5.4193187, 41.57348, -27.244755), (10.630376, 41.57348, -25.664), (13.529902, 35.35534, -32.664074), (13.529902, 35.35534, -32.664074), (10.630376, 41.57348, -25.664), (15.432914, 41.57348, -23.096987), (19.642374, 35.35534, -29.396889), (19.642374, 35.35534, -29.396889), (15.432914, 41.57348, -23.096987), (19.642374, 41.57348, -19.642374), (25, 35.35534, -25), (25, 35.35534, -25), (19.642374, 41.57348, -19.642374), (23.096987, 41.57348, -15.432914), (29.396889, 35.35534, -19.642374), (29.396889, 35.35534, -19.642374), (23.096987, 41.57348, -15.432914), (25.664, 41.57348, -10.630376), (32.664074, 35.35534, -13.529902), (32.664074, 35.35534, -13.529902), (25.664, 41.57348, -10.630376), (27.244755, 41.57348, -5.4193187), (34.676, 35.35534, -6.8974843), (34.676, 35.35534, -6.8974843), (27.244755, 41.57348, -5.4193187), (27.778513, 41.57348, 0), (35.35534, 35.35534, 0), (27.778513, 41.57348, 0), (19.13417, 46.193974, 0), (18.766514, 46.193974, 3.7328918), (27.244755, 41.57348, 5.4193187), (27.244755, 41.57348, 5.4193187), (18.766514, 46.193974, 3.7328918), (17.67767, 46.193974, 7.322331), (25.664, 41.57348, 10.630376), (25.664, 41.57348, 10.630376), (17.67767, 46.193974, 7.322331), (15.909483, 46.193974, 10.630376), (23.096987, 41.57348, 15.432914), (23.096987, 41.57348, 15.432914), (15.909483, 46.193974, 10.630376), (13.529902, 46.193974, 13.529902), (19.642374, 41.57348, 19.642374), (19.642374, 41.57348, 19.642374), (13.529902, 46.193974, 13.529902), (10.630376, 46.193974, 15.909483), (15.432914, 41.57348, 23.096987), (15.432914, 41.57348, 23.096987), (10.630376, 46.193974, 15.909483), (7.322331, 46.193974, 17.67767), (10.630376, 41.57348, 25.664), (10.630376, 41.57348, 25.664), (7.322331, 46.193974, 17.67767), (3.7328918, 46.193974, 18.766514), (5.4193187, 41.57348, 27.244755), (5.4193187, 41.57348, 27.244755), (3.7328918, 46.193974, 18.766514), (1.1716302e-15, 46.193974, 19.13417), (1.7009433e-15, 41.57348, 27.778513), (1.7009433e-15, 41.57348, 27.778513), (1.1716302e-15, 46.193974, 19.13417), (-3.7328918, 46.193974, 18.766514), (-5.4193187, 41.57348, 27.244755), (-5.4193187, 41.57348, 27.244755), (-3.7328918, 46.193974, 18.766514), (-7.322331, 46.193974, 17.67767), (-10.630376, 41.57348, 25.664), (-10.630376, 41.57348, 25.664), (-7.322331, 46.193974, 17.67767), (-10.630376, 46.193974, 15.909483), (-15.432914, 41.57348, 23.096987), (-15.432914, 41.57348, 23.096987), (-10.630376, 46.193974, 15.909483), (-13.529902, 46.193974, 13.529902), (-19.642374, 41.57348, 19.642374), (-19.642374, 41.57348, 19.642374), (-13.529902, 46.193974, 13.529902), (-15.909483, 46.193974, 10.630376), (-23.096987, 41.57348, 15.432914), (-23.096987, 41.57348, 15.432914), (-15.909483, 46.193974, 10.630376), (-17.67767, 46.193974, 7.322331), (-25.664, 41.57348, 10.630376), (-25.664, 41.57348, 10.630376), (-17.67767, 46.193974, 7.322331), (-18.766514, 46.193974, 3.7328918), (-27.244755, 41.57348, 5.4193187), (-27.244755, 41.57348, 5.4193187), (-18.766514, 46.193974, 3.7328918), (-19.13417, 46.193974, 2.3432603e-15), (-27.778513, 41.57348, 3.4018865e-15), (-27.778513, 41.57348, 3.4018865e-15), (-19.13417, 46.193974, 2.3432603e-15), (-18.766514, 46.193974, -3.7328918), (-27.244755, 41.57348, -5.4193187), (-27.244755, 41.57348, -5.4193187), (-18.766514, 46.193974, -3.7328918), (-17.67767, 46.193974, -7.322331), (-25.664, 41.57348, -10.630376), (-25.664, 41.57348, -10.630376), (-17.67767, 46.193974, -7.322331), (-15.909483, 46.193974, -10.630376), (-23.096987, 41.57348, -15.432914), (-23.096987, 41.57348, -15.432914), (-15.909483, 46.193974, -10.630376), (-13.529902, 46.193974, -13.529902), (-19.642374, 41.57348, -19.642374), (-19.642374, 41.57348, -19.642374), (-13.529902, 46.193974, -13.529902), (-10.630376, 46.193974, -15.909483), (-15.432914, 41.57348, -23.096987), (-15.432914, 41.57348, -23.096987), (-10.630376, 46.193974, -15.909483), (-7.322331, 46.193974, -17.67767), (-10.630376, 41.57348, -25.664), (-10.630376, 41.57348, -25.664), (-7.322331, 46.193974, -17.67767), (-3.7328918, 46.193974, -18.766514), (-5.4193187, 41.57348, -27.244755), (-5.4193187, 41.57348, -27.244755), (-3.7328918, 46.193974, -18.766514), (-3.5148903e-15, 46.193974, -19.13417), (-5.1028297e-15, 41.57348, -27.778513), (-5.1028297e-15, 41.57348, -27.778513), (-3.5148903e-15, 46.193974, -19.13417), (3.7328918, 46.193974, -18.766514), (5.4193187, 41.57348, -27.244755), (5.4193187, 41.57348, -27.244755), (3.7328918, 46.193974, -18.766514), (7.322331, 46.193974, -17.67767), (10.630376, 41.57348, -25.664), (10.630376, 41.57348, -25.664), (7.322331, 46.193974, -17.67767), (10.630376, 46.193974, -15.909483), (15.432914, 41.57348, -23.096987), (15.432914, 41.57348, -23.096987), (10.630376, 46.193974, -15.909483), (13.529902, 46.193974, -13.529902), (19.642374, 41.57348, -19.642374), (19.642374, 41.57348, -19.642374), (13.529902, 46.193974, -13.529902), (15.909483, 46.193974, -10.630376), (23.096987, 41.57348, -15.432914), (23.096987, 41.57348, -15.432914), (15.909483, 46.193974, -10.630376), (17.67767, 46.193974, -7.322331), (25.664, 41.57348, -10.630376), (25.664, 41.57348, -10.630376), (17.67767, 46.193974, -7.322331), (18.766514, 46.193974, -3.7328918), (27.244755, 41.57348, -5.4193187), (27.244755, 41.57348, -5.4193187), (18.766514, 46.193974, -3.7328918), (19.13417, 46.193974, 0), (27.778513, 41.57348, 0), (19.13417, 46.193974, 0), (9.754517, 49.03926, 0), (9.567085, 49.03926, 1.9030117), (18.766514, 46.193974, 3.7328918), (18.766514, 46.193974, 3.7328918), (9.567085, 49.03926, 1.9030117), (9.011998, 49.03926, 3.7328918), (17.67767, 46.193974, 7.322331), (17.67767, 46.193974, 7.322331), (9.011998, 49.03926, 3.7328918), (8.110583, 49.03926, 5.4193187), (15.909483, 46.193974, 10.630376), (15.909483, 46.193974, 10.630376), (8.110583, 49.03926, 5.4193187), (6.8974843, 49.03926, 6.8974843), (13.529902, 46.193974, 13.529902), (13.529902, 46.193974, 13.529902), (6.8974843, 49.03926, 6.8974843), (5.4193187, 49.03926, 8.110583), (10.630376, 46.193974, 15.909483), (10.630376, 46.193974, 15.909483), (5.4193187, 49.03926, 8.110583), (3.7328918, 49.03926, 9.011998), (7.322331, 46.193974, 17.67767), (7.322331, 46.193974, 17.67767), (3.7328918, 49.03926, 9.011998), (1.9030117, 49.03926, 9.567085), (3.7328918, 46.193974, 18.766514), (3.7328918, 46.193974, 18.766514), (1.9030117, 49.03926, 9.567085), (5.9729185e-16, 49.03926, 9.754517), (1.1716302e-15, 46.193974, 19.13417), (1.1716302e-15, 46.193974, 19.13417), (5.9729185e-16, 49.03926, 9.754517), (-1.9030117, 49.03926, 9.567085), (-3.7328918, 46.193974, 18.766514), (-3.7328918, 46.193974, 18.766514), (-1.9030117, 49.03926, 9.567085), (-3.7328918, 49.03926, 9.011998), (-7.322331, 46.193974, 17.67767), (-7.322331, 46.193974, 17.67767), (-3.7328918, 49.03926, 9.011998), (-5.4193187, 49.03926, 8.110583), (-10.630376, 46.193974, 15.909483), (-10.630376, 46.193974, 15.909483), (-5.4193187, 49.03926, 8.110583), (-6.8974843, 49.03926, 6.8974843), (-13.529902, 46.193974, 13.529902), (-13.529902, 46.193974, 13.529902), (-6.8974843, 49.03926, 6.8974843), (-8.110583, 49.03926, 5.4193187), (-15.909483, 46.193974, 10.630376), (-15.909483, 46.193974, 10.630376), (-8.110583, 49.03926, 5.4193187), (-9.011998, 49.03926, 3.7328918), (-17.67767, 46.193974, 7.322331), (-17.67767, 46.193974, 7.322331), (-9.011998, 49.03926, 3.7328918), (-9.567085, 49.03926, 1.9030117), (-18.766514, 46.193974, 3.7328918), (-18.766514, 46.193974, 3.7328918), (-9.567085, 49.03926, 1.9030117), (-9.754517, 49.03926, 1.1945837e-15), (-19.13417, 46.193974, 2.3432603e-15), (-19.13417, 46.193974, 2.3432603e-15), (-9.754517, 49.03926, 1.1945837e-15), (-9.567085, 49.03926, -1.9030117), (-18.766514, 46.193974, -3.7328918), (-18.766514, 46.193974, -3.7328918), (-9.567085, 49.03926, -1.9030117), (-9.011998, 49.03926, -3.7328918), (-17.67767, 46.193974, -7.322331), (-17.67767, 46.193974, -7.322331), (-9.011998, 49.03926, -3.7328918), (-8.110583, 49.03926, -5.4193187), (-15.909483, 46.193974, -10.630376), (-15.909483, 46.193974, -10.630376), (-8.110583, 49.03926, -5.4193187), (-6.8974843, 49.03926, -6.8974843), (-13.529902, 46.193974, -13.529902), (-13.529902, 46.193974, -13.529902), (-6.8974843, 49.03926, -6.8974843), (-5.4193187, 49.03926, -8.110583), (-10.630376, 46.193974, -15.909483), (-10.630376, 46.193974, -15.909483), (-5.4193187, 49.03926, -8.110583), (-3.7328918, 49.03926, -9.011998), (-7.322331, 46.193974, -17.67767), (-7.322331, 46.193974, -17.67767), (-3.7328918, 49.03926, -9.011998), (-1.9030117, 49.03926, -9.567085), (-3.7328918, 46.193974, -18.766514), (-3.7328918, 46.193974, -18.766514), (-1.9030117, 49.03926, -9.567085), (-1.7918755e-15, 49.03926, -9.754517), (-3.5148903e-15, 46.193974, -19.13417), (-3.5148903e-15, 46.193974, -19.13417), (-1.7918755e-15, 49.03926, -9.754517), (1.9030117, 49.03926, -9.567085), (3.7328918, 46.193974, -18.766514), (3.7328918, 46.193974, -18.766514), (1.9030117, 49.03926, -9.567085), (3.7328918, 49.03926, -9.011998), (7.322331, 46.193974, -17.67767), (7.322331, 46.193974, -17.67767), (3.7328918, 49.03926, -9.011998), (5.4193187, 49.03926, -8.110583), (10.630376, 46.193974, -15.909483), (10.630376, 46.193974, -15.909483), (5.4193187, 49.03926, -8.110583), (6.8974843, 49.03926, -6.8974843), (13.529902, 46.193974, -13.529902), (13.529902, 46.193974, -13.529902), (6.8974843, 49.03926, -6.8974843), (8.110583, 49.03926, -5.4193187), (15.909483, 46.193974, -10.630376), (15.909483, 46.193974, -10.630376), (8.110583, 49.03926, -5.4193187), (9.011998, 49.03926, -3.7328918), (17.67767, 46.193974, -7.322331), (17.67767, 46.193974, -7.322331), (9.011998, 49.03926, -3.7328918), (9.567085, 49.03926, -1.9030117), (18.766514, 46.193974, -3.7328918), (18.766514, 46.193974, -3.7328918), (9.567085, 49.03926, -1.9030117), (9.754517, 49.03926, 0), (19.13417, 46.193974, 0), (9.754517, 49.03926, 0), (0, 50, 0), (9.567085, 49.03926, 1.9030117), (9.567085, 49.03926, 1.9030117), (0, 50, 0), (9.011998, 49.03926, 3.7328918), (9.011998, 49.03926, 3.7328918), (0, 50, 0), (8.110583, 49.03926, 5.4193187), (8.110583, 49.03926, 5.4193187), (0, 50, 0), (6.8974843, 49.03926, 6.8974843), (6.8974843, 49.03926, 6.8974843), (0, 50, 0), (5.4193187, 49.03926, 8.110583), (5.4193187, 49.03926, 8.110583), (0, 50, 0), (3.7328918, 49.03926, 9.011998), (3.7328918, 49.03926, 9.011998), (0, 50, 0), (1.9030117, 49.03926, 9.567085), (1.9030117, 49.03926, 9.567085), (0, 50, 0), (5.9729185e-16, 49.03926, 9.754517), (5.9729185e-16, 49.03926, 9.754517), (0, 50, 0), (-1.9030117, 49.03926, 9.567085), (-1.9030117, 49.03926, 9.567085), (0, 50, 0), (-3.7328918, 49.03926, 9.011998), (-3.7328918, 49.03926, 9.011998), (0, 50, 0), (-5.4193187, 49.03926, 8.110583), (-5.4193187, 49.03926, 8.110583), (0, 50, 0), (-6.8974843, 49.03926, 6.8974843), (-6.8974843, 49.03926, 6.8974843), (0, 50, 0), (-8.110583, 49.03926, 5.4193187), (-8.110583, 49.03926, 5.4193187), (0, 50, 0), (-9.011998, 49.03926, 3.7328918), (-9.011998, 49.03926, 3.7328918), (0, 50, 0), (-9.567085, 49.03926, 1.9030117), (-9.567085, 49.03926, 1.9030117), (0, 50, 0), (-9.754517, 49.03926, 1.1945837e-15), (-9.754517, 49.03926, 1.1945837e-15), (0, 50, 0), (-9.567085, 49.03926, -1.9030117), (-9.567085, 49.03926, -1.9030117), (0, 50, 0), (-9.011998, 49.03926, -3.7328918), (-9.011998, 49.03926, -3.7328918), (0, 50, 0), (-8.110583, 49.03926, -5.4193187), (-8.110583, 49.03926, -5.4193187), (0, 50, 0), (-6.8974843, 49.03926, -6.8974843), (-6.8974843, 49.03926, -6.8974843), (0, 50, 0), (-5.4193187, 49.03926, -8.110583), (-5.4193187, 49.03926, -8.110583), (0, 50, 0), (-3.7328918, 49.03926, -9.011998), (-3.7328918, 49.03926, -9.011998), (0, 50, 0), (-1.9030117, 49.03926, -9.567085), (-1.9030117, 49.03926, -9.567085), (0, 50, 0), (-1.7918755e-15, 49.03926, -9.754517), (-1.7918755e-15, 49.03926, -9.754517), (0, 50, 0), (1.9030117, 49.03926, -9.567085), (1.9030117, 49.03926, -9.567085), (0, 50, 0), (3.7328918, 49.03926, -9.011998), (3.7328918, 49.03926, -9.011998), (0, 50, 0), (5.4193187, 49.03926, -8.110583), (5.4193187, 49.03926, -8.110583), (0, 50, 0), (6.8974843, 49.03926, -6.8974843), (6.8974843, 49.03926, -6.8974843), (0, 50, 0), (8.110583, 49.03926, -5.4193187), (8.110583, 49.03926, -5.4193187), (0, 50, 0), (9.011998, 49.03926, -3.7328918), (9.011998, 49.03926, -3.7328918), (0, 50, 0), (9.567085, 49.03926, -1.9030117), (9.567085, 49.03926, -1.9030117), (0, 50, 0), (9.754517, 49.03926, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(0, -50, 0), (9.754517, -49.03926, 0), (9.567085, -49.03926, 1.9030117), (9.011998, -49.03926, 3.7328918), (8.110583, -49.03926, 5.4193187), (6.8974843, -49.03926, 6.8974843), (5.4193187, -49.03926, 8.110583), (3.7328918, -49.03926, 9.011998), (1.9030117, -49.03926, 9.567085), (5.9729185e-16, -49.03926, 9.754517), (-1.9030117, -49.03926, 9.567085), (-3.7328918, -49.03926, 9.011998), (-5.4193187, -49.03926, 8.110583), (-6.8974843, -49.03926, 6.8974843), (-8.110583, -49.03926, 5.4193187), (-9.011998, -49.03926, 3.7328918), (-9.567085, -49.03926, 1.9030117), (-9.754517, -49.03926, 1.1945837e-15), (-9.567085, -49.03926, -1.9030117), (-9.011998, -49.03926, -3.7328918), (-8.110583, -49.03926, -5.4193187), (-6.8974843, -49.03926, -6.8974843), (-5.4193187, -49.03926, -8.110583), (-3.7328918, -49.03926, -9.011998), (-1.9030117, -49.03926, -9.567085), (-1.7918755e-15, -49.03926, -9.754517), (1.9030117, -49.03926, -9.567085), (3.7328918, -49.03926, -9.011998), (5.4193187, -49.03926, -8.110583), (6.8974843, -49.03926, -6.8974843), (8.110583, -49.03926, -5.4193187), (9.011998, -49.03926, -3.7328918), (9.567085, -49.03926, -1.9030117), (19.13417, -46.193974, 0), (18.766514, -46.193974, 3.7328918), (17.67767, -46.193974, 7.322331), (15.909483, -46.193974, 10.630376), (13.529902, -46.193974, 13.529902), (10.630376, -46.193974, 15.909483), (7.322331, -46.193974, 17.67767), (3.7328918, -46.193974, 18.766514), (1.1716302e-15, -46.193974, 19.13417), (-3.7328918, -46.193974, 18.766514), (-7.322331, -46.193974, 17.67767), (-10.630376, -46.193974, 15.909483), (-13.529902, -46.193974, 13.529902), (-15.909483, -46.193974, 10.630376), (-17.67767, -46.193974, 7.322331), (-18.766514, -46.193974, 3.7328918), (-19.13417, -46.193974, 2.3432603e-15), (-18.766514, -46.193974, -3.7328918), (-17.67767, -46.193974, -7.322331), (-15.909483, -46.193974, -10.630376), (-13.529902, -46.193974, -13.529902), (-10.630376, -46.193974, -15.909483), (-7.322331, -46.193974, -17.67767), (-3.7328918, -46.193974, -18.766514), (-3.5148903e-15, -46.193974, -19.13417), (3.7328918, -46.193974, -18.766514), (7.322331, -46.193974, -17.67767), (10.630376, -46.193974, -15.909483), (13.529902, -46.193974, -13.529902), (15.909483, -46.193974, -10.630376), (17.67767, -46.193974, -7.322331), (18.766514, -46.193974, -3.7328918), (27.778513, -41.57348, 0), (27.244755, -41.57348, 5.4193187), (25.664, -41.57348, 10.630376), (23.096987, -41.57348, 15.432914), (19.642374, -41.57348, 19.642374), (15.432914, -41.57348, 23.096987), (10.630376, -41.57348, 25.664), (5.4193187, -41.57348, 27.244755), (1.7009433e-15, -41.57348, 27.778513), (-5.4193187, -41.57348, 27.244755), (-10.630376, -41.57348, 25.664), (-15.432914, -41.57348, 23.096987), (-19.642374, -41.57348, 19.642374), (-23.096987, -41.57348, 15.432914), (-25.664, -41.57348, 10.630376), (-27.244755, -41.57348, 5.4193187), (-27.778513, -41.57348, 3.4018865e-15), (-27.244755, -41.57348, -5.4193187), (-25.664, -41.57348, -10.630376), (-23.096987, -41.57348, -15.432914), (-19.642374, -41.57348, -19.642374), (-15.432914, -41.57348, -23.096987), (-10.630376, -41.57348, -25.664), (-5.4193187, -41.57348, -27.244755), (-5.1028297e-15, -41.57348, -27.778513), (5.4193187, -41.57348, -27.244755), (10.630376, -41.57348, -25.664), (15.432914, -41.57348, -23.096987), (19.642374, -41.57348, -19.642374), (23.096987, -41.57348, -15.432914), (25.664, -41.57348, -10.630376), (27.244755, -41.57348, -5.4193187), (35.35534, -35.35534, 0), (34.676, -35.35534, 6.8974843), (32.664074, -35.35534, 13.529902), (29.396889, -35.35534, 19.642374), (25, -35.35534, 25), (19.642374, -35.35534, 29.396889), (13.529902, -35.35534, 32.664074), (6.8974843, -35.35534, 34.676), (2.1648902e-15, -35.35534, 35.35534), (-6.8974843, -35.35534, 34.676), (-13.529902, -35.35534, 32.664074), (-19.642374, -35.35534, 29.396889), (-25, -35.35534, 25), (-29.396889, -35.35534, 19.642374), (-32.664074, -35.35534, 13.529902), (-34.676, -35.35534, 6.8974843), (-35.35534, -35.35534, 4.3297804e-15), (-34.676, -35.35534, -6.8974843), (-32.664074, -35.35534, -13.529902), (-29.396889, -35.35534, -19.642374), (-25, -35.35534, -25), (-19.642374, -35.35534, -29.396889), (-13.529902, -35.35534, -32.664074), (-6.8974843, -35.35534, -34.676), (-6.49467e-15, -35.35534, -35.35534), (6.8974843, -35.35534, -34.676), (13.529902, -35.35534, -32.664074), (19.642374, -35.35534, -29.396889), (25, -35.35534, -25), (29.396889, -35.35534, -19.642374), (32.664074, -35.35534, -13.529902), (34.676, -35.35534, -6.8974843), (41.57348, -27.778513, 0), (40.77466, -27.778513, 8.110583), (38.408886, -27.778513, 15.909483), (34.567085, -27.778513, 23.096987), (29.396889, -27.778513, 29.396889), (23.096987, -27.778513, 34.567085), (15.909483, -27.778513, 38.408886), (8.110583, -27.778513, 40.77466), (2.5456415e-15, -27.778513, 41.57348), (-8.110583, -27.778513, 40.77466), (-15.909483, -27.778513, 38.408886), (-23.096987, -27.778513, 34.567085), (-29.396889, -27.778513, 29.396889), (-34.567085, -27.778513, 23.096987), (-38.408886, -27.778513, 15.909483), (-40.77466, -27.778513, 8.110583), (-41.57348, -27.778513, 5.091283e-15), (-40.77466, -27.778513, -8.110583), (-38.408886, -27.778513, -15.909483), (-34.567085, -27.778513, -23.096987), (-29.396889, -27.778513, -29.396889), (-23.096987, -27.778513, -34.567085), (-15.909483, -27.778513, -38.408886), (-8.110583, -27.778513, -40.77466), (-7.6369244e-15, -27.778513, -41.57348), (8.110583, -27.778513, -40.77466), (15.909483, -27.778513, -38.408886), (23.096987, -27.778513, -34.567085), (29.396889, -27.778513, -29.396889), (34.567085, -27.778513, -23.096987), (38.408886, -27.778513, -15.909483), (40.77466, -27.778513, -8.110583), (46.193974, -19.13417, 0), (45.306374, -19.13417, 9.011998), (42.67767, -19.13417, 17.67767), (38.408886, -19.13417, 25.664), (32.664074, -19.13417, 32.664074), (25.664, -19.13417, 38.408886), (17.67767, -19.13417, 42.67767), (9.011998, -19.13417, 45.306374), (2.8285653e-15, -19.13417, 46.193974), (-9.011998, -19.13417, 45.306374), (-17.67767, -19.13417, 42.67767), (-25.664, -19.13417, 38.408886), (-32.664074, -19.13417, 32.664074), (-38.408886, -19.13417, 25.664), (-42.67767, -19.13417, 17.67767), (-45.306374, -19.13417, 9.011998), (-46.193974, -19.13417, 5.6571306e-15), (-45.306374, -19.13417, -9.011998), (-42.67767, -19.13417, -17.67767), (-38.408886, -19.13417, -25.664), (-32.664074, -19.13417, -32.664074), (-25.664, -19.13417, -38.408886), (-17.67767, -19.13417, -42.67767), (-9.011998, -19.13417, -45.306374), (-8.4856955e-15, -19.13417, -46.193974), (9.011998, -19.13417, -45.306374), (17.67767, -19.13417, -42.67767), (25.664, -19.13417, -38.408886), (32.664074, -19.13417, -32.664074), (38.408886, -19.13417, -25.664), (42.67767, -19.13417, -17.67767), (45.306374, -19.13417, -9.011998), (49.03926, -9.754517, 0), (48.09699, -9.754517, 9.567085), (45.306374, -9.754517, 18.766514), (40.77466, -9.754517, 27.244755), (34.676, -9.754517, 34.676), (27.244755, -9.754517, 40.77466), (18.766514, -9.754517, 45.306374), (9.567085, -9.754517, 48.09699), (3.002789e-15, -9.754517, 49.03926), (-9.567085, -9.754517, 48.09699), (-18.766514, -9.754517, 45.306374), (-27.244755, -9.754517, 40.77466), (-34.676, -9.754517, 34.676), (-40.77466, -9.754517, 27.244755), (-45.306374, -9.754517, 18.766514), (-48.09699, -9.754517, 9.567085), (-49.03926, -9.754517, 6.005578e-15), (-48.09699, -9.754517, -9.567085), (-45.306374, -9.754517, -18.766514), (-40.77466, -9.754517, -27.244755), (-34.676, -9.754517, -34.676), (-27.244755, -9.754517, -40.77466), (-18.766514, -9.754517, -45.306374), (-9.567085, -9.754517, -48.09699), (-9.0083665e-15, -9.754517, -49.03926), (9.567085, -9.754517, -48.09699), (18.766514, -9.754517, -45.306374), (27.244755, -9.754517, -40.77466), (34.676, -9.754517, -34.676), (40.77466, -9.754517, -27.244755), (45.306374, -9.754517, -18.766514), (48.09699, -9.754517, -9.567085), (50, 0, 0), (49.03926, 0, 9.754517), (46.193974, 0, 19.13417), (41.57348, 0, 27.778513), (35.35534, 0, 35.35534), (27.778513, 0, 41.57348), (19.13417, 0, 46.193974), (9.754517, 0, 49.03926), (3.061617e-15, 0, 50), (-9.754517, 0, 49.03926), (-19.13417, 0, 46.193974), (-27.778513, 0, 41.57348), (-35.35534, 0, 35.35534), (-41.57348, 0, 27.778513), (-46.193974, 0, 19.13417), (-49.03926, 0, 9.754517), (-50, 0, 6.123234e-15), (-49.03926, 0, -9.754517), (-46.193974, 0, -19.13417), (-41.57348, 0, -27.778513), (-35.35534, 0, -35.35534), (-27.778513, 0, -41.57348), (-19.13417, 0, -46.193974), (-9.754517, 0, -49.03926), (-9.184851e-15, 0, -50), (9.754517, 0, -49.03926), (19.13417, 0, -46.193974), (27.778513, 0, -41.57348), (35.35534, 0, -35.35534), (41.57348, 0, -27.778513), (46.193974, 0, -19.13417), (49.03926, 0, -9.754517), (49.03926, 9.754517, 0), (48.09699, 9.754517, 9.567085), (45.306374, 9.754517, 18.766514), (40.77466, 9.754517, 27.244755), (34.676, 9.754517, 34.676), (27.244755, 9.754517, 40.77466), (18.766514, 9.754517, 45.306374), (9.567085, 9.754517, 48.09699), (3.002789e-15, 9.754517, 49.03926), (-9.567085, 9.754517, 48.09699), (-18.766514, 9.754517, 45.306374), (-27.244755, 9.754517, 40.77466), (-34.676, 9.754517, 34.676), (-40.77466, 9.754517, 27.244755), (-45.306374, 9.754517, 18.766514), (-48.09699, 9.754517, 9.567085), (-49.03926, 9.754517, 6.005578e-15), (-48.09699, 9.754517, -9.567085), (-45.306374, 9.754517, -18.766514), (-40.77466, 9.754517, -27.244755), (-34.676, 9.754517, -34.676), (-27.244755, 9.754517, -40.77466), (-18.766514, 9.754517, -45.306374), (-9.567085, 9.754517, -48.09699), (-9.0083665e-15, 9.754517, -49.03926), (9.567085, 9.754517, -48.09699), (18.766514, 9.754517, -45.306374), (27.244755, 9.754517, -40.77466), (34.676, 9.754517, -34.676), (40.77466, 9.754517, -27.244755), (45.306374, 9.754517, -18.766514), (48.09699, 9.754517, -9.567085), (46.193974, 19.13417, 0), (45.306374, 19.13417, 9.011998), (42.67767, 19.13417, 17.67767), (38.408886, 19.13417, 25.664), (32.664074, 19.13417, 32.664074), (25.664, 19.13417, 38.408886), (17.67767, 19.13417, 42.67767), (9.011998, 19.13417, 45.306374), (2.8285653e-15, 19.13417, 46.193974), (-9.011998, 19.13417, 45.306374), (-17.67767, 19.13417, 42.67767), (-25.664, 19.13417, 38.408886), (-32.664074, 19.13417, 32.664074), (-38.408886, 19.13417, 25.664), (-42.67767, 19.13417, 17.67767), (-45.306374, 19.13417, 9.011998), (-46.193974, 19.13417, 5.6571306e-15), (-45.306374, 19.13417, -9.011998), (-42.67767, 19.13417, -17.67767), (-38.408886, 19.13417, -25.664), (-32.664074, 19.13417, -32.664074), (-25.664, 19.13417, -38.408886), (-17.67767, 19.13417, -42.67767), (-9.011998, 19.13417, -45.306374), (-8.4856955e-15, 19.13417, -46.193974), (9.011998, 19.13417, -45.306374), (17.67767, 19.13417, -42.67767), (25.664, 19.13417, -38.408886), (32.664074, 19.13417, -32.664074), (38.408886, 19.13417, -25.664), (42.67767, 19.13417, -17.67767), (45.306374, 19.13417, -9.011998), (41.57348, 27.778513, 0), (40.77466, 27.778513, 8.110583), (38.408886, 27.778513, 15.909483), (34.567085, 27.778513, 23.096987), (29.396889, 27.778513, 29.396889), (23.096987, 27.778513, 34.567085), (15.909483, 27.778513, 38.408886), (8.110583, 27.778513, 40.77466), (2.5456415e-15, 27.778513, 41.57348), (-8.110583, 27.778513, 40.77466), (-15.909483, 27.778513, 38.408886), (-23.096987, 27.778513, 34.567085), (-29.396889, 27.778513, 29.396889), (-34.567085, 27.778513, 23.096987), (-38.408886, 27.778513, 15.909483), (-40.77466, 27.778513, 8.110583), (-41.57348, 27.778513, 5.091283e-15), (-40.77466, 27.778513, -8.110583), (-38.408886, 27.778513, -15.909483), (-34.567085, 27.778513, -23.096987), (-29.396889, 27.778513, -29.396889), (-23.096987, 27.778513, -34.567085), (-15.909483, 27.778513, -38.408886), (-8.110583, 27.778513, -40.77466), (-7.6369244e-15, 27.778513, -41.57348), (8.110583, 27.778513, -40.77466), (15.909483, 27.778513, -38.408886), (23.096987, 27.778513, -34.567085), (29.396889, 27.778513, -29.396889), (34.567085, 27.778513, -23.096987), (38.408886, 27.778513, -15.909483), (40.77466, 27.778513, -8.110583), (35.35534, 35.35534, 0), (34.676, 35.35534, 6.8974843), (32.664074, 35.35534, 13.529902), (29.396889, 35.35534, 19.642374), (25, 35.35534, 25), (19.642374, 35.35534, 29.396889), (13.529902, 35.35534, 32.664074), (6.8974843, 35.35534, 34.676), (2.1648902e-15, 35.35534, 35.35534), (-6.8974843, 35.35534, 34.676), (-13.529902, 35.35534, 32.664074), (-19.642374, 35.35534, 29.396889), (-25, 35.35534, 25), (-29.396889, 35.35534, 19.642374), (-32.664074, 35.35534, 13.529902), (-34.676, 35.35534, 6.8974843), (-35.35534, 35.35534, 4.3297804e-15), (-34.676, 35.35534, -6.8974843), (-32.664074, 35.35534, -13.529902), (-29.396889, 35.35534, -19.642374), (-25, 35.35534, -25), (-19.642374, 35.35534, -29.396889), (-13.529902, 35.35534, -32.664074), (-6.8974843, 35.35534, -34.676), (-6.49467e-15, 35.35534, -35.35534), (6.8974843, 35.35534, -34.676), (13.529902, 35.35534, -32.664074), (19.642374, 35.35534, -29.396889), (25, 35.35534, -25), (29.396889, 35.35534, -19.642374), (32.664074, 35.35534, -13.529902), (34.676, 35.35534, -6.8974843), (27.778513, 41.57348, 0), (27.244755, 41.57348, 5.4193187), (25.664, 41.57348, 10.630376), (23.096987, 41.57348, 15.432914), (19.642374, 41.57348, 19.642374), (15.432914, 41.57348, 23.096987), (10.630376, 41.57348, 25.664), (5.4193187, 41.57348, 27.244755), (1.7009433e-15, 41.57348, 27.778513), (-5.4193187, 41.57348, 27.244755), (-10.630376, 41.57348, 25.664), (-15.432914, 41.57348, 23.096987), (-19.642374, 41.57348, 19.642374), (-23.096987, 41.57348, 15.432914), (-25.664, 41.57348, 10.630376), (-27.244755, 41.57348, 5.4193187), (-27.778513, 41.57348, 3.4018865e-15), (-27.244755, 41.57348, -5.4193187), (-25.664, 41.57348, -10.630376), (-23.096987, 41.57348, -15.432914), (-19.642374, 41.57348, -19.642374), (-15.432914, 41.57348, -23.096987), (-10.630376, 41.57348, -25.664), (-5.4193187, 41.57348, -27.244755), (-5.1028297e-15, 41.57348, -27.778513), (5.4193187, 41.57348, -27.244755), (10.630376, 41.57348, -25.664), (15.432914, 41.57348, -23.096987), (19.642374, 41.57348, -19.642374), (23.096987, 41.57348, -15.432914), (25.664, 41.57348, -10.630376), (27.244755, 41.57348, -5.4193187), (19.13417, 46.193974, 0), (18.766514, 46.193974, 3.7328918), (17.67767, 46.193974, 7.322331), (15.909483, 46.193974, 10.630376), (13.529902, 46.193974, 13.529902), (10.630376, 46.193974, 15.909483), (7.322331, 46.193974, 17.67767), (3.7328918, 46.193974, 18.766514), (1.1716302e-15, 46.193974, 19.13417), (-3.7328918, 46.193974, 18.766514), (-7.322331, 46.193974, 17.67767), (-10.630376, 46.193974, 15.909483), (-13.529902, 46.193974, 13.529902), (-15.909483, 46.193974, 10.630376), (-17.67767, 46.193974, 7.322331), (-18.766514, 46.193974, 3.7328918), (-19.13417, 46.193974, 2.3432603e-15), (-18.766514, 46.193974, -3.7328918), (-17.67767, 46.193974, -7.322331), (-15.909483, 46.193974, -10.630376), (-13.529902, 46.193974, -13.529902), (-10.630376, 46.193974, -15.909483), (-7.322331, 46.193974, -17.67767), (-3.7328918, 46.193974, -18.766514), (-3.5148903e-15, 46.193974, -19.13417), (3.7328918, 46.193974, -18.766514), (7.322331, 46.193974, -17.67767), (10.630376, 46.193974, -15.909483), (13.529902, 46.193974, -13.529902), (15.909483, 46.193974, -10.630376), (17.67767, 46.193974, -7.322331), (18.766514, 46.193974, -3.7328918), (9.754517, 49.03926, 0), (9.567085, 49.03926, 1.9030117), (9.011998, 49.03926, 3.7328918), (8.110583, 49.03926, 5.4193187), (6.8974843, 49.03926, 6.8974843), (5.4193187, 49.03926, 8.110583), (3.7328918, 49.03926, 9.011998), (1.9030117, 49.03926, 9.567085), (5.9729185e-16, 49.03926, 9.754517), (-1.9030117, 49.03926, 9.567085), (-3.7328918, 49.03926, 9.011998), (-5.4193187, 49.03926, 8.110583), (-6.8974843, 49.03926, 6.8974843), (-8.110583, 49.03926, 5.4193187), (-9.011998, 49.03926, 3.7328918), (-9.567085, 49.03926, 1.9030117), (-9.754517, 49.03926, 1.1945837e-15), (-9.567085, 49.03926, -1.9030117), (-9.011998, 49.03926, -3.7328918), (-8.110583, 49.03926, -5.4193187), (-6.8974843, 49.03926, -6.8974843), (-5.4193187, 49.03926, -8.110583), (-3.7328918, 49.03926, -9.011998), (-1.9030117, 49.03926, -9.567085), (-1.7918755e-15, 49.03926, -9.754517), (1.9030117, 49.03926, -9.567085), (3.7328918, 49.03926, -9.011998), (5.4193187, 49.03926, -8.110583), (6.8974843, 49.03926, -6.8974843), (8.110583, 49.03926, -5.4193187), (9.011998, 49.03926, -3.7328918), (9.567085, 49.03926, -1.9030117), (0, 50, 0)]
        texCoord2f[] primvars:st = [(1, 0), (1, 0.0625), (0.96875, 0.0625), (0.96875, 0), (0.96875, 0.0625), (0.9375, 0.0625), (0.9375, 0), (0.9375, 0.0625), (0.90625, 0.0625), (0.90625, 0), (0.90625, 0.0625), (0.875, 0.0625), (0.875, 0), (0.875, 0.0625), (0.84375, 0.0625), (0.84375, 0), (0.84375, 0.0625), (0.8125, 0.0625), (0.8125, 0), (0.8125, 0.0625), (0.78125, 0.0625), (0.78125, 0), (0.78125, 0.0625), (0.75, 0.0625), (0.75, 0), (0.75, 0.0625), (0.71875, 0.0625), (0.71875, 0), (0.71875, 0.0625), (0.6875, 0.0625), (0.6875, 0), (0.6875, 0.0625), (0.65625, 0.0625), (0.65625, 0), (0.65625, 0.0625), (0.625, 0.0625), (0.625, 0), (0.625, 0.0625), (0.59375, 0.0625), (0.59375, 0), (0.59375, 0.0625), (0.5625, 0.0625), (0.5625, 0), (0.5625, 0.0625), (0.53125, 0.0625), (0.53125, 0), (0.53125, 0.0625), (0.5, 0.0625), (0.5, 0), (0.5, 0.0625), (0.46875, 0.0625), (0.46875, 0), (0.46875, 0.0625), (0.4375, 0.0625), (0.4375, 0), (0.4375, 0.0625), (0.40625, 0.0625), (0.40625, 0), (0.40625, 0.0625), (0.375, 0.0625), (0.375, 0), (0.375, 0.0625), (0.34375, 0.0625), (0.34375, 0), (0.34375, 0.0625), (0.3125, 0.0625), (0.3125, 0), (0.3125, 0.0625), (0.28125, 0.0625), (0.28125, 0), (0.28125, 0.0625), (0.25, 0.0625), (0.25, 0), (0.25, 0.0625), (0.21875, 0.0625), (0.21875, 0), (0.21875, 0.0625), (0.1875, 0.0625), (0.1875, 0), (0.1875, 0.0625), (0.15625, 0.0625), (0.15625, 0), (0.15625, 0.0625), (0.125, 0.0625), (0.125, 0), (0.125, 0.0625), (0.09375, 0.0625), (0.09375, 0), (0.09375, 0.0625), (0.0625, 0.0625), (0.0625, 0), (0.0625, 0.0625), (0.03125, 0.0625), (0.03125, 0), (0.03125, 0.0625), (0, 0.0625), (1, 0.0625), (1, 0.125), (0.96875, 0.125), (0.96875, 0.0625), (0.96875, 0.0625), (0.96875, 0.125), (0.9375, 0.125), (0.9375, 0.0625), (0.9375, 0.0625), (0.9375, 0.125), (0.90625, 0.125), (0.90625, 0.0625), (0.90625, 0.0625), (0.90625, 0.125), (0.875, 0.125), (0.875, 0.0625), (0.875, 0.0625), (0.875, 0.125), (0.84375, 0.125), (0.84375, 0.0625), (0.84375, 0.0625), (0.84375, 0.125), (0.8125, 0.125), (0.8125, 0.0625), (0.8125, 0.0625), (0.8125, 0.125), (0.78125, 0.125), (0.78125, 0.0625), (0.78125, 0.0625), (0.78125, 0.125), (0.75, 0.125), (0.75, 0.0625), (0.75, 0.0625), (0.75, 0.125), (0.71875, 0.125), (0.71875, 0.0625), (0.71875, 0.0625), (0.71875, 0.125), (0.6875, 0.125), (0.6875, 0.0625), (0.6875, 0.0625), (0.6875, 0.125), (0.65625, 0.125), (0.65625, 0.0625), (0.65625, 0.0625), (0.65625, 0.125), (0.625, 0.125), (0.625, 0.0625), (0.625, 0.0625), (0.625, 0.125), (0.59375, 0.125), (0.59375, 0.0625), (0.59375, 0.0625), (0.59375, 0.125), (0.5625, 0.125), (0.5625, 0.0625), (0.5625, 0.0625), (0.5625, 0.125), (0.53125, 0.125), (0.53125, 0.0625), (0.53125, 0.0625), (0.53125, 0.125), (0.5, 0.125), (0.5, 0.0625), (0.5, 0.0625), (0.5, 0.125), (0.46875, 0.125), (0.46875, 0.0625), (0.46875, 0.0625), (0.46875, 0.125), (0.4375, 0.125), (0.4375, 0.0625), (0.4375, 0.0625), (0.4375, 0.125), (0.40625, 0.125), (0.40625, 0.0625), (0.40625, 0.0625), (0.40625, 0.125), (0.375, 0.125), (0.375, 0.0625), (0.375, 0.0625), (0.375, 0.125), (0.34375, 0.125), (0.34375, 0.0625), (0.34375, 0.0625), (0.34375, 0.125), (0.3125, 0.125), (0.3125, 0.0625), (0.3125, 0.0625), (0.3125, 0.125), (0.28125, 0.125), (0.28125, 0.0625), (0.28125, 0.0625), (0.28125, 0.125), (0.25, 0.125), (0.25, 0.0625), (0.25, 0.0625), (0.25, 0.125), (0.21875, 0.125), (0.21875, 0.0625), (0.21875, 0.0625), (0.21875, 0.125), (0.1875, 0.125), (0.1875, 0.0625), (0.1875, 0.0625), (0.1875, 0.125), (0.15625, 0.125), (0.15625, 0.0625), (0.15625, 0.0625), (0.15625, 0.125), (0.125, 0.125), (0.125, 0.0625), (0.125, 0.0625), (0.125, 0.125), (0.09375, 0.125), (0.09375, 0.0625), (0.09375, 0.0625), (0.09375, 0.125), (0.0625, 0.125), (0.0625, 0.0625), (0.0625, 0.0625), (0.0625, 0.125), (0.03125, 0.125), (0.03125, 0.0625), (0.03125, 0.0625), (0.03125, 0.125), (0, 0.125), (0, 0.0625), (1, 0.125), (1, 0.1875), (0.96875, 0.1875), (0.96875, 0.125), (0.96875, 0.125), (0.96875, 0.1875), (0.9375, 0.1875), (0.9375, 0.125), (0.9375, 0.125), (0.9375, 0.1875), (0.90625, 0.1875), (0.90625, 0.125), (0.90625, 0.125), (0.90625, 0.1875), (0.875, 0.1875), (0.875, 0.125), (0.875, 0.125), (0.875, 0.1875), (0.84375, 0.1875), (0.84375, 0.125), (0.84375, 0.125), (0.84375, 0.1875), (0.8125, 0.1875), (0.8125, 0.125), (0.8125, 0.125), (0.8125, 0.1875), (0.78125, 0.1875), (0.78125, 0.125), (0.78125, 0.125), (0.78125, 0.1875), (0.75, 0.1875), (0.75, 0.125), (0.75, 0.125), (0.75, 0.1875), (0.71875, 0.1875), (0.71875, 0.125), (0.71875, 0.125), (0.71875, 0.1875), (0.6875, 0.1875), (0.6875, 0.125), (0.6875, 0.125), (0.6875, 0.1875), (0.65625, 0.1875), (0.65625, 0.125), (0.65625, 0.125), (0.65625, 0.1875), (0.625, 0.1875), (0.625, 0.125), (0.625, 0.125), (0.625, 0.1875), (0.59375, 0.1875), (0.59375, 0.125), (0.59375, 0.125), (0.59375, 0.1875), (0.5625, 0.1875), (0.5625, 0.125), (0.5625, 0.125), (0.5625, 0.1875), (0.53125, 0.1875), (0.53125, 0.125), (0.53125, 0.125), (0.53125, 0.1875), (0.5, 0.1875), (0.5, 0.125), (0.5, 0.125), (0.5, 0.1875), (0.46875, 0.1875), (0.46875, 0.125), (0.46875, 0.125), (0.46875, 0.1875), (0.4375, 0.1875), (0.4375, 0.125), (0.4375, 0.125), (0.4375, 0.1875), (0.40625, 0.1875), (0.40625, 0.125), (0.40625, 0.125), (0.40625, 0.1875), (0.375, 0.1875), (0.375, 0.125), (0.375, 0.125), (0.375, 0.1875), (0.34375, 0.1875), (0.34375, 0.125), (0.34375, 0.125), (0.34375, 0.1875), (0.3125, 0.1875), (0.3125, 0.125), (0.3125, 0.125), (0.3125, 0.1875), (0.28125, 0.1875), (0.28125, 0.125), (0.28125, 0.125), (0.28125, 0.1875), (0.25, 0.1875), (0.25, 0.125), (0.25, 0.125), (0.25, 0.1875), (0.21875, 0.1875), (0.21875, 0.125), (0.21875, 0.125), (0.21875, 0.1875), (0.1875, 0.1875), (0.1875, 0.125), (0.1875, 0.125), (0.1875, 0.1875), (0.15625, 0.1875), (0.15625, 0.125), (0.15625, 0.125), (0.15625, 0.1875), (0.125, 0.1875), (0.125, 0.125), (0.125, 0.125), (0.125, 0.1875), (0.09375, 0.1875), (0.09375, 0.125), (0.09375, 0.125), (0.09375, 0.1875), (0.0625, 0.1875), (0.0625, 0.125), (0.0625, 0.125), (0.0625, 0.1875), (0.03125, 0.1875), (0.03125, 0.125), (0.03125, 0.125), (0.03125, 0.1875), (0, 0.1875), (0, 0.125), (1, 0.1875), (1, 0.25), (0.96875, 0.25), (0.96875, 0.1875), (0.96875, 0.1875), (0.96875, 0.25), (0.9375, 0.25), (0.9375, 0.1875), (0.9375, 0.1875), (0.9375, 0.25), (0.90625, 0.25), (0.90625, 0.1875), (0.90625, 0.1875), (0.90625, 0.25), (0.875, 0.25), (0.875, 0.1875), (0.875, 0.1875), (0.875, 0.25), (0.84375, 0.25), (0.84375, 0.1875), (0.84375, 0.1875), (0.84375, 0.25), (0.8125, 0.25), (0.8125, 0.1875), (0.8125, 0.1875), (0.8125, 0.25), (0.78125, 0.25), (0.78125, 0.1875), (0.78125, 0.1875), (0.78125, 0.25), (0.75, 0.25), (0.75, 0.1875), (0.75, 0.1875), (0.75, 0.25), (0.71875, 0.25), (0.71875, 0.1875), (0.71875, 0.1875), (0.71875, 0.25), (0.6875, 0.25), (0.6875, 0.1875), (0.6875, 0.1875), (0.6875, 0.25), (0.65625, 0.25), (0.65625, 0.1875), (0.65625, 0.1875), (0.65625, 0.25), (0.625, 0.25), (0.625, 0.1875), (0.625, 0.1875), (0.625, 0.25), (0.59375, 0.25), (0.59375, 0.1875), (0.59375, 0.1875), (0.59375, 0.25), (0.5625, 0.25), (0.5625, 0.1875), (0.5625, 0.1875), (0.5625, 0.25), (0.53125, 0.25), (0.53125, 0.1875), (0.53125, 0.1875), (0.53125, 0.25), (0.5, 0.25), (0.5, 0.1875), (0.5, 0.1875), (0.5, 0.25), (0.46875, 0.25), (0.46875, 0.1875), (0.46875, 0.1875), (0.46875, 0.25), (0.4375, 0.25), (0.4375, 0.1875), (0.4375, 0.1875), (0.4375, 0.25), (0.40625, 0.25), (0.40625, 0.1875), (0.40625, 0.1875), (0.40625, 0.25), (0.375, 0.25), (0.375, 0.1875), (0.375, 0.1875), (0.375, 0.25), (0.34375, 0.25), (0.34375, 0.1875), (0.34375, 0.1875), (0.34375, 0.25), (0.3125, 0.25), (0.3125, 0.1875), (0.3125, 0.1875), (0.3125, 0.25), (0.28125, 0.25), (0.28125, 0.1875), (0.28125, 0.1875), (0.28125, 0.25), (0.25, 0.25), (0.25, 0.1875), (0.25, 0.1875), (0.25, 0.25), (0.21875, 0.25), (0.21875, 0.1875), (0.21875, 0.1875), (0.21875, 0.25), (0.1875, 0.25), (0.1875, 0.1875), (0.1875, 0.1875), (0.1875, 0.25), (0.15625, 0.25), (0.15625, 0.1875), (0.15625, 0.1875), (0.15625, 0.25), (0.125, 0.25), (0.125, 0.1875), (0.125, 0.1875), (0.125, 0.25), (0.09375, 0.25), (0.09375, 0.1875), (0.09375, 0.1875), (0.09375, 0.25), (0.0625, 0.25), (0.0625, 0.1875), (0.0625, 0.1875), (0.0625, 0.25), (0.03125, 0.25), (0.03125, 0.1875), (0.03125, 0.1875), (0.03125, 0.25), (0, 0.25), (0, 0.1875), (1, 0.25), (1, 0.3125), (0.96875, 0.3125), (0.96875, 0.25), (0.96875, 0.25), (0.96875, 0.3125), (0.9375, 0.3125), (0.9375, 0.25), (0.9375, 0.25), (0.9375, 0.3125), (0.90625, 0.3125), (0.90625, 0.25), (0.90625, 0.25), (0.90625, 0.3125), (0.875, 0.3125), (0.875, 0.25), (0.875, 0.25), (0.875, 0.3125), (0.84375, 0.3125), (0.84375, 0.25), (0.84375, 0.25), (0.84375, 0.3125), (0.8125, 0.3125), (0.8125, 0.25), (0.8125, 0.25), (0.8125, 0.3125), (0.78125, 0.3125), (0.78125, 0.25), (0.78125, 0.25), (0.78125, 0.3125), (0.75, 0.3125), (0.75, 0.25), (0.75, 0.25), (0.75, 0.3125), (0.71875, 0.3125), (0.71875, 0.25), (0.71875, 0.25), (0.71875, 0.3125), (0.6875, 0.3125), (0.6875, 0.25), (0.6875, 0.25), (0.6875, 0.3125), (0.65625, 0.3125), (0.65625, 0.25), (0.65625, 0.25), (0.65625, 0.3125), (0.625, 0.3125), (0.625, 0.25), (0.625, 0.25), (0.625, 0.3125), (0.59375, 0.3125), (0.59375, 0.25), (0.59375, 0.25), (0.59375, 0.3125), (0.5625, 0.3125), (0.5625, 0.25), (0.5625, 0.25), (0.5625, 0.3125), (0.53125, 0.3125), (0.53125, 0.25), (0.53125, 0.25), (0.53125, 0.3125), (0.5, 0.3125), (0.5, 0.25), (0.5, 0.25), (0.5, 0.3125), (0.46875, 0.3125), (0.46875, 0.25), (0.46875, 0.25), (0.46875, 0.3125), (0.4375, 0.3125), (0.4375, 0.25), (0.4375, 0.25), (0.4375, 0.3125), (0.40625, 0.3125), (0.40625, 0.25), (0.40625, 0.25), (0.40625, 0.3125), (0.375, 0.3125), (0.375, 0.25), (0.375, 0.25), (0.375, 0.3125), (0.34375, 0.3125), (0.34375, 0.25), (0.34375, 0.25), (0.34375, 0.3125), (0.3125, 0.3125), (0.3125, 0.25), (0.3125, 0.25), (0.3125, 0.3125), (0.28125, 0.3125), (0.28125, 0.25), (0.28125, 0.25), (0.28125, 0.3125), (0.25, 0.3125), (0.25, 0.25), (0.25, 0.25), (0.25, 0.3125), (0.21875, 0.3125), (0.21875, 0.25), (0.21875, 0.25), (0.21875, 0.3125), (0.1875, 0.3125), (0.1875, 0.25), (0.1875, 0.25), (0.1875, 0.3125), (0.15625, 0.3125), (0.15625, 0.25), (0.15625, 0.25), (0.15625, 0.3125), (0.125, 0.3125), (0.125, 0.25), (0.125, 0.25), (0.125, 0.3125), (0.09375, 0.3125), (0.09375, 0.25), (0.09375, 0.25), (0.09375, 0.3125), (0.0625, 0.3125), (0.0625, 0.25), (0.0625, 0.25), (0.0625, 0.3125), (0.03125, 0.3125), (0.03125, 0.25), (0.03125, 0.25), (0.03125, 0.3125), (0, 0.3125), (0, 0.25), (1, 0.3125), (1, 0.375), (0.96875, 0.375), (0.96875, 0.3125), (0.96875, 0.3125), (0.96875, 0.375), (0.9375, 0.375), (0.9375, 0.3125), (0.9375, 0.3125), (0.9375, 0.375), (0.90625, 0.375), (0.90625, 0.3125), (0.90625, 0.3125), (0.90625, 0.375), (0.875, 0.375), (0.875, 0.3125), (0.875, 0.3125), (0.875, 0.375), (0.84375, 0.375), (0.84375, 0.3125), (0.84375, 0.3125), (0.84375, 0.375), (0.8125, 0.375), (0.8125, 0.3125), (0.8125, 0.3125), (0.8125, 0.375), (0.78125, 0.375), (0.78125, 0.3125), (0.78125, 0.3125), (0.78125, 0.375), (0.75, 0.375), (0.75, 0.3125), (0.75, 0.3125), (0.75, 0.375), (0.71875, 0.375), (0.71875, 0.3125), (0.71875, 0.3125), (0.71875, 0.375), (0.6875, 0.375), (0.6875, 0.3125), (0.6875, 0.3125), (0.6875, 0.375), (0.65625, 0.375), (0.65625, 0.3125), (0.65625, 0.3125), (0.65625, 0.375), (0.625, 0.375), (0.625, 0.3125), (0.625, 0.3125), (0.625, 0.375), (0.59375, 0.375), (0.59375, 0.3125), (0.59375, 0.3125), (0.59375, 0.375), (0.5625, 0.375), (0.5625, 0.3125), (0.5625, 0.3125), (0.5625, 0.375), (0.53125, 0.375), (0.53125, 0.3125), (0.53125, 0.3125), (0.53125, 0.375), (0.5, 0.375), (0.5, 0.3125), (0.5, 0.3125), (0.5, 0.375), (0.46875, 0.375), (0.46875, 0.3125), (0.46875, 0.3125), (0.46875, 0.375), (0.4375, 0.375), (0.4375, 0.3125), (0.4375, 0.3125), (0.4375, 0.375), (0.40625, 0.375), (0.40625, 0.3125), (0.40625, 0.3125), (0.40625, 0.375), (0.375, 0.375), (0.375, 0.3125), (0.375, 0.3125), (0.375, 0.375), (0.34375, 0.375), (0.34375, 0.3125), (0.34375, 0.3125), (0.34375, 0.375), (0.3125, 0.375), (0.3125, 0.3125), (0.3125, 0.3125), (0.3125, 0.375), (0.28125, 0.375), (0.28125, 0.3125), (0.28125, 0.3125), (0.28125, 0.375), (0.25, 0.375), (0.25, 0.3125), (0.25, 0.3125), (0.25, 0.375), (0.21875, 0.375), (0.21875, 0.3125), (0.21875, 0.3125), (0.21875, 0.375), (0.1875, 0.375), (0.1875, 0.3125), (0.1875, 0.3125), (0.1875, 0.375), (0.15625, 0.375), (0.15625, 0.3125), (0.15625, 0.3125), (0.15625, 0.375), (0.125, 0.375), (0.125, 0.3125), (0.125, 0.3125), (0.125, 0.375), (0.09375, 0.375), (0.09375, 0.3125), (0.09375, 0.3125), (0.09375, 0.375), (0.0625, 0.375), (0.0625, 0.3125), (0.0625, 0.3125), (0.0625, 0.375), (0.03125, 0.375), (0.03125, 0.3125), (0.03125, 0.3125), (0.03125, 0.375), (0, 0.375), (0, 0.3125), (1, 0.375), (1, 0.4375), (0.96875, 0.4375), (0.96875, 0.375), (0.96875, 0.375), (0.96875, 0.4375), (0.9375, 0.4375), (0.9375, 0.375), (0.9375, 0.375), (0.9375, 0.4375), (0.90625, 0.4375), (0.90625, 0.375), (0.90625, 0.375), (0.90625, 0.4375), (0.875, 0.4375), (0.875, 0.375), (0.875, 0.375), (0.875, 0.4375), (0.84375, 0.4375), (0.84375, 0.375), (0.84375, 0.375), (0.84375, 0.4375), (0.8125, 0.4375), (0.8125, 0.375), (0.8125, 0.375), (0.8125, 0.4375), (0.78125, 0.4375), (0.78125, 0.375), (0.78125, 0.375), (0.78125, 0.4375), (0.75, 0.4375), (0.75, 0.375), (0.75, 0.375), (0.75, 0.4375), (0.71875, 0.4375), (0.71875, 0.375), (0.71875, 0.375), (0.71875, 0.4375), (0.6875, 0.4375), (0.6875, 0.375), (0.6875, 0.375), (0.6875, 0.4375), (0.65625, 0.4375), (0.65625, 0.375), (0.65625, 0.375), (0.65625, 0.4375), (0.625, 0.4375), (0.625, 0.375), (0.625, 0.375), (0.625, 0.4375), (0.59375, 0.4375), (0.59375, 0.375), (0.59375, 0.375), (0.59375, 0.4375), (0.5625, 0.4375), (0.5625, 0.375), (0.5625, 0.375), (0.5625, 0.4375), (0.53125, 0.4375), (0.53125, 0.375), (0.53125, 0.375), (0.53125, 0.4375), (0.5, 0.4375), (0.5, 0.375), (0.5, 0.375), (0.5, 0.4375), (0.46875, 0.4375), (0.46875, 0.375), (0.46875, 0.375), (0.46875, 0.4375), (0.4375, 0.4375), (0.4375, 0.375), (0.4375, 0.375), (0.4375, 0.4375), (0.40625, 0.4375), (0.40625, 0.375), (0.40625, 0.375), (0.40625, 0.4375), (0.375, 0.4375), (0.375, 0.375), (0.375, 0.375), (0.375, 0.4375), (0.34375, 0.4375), (0.34375, 0.375), (0.34375, 0.375), (0.34375, 0.4375), (0.3125, 0.4375), (0.3125, 0.375), (0.3125, 0.375), (0.3125, 0.4375), (0.28125, 0.4375), (0.28125, 0.375), (0.28125, 0.375), (0.28125, 0.4375), (0.25, 0.4375), (0.25, 0.375), (0.25, 0.375), (0.25, 0.4375), (0.21875, 0.4375), (0.21875, 0.375), (0.21875, 0.375), (0.21875, 0.4375), (0.1875, 0.4375), (0.1875, 0.375), (0.1875, 0.375), (0.1875, 0.4375), (0.15625, 0.4375), (0.15625, 0.375), (0.15625, 0.375), (0.15625, 0.4375), (0.125, 0.4375), (0.125, 0.375), (0.125, 0.375), (0.125, 0.4375), (0.09375, 0.4375), (0.09375, 0.375), (0.09375, 0.375), (0.09375, 0.4375), (0.0625, 0.4375), (0.0625, 0.375), (0.0625, 0.375), (0.0625, 0.4375), (0.03125, 0.4375), (0.03125, 0.375), (0.03125, 0.375), (0.03125, 0.4375), (0, 0.4375), (0, 0.375), (1, 0.4375), (1, 0.5), (0.96875, 0.5), (0.96875, 0.4375), (0.96875, 0.4375), (0.96875, 0.5), (0.9375, 0.5), (0.9375, 0.4375), (0.9375, 0.4375), (0.9375, 0.5), (0.90625, 0.5), (0.90625, 0.4375), (0.90625, 0.4375), (0.90625, 0.5), (0.875, 0.5), (0.875, 0.4375), (0.875, 0.4375), (0.875, 0.5), (0.84375, 0.5), (0.84375, 0.4375), (0.84375, 0.4375), (0.84375, 0.5), (0.8125, 0.5), (0.8125, 0.4375), (0.8125, 0.4375), (0.8125, 0.5), (0.78125, 0.5), (0.78125, 0.4375), (0.78125, 0.4375), (0.78125, 0.5), (0.75, 0.5), (0.75, 0.4375), (0.75, 0.4375), (0.75, 0.5), (0.71875, 0.5), (0.71875, 0.4375), (0.71875, 0.4375), (0.71875, 0.5), (0.6875, 0.5), (0.6875, 0.4375), (0.6875, 0.4375), (0.6875, 0.5), (0.65625, 0.5), (0.65625, 0.4375), (0.65625, 0.4375), (0.65625, 0.5), (0.625, 0.5), (0.625, 0.4375), (0.625, 0.4375), (0.625, 0.5), (0.59375, 0.5), (0.59375, 0.4375), (0.59375, 0.4375), (0.59375, 0.5), (0.5625, 0.5), (0.5625, 0.4375), (0.5625, 0.4375), (0.5625, 0.5), (0.53125, 0.5), (0.53125, 0.4375), (0.53125, 0.4375), (0.53125, 0.5), (0.5, 0.5), (0.5, 0.4375), (0.5, 0.4375), (0.5, 0.5), (0.46875, 0.5), (0.46875, 0.4375), (0.46875, 0.4375), (0.46875, 0.5), (0.4375, 0.5), (0.4375, 0.4375), (0.4375, 0.4375), (0.4375, 0.5), (0.40625, 0.5), (0.40625, 0.4375), (0.40625, 0.4375), (0.40625, 0.5), (0.375, 0.5), (0.375, 0.4375), (0.375, 0.4375), (0.375, 0.5), (0.34375, 0.5), (0.34375, 0.4375), (0.34375, 0.4375), (0.34375, 0.5), (0.3125, 0.5), (0.3125, 0.4375), (0.3125, 0.4375), (0.3125, 0.5), (0.28125, 0.5), (0.28125, 0.4375), (0.28125, 0.4375), (0.28125, 0.5), (0.25, 0.5), (0.25, 0.4375), (0.25, 0.4375), (0.25, 0.5), (0.21875, 0.5), (0.21875, 0.4375), (0.21875, 0.4375), (0.21875, 0.5), (0.1875, 0.5), (0.1875, 0.4375), (0.1875, 0.4375), (0.1875, 0.5), (0.15625, 0.5), (0.15625, 0.4375), (0.15625, 0.4375), (0.15625, 0.5), (0.125, 0.5), (0.125, 0.4375), (0.125, 0.4375), (0.125, 0.5), (0.09375, 0.5), (0.09375, 0.4375), (0.09375, 0.4375), (0.09375, 0.5), (0.0625, 0.5), (0.0625, 0.4375), (0.0625, 0.4375), (0.0625, 0.5), (0.03125, 0.5), (0.03125, 0.4375), (0.03125, 0.4375), (0.03125, 0.5), (0, 0.5), (0, 0.4375), (1, 0.5), (1, 0.5625), (0.96875, 0.5625), (0.96875, 0.5), (0.96875, 0.5), (0.96875, 0.5625), (0.9375, 0.5625), (0.9375, 0.5), (0.9375, 0.5), (0.9375, 0.5625), (0.90625, 0.5625), (0.90625, 0.5), (0.90625, 0.5), (0.90625, 0.5625), (0.875, 0.5625), (0.875, 0.5), (0.875, 0.5), (0.875, 0.5625), (0.84375, 0.5625), (0.84375, 0.5), (0.84375, 0.5), (0.84375, 0.5625), (0.8125, 0.5625), (0.8125, 0.5), (0.8125, 0.5), (0.8125, 0.5625), (0.78125, 0.5625), (0.78125, 0.5), (0.78125, 0.5), (0.78125, 0.5625), (0.75, 0.5625), (0.75, 0.5), (0.75, 0.5), (0.75, 0.5625), (0.71875, 0.5625), (0.71875, 0.5), (0.71875, 0.5), (0.71875, 0.5625), (0.6875, 0.5625), (0.6875, 0.5), (0.6875, 0.5), (0.6875, 0.5625), (0.65625, 0.5625), (0.65625, 0.5), (0.65625, 0.5), (0.65625, 0.5625), (0.625, 0.5625), (0.625, 0.5), (0.625, 0.5), (0.625, 0.5625), (0.59375, 0.5625), (0.59375, 0.5), (0.59375, 0.5), (0.59375, 0.5625), (0.5625, 0.5625), (0.5625, 0.5), (0.5625, 0.5), (0.5625, 0.5625), (0.53125, 0.5625), (0.53125, 0.5), (0.53125, 0.5), (0.53125, 0.5625), (0.5, 0.5625), (0.5, 0.5), (0.5, 0.5), (0.5, 0.5625), (0.46875, 0.5625), (0.46875, 0.5), (0.46875, 0.5), (0.46875, 0.5625), (0.4375, 0.5625), (0.4375, 0.5), (0.4375, 0.5), (0.4375, 0.5625), (0.40625, 0.5625), (0.40625, 0.5), (0.40625, 0.5), (0.40625, 0.5625), (0.375, 0.5625), (0.375, 0.5), (0.375, 0.5), (0.375, 0.5625), (0.34375, 0.5625), (0.34375, 0.5), (0.34375, 0.5), (0.34375, 0.5625), (0.3125, 0.5625), (0.3125, 0.5), (0.3125, 0.5), (0.3125, 0.5625), (0.28125, 0.5625), (0.28125, 0.5), (0.28125, 0.5), (0.28125, 0.5625), (0.25, 0.5625), (0.25, 0.5), (0.25, 0.5), (0.25, 0.5625), (0.21875, 0.5625), (0.21875, 0.5), (0.21875, 0.5), (0.21875, 0.5625), (0.1875, 0.5625), (0.1875, 0.5), (0.1875, 0.5), (0.1875, 0.5625), (0.15625, 0.5625), (0.15625, 0.5), (0.15625, 0.5), (0.15625, 0.5625), (0.125, 0.5625), (0.125, 0.5), (0.125, 0.5), (0.125, 0.5625), (0.09375, 0.5625), (0.09375, 0.5), (0.09375, 0.5), (0.09375, 0.5625), (0.0625, 0.5625), (0.0625, 0.5), (0.0625, 0.5), (0.0625, 0.5625), (0.03125, 0.5625), (0.03125, 0.5), (0.03125, 0.5), (0.03125, 0.5625), (0, 0.5625), (0, 0.5), (1, 0.5625), (1, 0.625), (0.96875, 0.625), (0.96875, 0.5625), (0.96875, 0.5625), (0.96875, 0.625), (0.9375, 0.625), (0.9375, 0.5625), (0.9375, 0.5625), (0.9375, 0.625), (0.90625, 0.625), (0.90625, 0.5625), (0.90625, 0.5625), (0.90625, 0.625), (0.875, 0.625), (0.875, 0.5625), (0.875, 0.5625), (0.875, 0.625), (0.84375, 0.625), (0.84375, 0.5625), (0.84375, 0.5625), (0.84375, 0.625), (0.8125, 0.625), (0.8125, 0.5625), (0.8125, 0.5625), (0.8125, 0.625), (0.78125, 0.625), (0.78125, 0.5625), (0.78125, 0.5625), (0.78125, 0.625), (0.75, 0.625), (0.75, 0.5625), (0.75, 0.5625), (0.75, 0.625), (0.71875, 0.625), (0.71875, 0.5625), (0.71875, 0.5625), (0.71875, 0.625), (0.6875, 0.625), (0.6875, 0.5625), (0.6875, 0.5625), (0.6875, 0.625), (0.65625, 0.625), (0.65625, 0.5625), (0.65625, 0.5625), (0.65625, 0.625), (0.625, 0.625), (0.625, 0.5625), (0.625, 0.5625), (0.625, 0.625), (0.59375, 0.625), (0.59375, 0.5625), (0.59375, 0.5625), (0.59375, 0.625), (0.5625, 0.625), (0.5625, 0.5625), (0.5625, 0.5625), (0.5625, 0.625), (0.53125, 0.625), (0.53125, 0.5625), (0.53125, 0.5625), (0.53125, 0.625), (0.5, 0.625), (0.5, 0.5625), (0.5, 0.5625), (0.5, 0.625), (0.46875, 0.625), (0.46875, 0.5625), (0.46875, 0.5625), (0.46875, 0.625), (0.4375, 0.625), (0.4375, 0.5625), (0.4375, 0.5625), (0.4375, 0.625), (0.40625, 0.625), (0.40625, 0.5625), (0.40625, 0.5625), (0.40625, 0.625), (0.375, 0.625), (0.375, 0.5625), (0.375, 0.5625), (0.375, 0.625), (0.34375, 0.625), (0.34375, 0.5625), (0.34375, 0.5625), (0.34375, 0.625), (0.3125, 0.625), (0.3125, 0.5625), (0.3125, 0.5625), (0.3125, 0.625), (0.28125, 0.625), (0.28125, 0.5625), (0.28125, 0.5625), (0.28125, 0.625), (0.25, 0.625), (0.25, 0.5625), (0.25, 0.5625), (0.25, 0.625), (0.21875, 0.625), (0.21875, 0.5625), (0.21875, 0.5625), (0.21875, 0.625), (0.1875, 0.625), (0.1875, 0.5625), (0.1875, 0.5625), (0.1875, 0.625), (0.15625, 0.625), (0.15625, 0.5625), (0.15625, 0.5625), (0.15625, 0.625), (0.125, 0.625), (0.125, 0.5625), (0.125, 0.5625), (0.125, 0.625), (0.09375, 0.625), (0.09375, 0.5625), (0.09375, 0.5625), (0.09375, 0.625), (0.0625, 0.625), (0.0625, 0.5625), (0.0625, 0.5625), (0.0625, 0.625), (0.03125, 0.625), (0.03125, 0.5625), (0.03125, 0.5625), (0.03125, 0.625), (0, 0.625), (0, 0.5625), (1, 0.625), (1, 0.6875), (0.96875, 0.6875), (0.96875, 0.625), (0.96875, 0.625), (0.96875, 0.6875), (0.9375, 0.6875), (0.9375, 0.625), (0.9375, 0.625), (0.9375, 0.6875), (0.90625, 0.6875), (0.90625, 0.625), (0.90625, 0.625), (0.90625, 0.6875), (0.875, 0.6875), (0.875, 0.625), (0.875, 0.625), (0.875, 0.6875), (0.84375, 0.6875), (0.84375, 0.625), (0.84375, 0.625), (0.84375, 0.6875), (0.8125, 0.6875), (0.8125, 0.625), (0.8125, 0.625), (0.8125, 0.6875), (0.78125, 0.6875), (0.78125, 0.625), (0.78125, 0.625), (0.78125, 0.6875), (0.75, 0.6875), (0.75, 0.625), (0.75, 0.625), (0.75, 0.6875), (0.71875, 0.6875), (0.71875, 0.625), (0.71875, 0.625), (0.71875, 0.6875), (0.6875, 0.6875), (0.6875, 0.625), (0.6875, 0.625), (0.6875, 0.6875), (0.65625, 0.6875), (0.65625, 0.625), (0.65625, 0.625), (0.65625, 0.6875), (0.625, 0.6875), (0.625, 0.625), (0.625, 0.625), (0.625, 0.6875), (0.59375, 0.6875), (0.59375, 0.625), (0.59375, 0.625), (0.59375, 0.6875), (0.5625, 0.6875), (0.5625, 0.625), (0.5625, 0.625), (0.5625, 0.6875), (0.53125, 0.6875), (0.53125, 0.625), (0.53125, 0.625), (0.53125, 0.6875), (0.5, 0.6875), (0.5, 0.625), (0.5, 0.625), (0.5, 0.6875), (0.46875, 0.6875), (0.46875, 0.625), (0.46875, 0.625), (0.46875, 0.6875), (0.4375, 0.6875), (0.4375, 0.625), (0.4375, 0.625), (0.4375, 0.6875), (0.40625, 0.6875), (0.40625, 0.625), (0.40625, 0.625), (0.40625, 0.6875), (0.375, 0.6875), (0.375, 0.625), (0.375, 0.625), (0.375, 0.6875), (0.34375, 0.6875), (0.34375, 0.625), (0.34375, 0.625), (0.34375, 0.6875), (0.3125, 0.6875), (0.3125, 0.625), (0.3125, 0.625), (0.3125, 0.6875), (0.28125, 0.6875), (0.28125, 0.625), (0.28125, 0.625), (0.28125, 0.6875), (0.25, 0.6875), (0.25, 0.625), (0.25, 0.625), (0.25, 0.6875), (0.21875, 0.6875), (0.21875, 0.625), (0.21875, 0.625), (0.21875, 0.6875), (0.1875, 0.6875), (0.1875, 0.625), (0.1875, 0.625), (0.1875, 0.6875), (0.15625, 0.6875), (0.15625, 0.625), (0.15625, 0.625), (0.15625, 0.6875), (0.125, 0.6875), (0.125, 0.625), (0.125, 0.625), (0.125, 0.6875), (0.09375, 0.6875), (0.09375, 0.625), (0.09375, 0.625), (0.09375, 0.6875), (0.0625, 0.6875), (0.0625, 0.625), (0.0625, 0.625), (0.0625, 0.6875), (0.03125, 0.6875), (0.03125, 0.625), (0.03125, 0.625), (0.03125, 0.6875), (0, 0.6875), (0, 0.625), (1, 0.6875), (1, 0.75), (0.96875, 0.75), (0.96875, 0.6875), (0.96875, 0.6875), (0.96875, 0.75), (0.9375, 0.75), (0.9375, 0.6875), (0.9375, 0.6875), (0.9375, 0.75), (0.90625, 0.75), (0.90625, 0.6875), (0.90625, 0.6875), (0.90625, 0.75), (0.875, 0.75), (0.875, 0.6875), (0.875, 0.6875), (0.875, 0.75), (0.84375, 0.75), (0.84375, 0.6875), (0.84375, 0.6875), (0.84375, 0.75), (0.8125, 0.75), (0.8125, 0.6875), (0.8125, 0.6875), (0.8125, 0.75), (0.78125, 0.75), (0.78125, 0.6875), (0.78125, 0.6875), (0.78125, 0.75), (0.75, 0.75), (0.75, 0.6875), (0.75, 0.6875), (0.75, 0.75), (0.71875, 0.75), (0.71875, 0.6875), (0.71875, 0.6875), (0.71875, 0.75), (0.6875, 0.75), (0.6875, 0.6875), (0.6875, 0.6875), (0.6875, 0.75), (0.65625, 0.75), (0.65625, 0.6875), (0.65625, 0.6875), (0.65625, 0.75), (0.625, 0.75), (0.625, 0.6875), (0.625, 0.6875), (0.625, 0.75), (0.59375, 0.75), (0.59375, 0.6875), (0.59375, 0.6875), (0.59375, 0.75), (0.5625, 0.75), (0.5625, 0.6875), (0.5625, 0.6875), (0.5625, 0.75), (0.53125, 0.75), (0.53125, 0.6875), (0.53125, 0.6875), (0.53125, 0.75), (0.5, 0.75), (0.5, 0.6875), (0.5, 0.6875), (0.5, 0.75), (0.46875, 0.75), (0.46875, 0.6875), (0.46875, 0.6875), (0.46875, 0.75), (0.4375, 0.75), (0.4375, 0.6875), (0.4375, 0.6875), (0.4375, 0.75), (0.40625, 0.75), (0.40625, 0.6875), (0.40625, 0.6875), (0.40625, 0.75), (0.375, 0.75), (0.375, 0.6875), (0.375, 0.6875), (0.375, 0.75), (0.34375, 0.75), (0.34375, 0.6875), (0.34375, 0.6875), (0.34375, 0.75), (0.3125, 0.75), (0.3125, 0.6875), (0.3125, 0.6875), (0.3125, 0.75), (0.28125, 0.75), (0.28125, 0.6875), (0.28125, 0.6875), (0.28125, 0.75), (0.25, 0.75), (0.25, 0.6875), (0.25, 0.6875), (0.25, 0.75), (0.21875, 0.75), (0.21875, 0.6875), (0.21875, 0.6875), (0.21875, 0.75), (0.1875, 0.75), (0.1875, 0.6875), (0.1875, 0.6875), (0.1875, 0.75), (0.15625, 0.75), (0.15625, 0.6875), (0.15625, 0.6875), (0.15625, 0.75), (0.125, 0.75), (0.125, 0.6875), (0.125, 0.6875), (0.125, 0.75), (0.09375, 0.75), (0.09375, 0.6875), (0.09375, 0.6875), (0.09375, 0.75), (0.0625, 0.75), (0.0625, 0.6875), (0.0625, 0.6875), (0.0625, 0.75), (0.03125, 0.75), (0.03125, 0.6875), (0.03125, 0.6875), (0.03125, 0.75), (0, 0.75), (0, 0.6875), (1, 0.75), (1, 0.8125), (0.96875, 0.8125), (0.96875, 0.75), (0.96875, 0.75), (0.96875, 0.8125), (0.9375, 0.8125), (0.9375, 0.75), (0.9375, 0.75), (0.9375, 0.8125), (0.90625, 0.8125), (0.90625, 0.75), (0.90625, 0.75), (0.90625, 0.8125), (0.875, 0.8125), (0.875, 0.75), (0.875, 0.75), (0.875, 0.8125), (0.84375, 0.8125), (0.84375, 0.75), (0.84375, 0.75), (0.84375, 0.8125), (0.8125, 0.8125), (0.8125, 0.75), (0.8125, 0.75), (0.8125, 0.8125), (0.78125, 0.8125), (0.78125, 0.75), (0.78125, 0.75), (0.78125, 0.8125), (0.75, 0.8125), (0.75, 0.75), (0.75, 0.75), (0.75, 0.8125), (0.71875, 0.8125), (0.71875, 0.75), (0.71875, 0.75), (0.71875, 0.8125), (0.6875, 0.8125), (0.6875, 0.75), (0.6875, 0.75), (0.6875, 0.8125), (0.65625, 0.8125), (0.65625, 0.75), (0.65625, 0.75), (0.65625, 0.8125), (0.625, 0.8125), (0.625, 0.75), (0.625, 0.75), (0.625, 0.8125), (0.59375, 0.8125), (0.59375, 0.75), (0.59375, 0.75), (0.59375, 0.8125), (0.5625, 0.8125), (0.5625, 0.75), (0.5625, 0.75), (0.5625, 0.8125), (0.53125, 0.8125), (0.53125, 0.75), (0.53125, 0.75), (0.53125, 0.8125), (0.5, 0.8125), (0.5, 0.75), (0.5, 0.75), (0.5, 0.8125), (0.46875, 0.8125), (0.46875, 0.75), (0.46875, 0.75), (0.46875, 0.8125), (0.4375, 0.8125), (0.4375, 0.75), (0.4375, 0.75), (0.4375, 0.8125), (0.40625, 0.8125), (0.40625, 0.75), (0.40625, 0.75), (0.40625, 0.8125), (0.375, 0.8125), (0.375, 0.75), (0.375, 0.75), (0.375, 0.8125), (0.34375, 0.8125), (0.34375, 0.75), (0.34375, 0.75), (0.34375, 0.8125), (0.3125, 0.8125), (0.3125, 0.75), (0.3125, 0.75), (0.3125, 0.8125), (0.28125, 0.8125), (0.28125, 0.75), (0.28125, 0.75), (0.28125, 0.8125), (0.25, 0.8125), (0.25, 0.75), (0.25, 0.75), (0.25, 0.8125), (0.21875, 0.8125), (0.21875, 0.75), (0.21875, 0.75), (0.21875, 0.8125), (0.1875, 0.8125), (0.1875, 0.75), (0.1875, 0.75), (0.1875, 0.8125), (0.15625, 0.8125), (0.15625, 0.75), (0.15625, 0.75), (0.15625, 0.8125), (0.125, 0.8125), (0.125, 0.75), (0.125, 0.75), (0.125, 0.8125), (0.09375, 0.8125), (0.09375, 0.75), (0.09375, 0.75), (0.09375, 0.8125), (0.0625, 0.8125), (0.0625, 0.75), (0.0625, 0.75), (0.0625, 0.8125), (0.03125, 0.8125), (0.03125, 0.75), (0.03125, 0.75), (0.03125, 0.8125), (0, 0.8125), (0, 0.75), (1, 0.8125), (1, 0.875), (0.96875, 0.875), (0.96875, 0.8125), (0.96875, 0.8125), (0.96875, 0.875), (0.9375, 0.875), (0.9375, 0.8125), (0.9375, 0.8125), (0.9375, 0.875), (0.90625, 0.875), (0.90625, 0.8125), (0.90625, 0.8125), (0.90625, 0.875), (0.875, 0.875), (0.875, 0.8125), (0.875, 0.8125), (0.875, 0.875), (0.84375, 0.875), (0.84375, 0.8125), (0.84375, 0.8125), (0.84375, 0.875), (0.8125, 0.875), (0.8125, 0.8125), (0.8125, 0.8125), (0.8125, 0.875), (0.78125, 0.875), (0.78125, 0.8125), (0.78125, 0.8125), (0.78125, 0.875), (0.75, 0.875), (0.75, 0.8125), (0.75, 0.8125), (0.75, 0.875), (0.71875, 0.875), (0.71875, 0.8125), (0.71875, 0.8125), (0.71875, 0.875), (0.6875, 0.875), (0.6875, 0.8125), (0.6875, 0.8125), (0.6875, 0.875), (0.65625, 0.875), (0.65625, 0.8125), (0.65625, 0.8125), (0.65625, 0.875), (0.625, 0.875), (0.625, 0.8125), (0.625, 0.8125), (0.625, 0.875), (0.59375, 0.875), (0.59375, 0.8125), (0.59375, 0.8125), (0.59375, 0.875), (0.5625, 0.875), (0.5625, 0.8125), (0.5625, 0.8125), (0.5625, 0.875), (0.53125, 0.875), (0.53125, 0.8125), (0.53125, 0.8125), (0.53125, 0.875), (0.5, 0.875), (0.5, 0.8125), (0.5, 0.8125), (0.5, 0.875), (0.46875, 0.875), (0.46875, 0.8125), (0.46875, 0.8125), (0.46875, 0.875), (0.4375, 0.875), (0.4375, 0.8125), (0.4375, 0.8125), (0.4375, 0.875), (0.40625, 0.875), (0.40625, 0.8125), (0.40625, 0.8125), (0.40625, 0.875), (0.375, 0.875), (0.375, 0.8125), (0.375, 0.8125), (0.375, 0.875), (0.34375, 0.875), (0.34375, 0.8125), (0.34375, 0.8125), (0.34375, 0.875), (0.3125, 0.875), (0.3125, 0.8125), (0.3125, 0.8125), (0.3125, 0.875), (0.28125, 0.875), (0.28125, 0.8125), (0.28125, 0.8125), (0.28125, 0.875), (0.25, 0.875), (0.25, 0.8125), (0.25, 0.8125), (0.25, 0.875), (0.21875, 0.875), (0.21875, 0.8125), (0.21875, 0.8125), (0.21875, 0.875), (0.1875, 0.875), (0.1875, 0.8125), (0.1875, 0.8125), (0.1875, 0.875), (0.15625, 0.875), (0.15625, 0.8125), (0.15625, 0.8125), (0.15625, 0.875), (0.125, 0.875), (0.125, 0.8125), (0.125, 0.8125), (0.125, 0.875), (0.09375, 0.875), (0.09375, 0.8125), (0.09375, 0.8125), (0.09375, 0.875), (0.0625, 0.875), (0.0625, 0.8125), (0.0625, 0.8125), (0.0625, 0.875), (0.03125, 0.875), (0.03125, 0.8125), (0.03125, 0.8125), (0.03125, 0.875), (0, 0.875), (0, 0.8125), (1, 0.875), (1, 0.9375), (0.96875, 0.9375), (0.96875, 0.875), (0.96875, 0.875), (0.96875, 0.9375), (0.9375, 0.9375), (0.9375, 0.875), (0.9375, 0.875), (0.9375, 0.9375), (0.90625, 0.9375), (0.90625, 0.875), (0.90625, 0.875), (0.90625, 0.9375), (0.875, 0.9375), (0.875, 0.875), (0.875, 0.875), (0.875, 0.9375), (0.84375, 0.9375), (0.84375, 0.875), (0.84375, 0.875), (0.84375, 0.9375), (0.8125, 0.9375), (0.8125, 0.875), (0.8125, 0.875), (0.8125, 0.9375), (0.78125, 0.9375), (0.78125, 0.875), (0.78125, 0.875), (0.78125, 0.9375), (0.75, 0.9375), (0.75, 0.875), (0.75, 0.875), (0.75, 0.9375), (0.71875, 0.9375), (0.71875, 0.875), (0.71875, 0.875), (0.71875, 0.9375), (0.6875, 0.9375), (0.6875, 0.875), (0.6875, 0.875), (0.6875, 0.9375), (0.65625, 0.9375), (0.65625, 0.875), (0.65625, 0.875), (0.65625, 0.9375), (0.625, 0.9375), (0.625, 0.875), (0.625, 0.875), (0.625, 0.9375), (0.59375, 0.9375), (0.59375, 0.875), (0.59375, 0.875), (0.59375, 0.9375), (0.5625, 0.9375), (0.5625, 0.875), (0.5625, 0.875), (0.5625, 0.9375), (0.53125, 0.9375), (0.53125, 0.875), (0.53125, 0.875), (0.53125, 0.9375), (0.5, 0.9375), (0.5, 0.875), (0.5, 0.875), (0.5, 0.9375), (0.46875, 0.9375), (0.46875, 0.875), (0.46875, 0.875), (0.46875, 0.9375), (0.4375, 0.9375), (0.4375, 0.875), (0.4375, 0.875), (0.4375, 0.9375), (0.40625, 0.9375), (0.40625, 0.875), (0.40625, 0.875), (0.40625, 0.9375), (0.375, 0.9375), (0.375, 0.875), (0.375, 0.875), (0.375, 0.9375), (0.34375, 0.9375), (0.34375, 0.875), (0.34375, 0.875), (0.34375, 0.9375), (0.3125, 0.9375), (0.3125, 0.875), (0.3125, 0.875), (0.3125, 0.9375), (0.28125, 0.9375), (0.28125, 0.875), (0.28125, 0.875), (0.28125, 0.9375), (0.25, 0.9375), (0.25, 0.875), (0.25, 0.875), (0.25, 0.9375), (0.21875, 0.9375), (0.21875, 0.875), (0.21875, 0.875), (0.21875, 0.9375), (0.1875, 0.9375), (0.1875, 0.875), (0.1875, 0.875), (0.1875, 0.9375), (0.15625, 0.9375), (0.15625, 0.875), (0.15625, 0.875), (0.15625, 0.9375), (0.125, 0.9375), (0.125, 0.875), (0.125, 0.875), (0.125, 0.9375), (0.09375, 0.9375), (0.09375, 0.875), (0.09375, 0.875), (0.09375, 0.9375), (0.0625, 0.9375), (0.0625, 0.875), (0.0625, 0.875), (0.0625, 0.9375), (0.03125, 0.9375), (0.03125, 0.875), (0.03125, 0.875), (0.03125, 0.9375), (0, 0.9375), (0, 0.875), (1, 0.9375), (1, 1), (0.96875, 0.9375), (0.96875, 0.9375), (0.96875, 1), (0.9375, 0.9375), (0.9375, 0.9375), (0.9375, 1), (0.90625, 0.9375), (0.90625, 0.9375), (0.90625, 1), (0.875, 0.9375), (0.875, 0.9375), (0.875, 1), (0.84375, 0.9375), (0.84375, 0.9375), (0.84375, 1), (0.8125, 0.9375), (0.8125, 0.9375), (0.8125, 1), (0.78125, 0.9375), (0.78125, 0.9375), (0.78125, 1), (0.75, 0.9375), (0.75, 0.9375), (0.75, 1), (0.71875, 0.9375), (0.71875, 0.9375), (0.71875, 1), (0.6875, 0.9375), (0.6875, 0.9375), (0.6875, 1), (0.65625, 0.9375), (0.65625, 0.9375), (0.65625, 1), (0.625, 0.9375), (0.625, 0.9375), (0.625, 1), (0.59375, 0.9375), (0.59375, 0.9375), (0.59375, 1), (0.5625, 0.9375), (0.5625, 0.9375), (0.5625, 1), (0.53125, 0.9375), (0.53125, 0.9375), (0.53125, 1), (0.5, 0.9375), (0.5, 0.9375), (0.5, 1), (0.46875, 0.9375), (0.46875, 0.9375), (0.46875, 1), (0.4375, 0.9375), (0.4375, 0.9375), (0.4375, 1), (0.40625, 0.9375), (0.40625, 0.9375), (0.40625, 1), (0.375, 0.9375), (0.375, 0.9375), (0.375, 1), (0.34375, 0.9375), (0.34375, 0.9375), (0.34375, 1), (0.3125, 0.9375), (0.3125, 0.9375), (0.3125, 1), (0.28125, 0.9375), (0.28125, 0.9375), (0.28125, 1), (0.25, 0.9375), (0.25, 0.9375), (0.25, 1), (0.21875, 0.9375), (0.21875, 0.9375), (0.21875, 1), (0.1875, 0.9375), (0.1875, 0.9375), (0.1875, 1), (0.15625, 0.9375), (0.15625, 0.9375), (0.15625, 1), (0.125, 0.9375), (0.125, 0.9375), (0.125, 1), (0.09375, 0.9375), (0.09375, 0.9375), (0.09375, 1), (0.0625, 0.9375), (0.0625, 0.9375), (0.0625, 1), (0.03125, 0.9375), (0.03125, 0.9375), (0.03125, 1), (0, 0.9375)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (13170.923769314646, -25723.34919903763, -2.2737367544323206e-12)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "Looks" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/Looks/GlowUndersphere> (
            bindMaterialAs = "weakerThanDescendants"
        )

        def Material "CutDot" (
            customData = {
                dictionary ui = {
                    dictionary nodegraph = {
                        dictionary node = {
                            dictionary pos = {
                                double2 output = (86.95408630371094, 64.64524841308594)
                            }
                        }
                    }
                }
            }
        )
        {
            token outputs:displacement
            token outputs:mdl:displacement.connect = </World/Looks/CutDot/OmniPBRBase.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/CutDot/OmniPBRBase.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/CutDot/OmniPBRBase.outputs:out>
            token outputs:surface
            token outputs:volume
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "OmniPBRBase" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                float3 inputs:clearcoat_geometry_normal (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Normal"
                    hidden = true
                    renderType = "float3"
                )
                float2 inputs:coat_aniso_roughness (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat aniso roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = true
                    renderType = "float2"
                )
                color3f inputs:coat_color (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Tint"
                    doc = """Clearcoat is tinted and affects the underlying material

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:coat_ior (
                    customData = {
                        float default = 1.56
                        dictionary soft_range = {
                            float max = 4
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat IOR"
                    doc = """Sets the Index of refraction for the coat layer

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_roughness (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_transparency (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Transparency"
                    doc = """Adjusts the transparency of the coat. Can be turned into a fully opaque coat covering the underlying layer

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_weight (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Weight"
                    doc = """Sets the weight for coat layer

"""
                    hidden = false
                    renderType = "float"
                )
                color3f inputs:diffuse_reflection_color (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_reflection_color.connect = </World/Looks/CutDot/color_const.outputs:out>
                color3f inputs:diffuse_tint (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = """When enabled, this color value is multiplied over the final albedo color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/CutDot/perlin_noise_texture.outputs:color>
                color3f inputs:emission_color (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = """The emission color

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:emission_intensity (
                    customData = {
                        float default = 40
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = """Intensity of the emission

"""
                    hidden = false
                    renderType = "float"
                )
                bool inputs:enable_coat (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Enable Clearcoat Layer"
                    doc = """Adds a coat layer on top of the material when enabled

"""
                    hidden = false
                    renderType = "bool"
                )
                bool inputs:enable_emission (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = """Enables the emission of light from the material

"""
                    hidden = false
                    renderType = "bool"
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = """Enables the use of cutout opacity

"""
                    hidden = false
                    renderType = "bool"
                )
                float3 inputs:geometry_normal (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal"
                    hidden = true
                    renderType = "float3"
                )
                float3 inputs:geometry_normal.connect = </World/Looks/CutDot/perlin_noise_bump_texture.outputs:out>
                float inputs:geometry_opacity = 0.5 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = """Opacity value between 0 and 1, when Opacity Map is not valid

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:geometry_opacity.connect = </World/Looks/CutDot/construct_float.outputs:out>
                float inputs:geometry_opacity_threshold = 0.38 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = """If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:metalness = 0.88 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metalness"
                    doc = """Bias towards pure specular reflection

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:specular_level = 1 (
                    customData = {
                        float default = 0.5
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Specular"
                    doc = """The specular level (intensity) of the material

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:specular_level.connect = </World/Looks/CutDot/perlin_noise_texture.outputs:mono>
                float2 inputs:specular_reflection_aniso_roughness (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Aniso roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = true
                    renderType = "float2"
                )
                float inputs:specular_reflection_roughness = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:specular_reflection_roughness.connect = </World/Looks/CutDot/perlin_noise_texture.outputs:mono>
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-261.6244, -75.18126)
            }

            def Shader "color_const" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "color_const"
                color3f inputs:c = (0, 0.5, 1) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-688.3139, -38.45607)
            }

            def NodeGraph "file_texture" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:texture", "inputs:mono_source", "inputs:brightness", "inputs:contrast", "inputs:invert", "inputs:texture_space", "inputs:rotation", "inputs:translation", "inputs:scaling", "inputs:clip", "outputs:tex", "outputs:color", "outputs:mono", "outputs:r", "outputs:g", "outputs:b"]
                float inputs:brightness (
                    customData = {
                        double default = 1
                        dictionary soft_range = {
                            double max = 1
                            double min = 0
                        }
                    }
                    displayGroup = "Bitmap parameters"
                    displayName = "Brightness"
                    renderType = "float"
                )
                bool inputs:clip (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Placement"
                    displayName = "Clip"
                    renderType = "bool"
                )
                float inputs:contrast (
                    customData = {
                        double default = 1
                        dictionary soft_range = {
                            double max = 1
                            double min = 0
                        }
                    }
                    displayGroup = "Bitmap parameters"
                    displayName = "Contrast"
                    renderType = "float"
                )
                bool inputs:invert = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Bitmap parameters"
                    displayName = "Invert image"
                    renderType = "bool"
                )
                int inputs:mono_source (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Bitmap parameters"
                    displayName = "Scalar mode"
                    renderType = "mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                float inputs:rotation = 0 (
                    customData = {
                        double default = 0
                    }
                    displayGroup = "Placement"
                    displayName = "Rotation"
                    renderType = "float"
                )
                float2 inputs:scaling = (1, 1) (
                    customData = {
                        double2 default = (1, 1)
                    }
                    displayGroup = "Placement"
                    displayName = "Tiling"
                    renderType = "float2"
                )
                asset inputs:texture = @C:/Users/CBarr/p/co3/cutoutDot.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Bitmap parameters"
                    displayName = "Bitmap file"
                    renderType = "texture_2d"
                )
                int inputs:texture_space (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Placement"
                    displayName = "UV space index"
                    renderType = "int"
                )
                float2 inputs:translation (
                    customData = {
                        double2 default = (0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Offset"
                    renderType = "float2"
                )
                float outputs:b (
                    renderType = "float"
                )
                float outputs:b.connect = </World/Looks/CutDot/file_texture/z.outputs:out>
                color3f outputs:color (
                    renderType = "color"
                )
                color3f outputs:color.connect = </World/Looks/CutDot/file_texture/construct_color.outputs:out>
                float outputs:g (
                    renderType = "float"
                )
                float outputs:g.connect = </World/Looks/CutDot/file_texture/y.outputs:out>
                float outputs:mono (
                    renderType = "float"
                )
                float outputs:mono.connect = </World/Looks/CutDot/file_texture/construct_float.outputs:out>
                float outputs:r (
                    renderType = "float"
                )
                float outputs:r.connect = </World/Looks/CutDot/file_texture/x.outputs:out>
                token outputs:tex (
                    renderType = "texture_return"
                )
                token outputs:tex.connect = </World/Looks/CutDot/file_texture/file_texture.outputs:out>
                custom token ui:description = "Allows texturing using image files of various file formats"
                uniform token ui:displayGroup = "Texturing, high level"
                uniform token ui:displayName = "Bitmap texture"
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform asset ui:nodegraph:node:icon = @core_definitions.file_texture.png@
                uniform float2 ui:nodegraph:node:pos = (-1050.4918, 218.42032)
                custom int ui:order = 30

                def Shader "file_texture"
                {
                    reorder properties = ["inputs:texture", "inputs:mono_source", "inputs:brightness", "inputs:contrast", "inputs:invert", "inputs:texture_space", "inputs:rotation", "inputs:translation", "inputs:scaling", "inputs:clip"]
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/core_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "file_texture(texture_2d,::base::mono_mode,float,float,float2,float2,float,bool,int,bool)"
                    float inputs:brightness (
                        customData = {
                            double default = 1
                        }
                        displayGroup = "Bitmap parameters"
                        displayName = "Brightness"
                        renderType = "float"
                    )
                    float inputs:brightness.connect = </World/Looks/CutDot/file_texture.inputs:brightness>
                    bool inputs:clip (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Placement"
                        displayName = "Clip"
                        doc = "If set to true, texture will not repeat. Outside of the texture, color will be black and the scalar value will be 0"
                        renderType = "bool"
                    )
                    bool inputs:clip.connect = </World/Looks/CutDot/file_texture.inputs:clip>
                    float inputs:contrast (
                        customData = {
                            double default = 1
                        }
                        displayGroup = "Bitmap parameters"
                        displayName = "Contrast"
                        renderType = "float"
                    )
                    float inputs:contrast.connect = </World/Looks/CutDot/file_texture.inputs:contrast>
                    bool inputs:invert (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Bitmap parameters"
                        displayName = "Invert image"
                        doc = "Invert image"
                        renderType = "bool"
                    )
                    bool inputs:invert.connect = </World/Looks/CutDot/file_texture.inputs:invert>
                    int inputs:mono_source (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Bitmap parameters"
                        displayName = "Scalar mode"
                        doc = "Defines how the texture applies to scalar parameters"
                        renderType = "mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    int inputs:mono_source.connect = </World/Looks/CutDot/file_texture.inputs:mono_source>
                    float inputs:rotation (
                        customData = {
                            double default = 0
                        }
                        displayGroup = "Placement"
                        displayName = "Rotation"
                        doc = "Rotation angle of the texture in degrees"
                        renderType = "float"
                    )
                    float inputs:rotation.connect = </World/Looks/CutDot/file_texture.inputs:rotation>
                    float2 inputs:scaling (
                        customData = {
                            double2 default = (1, 1)
                        }
                        displayGroup = "Placement"
                        displayName = "Tiling"
                        doc = "Controls the scale of the texture on the object"
                        renderType = "float2"
                    )
                    float2 inputs:scaling.connect = </World/Looks/CutDot/file_texture.inputs:scaling>
                    asset inputs:texture (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Bitmap parameters"
                        displayName = "Bitmap file"
                        renderType = "texture_2d"
                    )
                    asset inputs:texture.connect = </World/Looks/CutDot/file_texture.inputs:texture>
                    int inputs:texture_space (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "Placement"
                        displayName = "UV space index"
                        doc = "Selects a specific UV space"
                        renderType = "int"
                    )
                    int inputs:texture_space.connect = </World/Looks/CutDot/file_texture.inputs:texture_space>
                    float2 inputs:translation (
                        customData = {
                            double2 default = (0, 0)
                        }
                        displayGroup = "Placement"
                        displayName = "Offset"
                        doc = "Controls position of the texture on the object"
                        renderType = "float2"
                    )
                    float2 inputs:translation.connect = </World/Looks/CutDot/file_texture.inputs:translation>
                    token outputs:out (
                        renderType = "texture_return"
                    )
                }

                def Shader "construct_float"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "construct_float(::base::texture_return)"
                    token inputs:a (
                        renderType = "texture_return"
                    )
                    token inputs:a.connect = </World/Looks/CutDot/file_texture/file_texture.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "construct_color"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "construct_color(::base::texture_return)"
                    token inputs:a (
                        renderType = "texture_return"
                    )
                    token inputs:a.connect = </World/Looks/CutDot/file_texture/file_texture.outputs:out>
                    color3f outputs:out (
                        renderType = "color"
                    )
                }

                def Shader "x"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "x(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CutDot/file_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "y"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "y(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CutDot/file_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "z"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "z(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CutDot/file_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }
            }

            def Shader "construct_float" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "construct_float"
                token inputs:a (
                    hidden = false
                    renderType = "texture_return"
                )
                token inputs:a.connect = </World/Looks/CutDot/file_texture.outputs:tex>
                float outputs:out (
                    renderType = "float"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-551.3148, 412.53116)
            }

            def Shader "perlin_noise_bump_texture" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/core_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "perlin_noise_bump_texture"
                bool inputs:absolute_noise (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Billowing appearance"
                    hidden = false
                    renderType = "bool"
                )
                float inputs:factor = 5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 5
                            float min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Bump strength"
                    hidden = false
                    renderType = "float"
                )
                int inputs:noise_levels (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 6
                            int min = 1
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Levels"
                    doc = """Higher amounts will add detail to the noise

"""
                    hidden = false
                    renderType = "int"
                )
                float inputs:noise_threshold_high (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Upper threshold"
                    doc = """Lowering this value will create bigger areas uniformly colored with Color 1

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:noise_threshold_low (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Lower threshold"
                    doc = """Increasing this value will create bigger areas uniformly colored with Color 2

"""
                    hidden = false
                    renderType = "float"
                )
                bool inputs:object_space (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Placement"
                    displayName = "Use object space"
                    doc = """If off, UV space will be used. If on, 3D texturing in object space will apply. For applications that do not support object space, world space will be used.

"""
                    hidden = false
                    renderType = "bool"
                )
                float3 inputs:rotation (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Rotation"
                    doc = """Rotation angle of the texture in degrees

"""
                    hidden = false
                    renderType = "float3"
                )
                float3 inputs:scaling (
                    customData = {
                        float3 default = (10, 10, 10)
                    }
                    displayGroup = "Placement"
                    displayName = "Tiling"
                    doc = """Controls the scale of the texture on the object

"""
                    hidden = false
                    renderType = "float3"
                )
                int inputs:texture_space (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Placement"
                    displayName = "UV space index"
                    doc = '''Only applies if "Use object space" is off. Selects a specific UV space.

'''
                    hidden = false
                    renderType = "int"
                )
                float3 inputs:translation (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Offset"
                    doc = """Controls position of the texture on the object

"""
                    hidden = false
                    renderType = "float3"
                )
                float3 outputs:out (
                    renderType = "float3"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-630.2301, 677.2092)
            }

            def NodeGraph "perlin_noise_texture" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:color1", "inputs:color2", "inputs:noise_levels", "inputs:absolute_noise", "inputs:noise_threshold_low", "inputs:noise_threshold_high", "inputs:object_space", "inputs:texture_space", "inputs:rotation", "inputs:translation", "inputs:scaling", "outputs:tex", "outputs:color", "outputs:mono", "outputs:r", "outputs:g", "outputs:b"]
                bool inputs:absolute_noise = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Billowing appearance"
                    renderType = "bool"
                )
                color3f inputs:color1 (
                    customData = {
                        double3 default = (1, 1, 1)
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Color 1"
                    renderType = "color"
                )
                color3f inputs:color2 (
                    customData = {
                        double3 default = (0, 0, 0)
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Color 2"
                    renderType = "color"
                )
                int inputs:noise_levels = 2 (
                    customData = {
                        int default = 3
                        dictionary range = {
                            int max = 6
                            int min = 1
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Levels"
                    renderType = "int"
                )
                float inputs:noise_threshold_high (
                    customData = {
                        double default = 1
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Upper threshold"
                    renderType = "float"
                )
                float inputs:noise_threshold_low (
                    customData = {
                        double default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Lower threshold"
                    renderType = "float"
                )
                bool inputs:object_space (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Placement"
                    displayName = "Use object space"
                    renderType = "bool"
                )
                float3 inputs:rotation (
                    customData = {
                        double3 default = (0, 0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Rotation"
                    renderType = "float3"
                )
                float3 inputs:scaling (
                    customData = {
                        double3 default = (10, 10, 10)
                    }
                    displayGroup = "Placement"
                    displayName = "Tiling"
                    renderType = "float3"
                )
                int inputs:texture_space (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Placement"
                    displayName = "UV space index"
                    renderType = "int"
                )
                float3 inputs:translation (
                    customData = {
                        double3 default = (0, 0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Offset"
                    renderType = "float3"
                )
                float outputs:b (
                    renderType = "float"
                )
                float outputs:b.connect = </World/Looks/CutDot/perlin_noise_texture/z.outputs:out>
                color3f outputs:color (
                    renderType = "color"
                )
                color3f outputs:color.connect = </World/Looks/CutDot/perlin_noise_texture/construct_color.outputs:out>
                float outputs:g (
                    renderType = "float"
                )
                float outputs:g.connect = </World/Looks/CutDot/perlin_noise_texture/y.outputs:out>
                float outputs:mono (
                    renderType = "float"
                )
                float outputs:mono.connect = </World/Looks/CutDot/perlin_noise_texture/construct_float.outputs:out>
                float outputs:r (
                    renderType = "float"
                )
                float outputs:r.connect = </World/Looks/CutDot/perlin_noise_texture/x.outputs:out>
                token outputs:tex (
                    renderType = "texture_return"
                )
                token outputs:tex.connect = </World/Looks/CutDot/perlin_noise_texture/perlin_noise_texture.outputs:out>
                custom token ui:description = "Allow texturing with a random noise pattern"
                uniform token ui:displayGroup = "Texturing, high level"
                uniform token ui:displayName = "Perlin noise texture"
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform asset ui:nodegraph:node:icon = @core_definitions.perlin_noise_texture.png@
                uniform float2 ui:nodegraph:node:pos = (-832.4212, 92.58854)
                custom int ui:order = 34

                def Shader "perlin_noise_texture"
                {
                    reorder properties = ["inputs:color1", "inputs:color2", "inputs:noise_levels", "inputs:absolute_noise", "inputs:noise_threshold_low", "inputs:noise_threshold_high", "inputs:object_space", "inputs:texture_space", "inputs:rotation", "inputs:translation", "inputs:scaling"]
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/core_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "perlin_noise_texture(color,color,bool,int,bool,float,float,float3,float3,float3,int)"
                    bool inputs:absolute_noise (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Billowing appearance"
                        renderType = "bool"
                    )
                    bool inputs:absolute_noise.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:absolute_noise>
                    color3f inputs:color1 (
                        customData = {
                            double3 default = (1, 1, 1)
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Color 1"
                        renderType = "color"
                    )
                    color3f inputs:color1.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:color1>
                    color3f inputs:color2 (
                        customData = {
                            double3 default = (0, 0, 0)
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Color 2"
                        renderType = "color"
                    )
                    color3f inputs:color2.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:color2>
                    int inputs:noise_levels (
                        customData = {
                            int default = 3
                            dictionary range = {
                                int max = 6
                                int min = 1
                            }
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Levels"
                        doc = "Higher amounts will add detail to the noise"
                        renderType = "int"
                    )
                    int inputs:noise_levels.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:noise_levels>
                    float inputs:noise_threshold_high (
                        customData = {
                            double default = 1
                            dictionary range = {
                                int max = 1
                                int min = 0
                            }
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Upper threshold"
                        doc = "Lowering this value will create bigger areas uniformly colored with Color 1"
                        renderType = "float"
                    )
                    float inputs:noise_threshold_high.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:noise_threshold_high>
                    float inputs:noise_threshold_low (
                        customData = {
                            double default = 0
                            dictionary range = {
                                int max = 1
                                int min = 0
                            }
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Lower threshold"
                        doc = "Increasing this value will create bigger areas uniformly colored with Color 2"
                        renderType = "float"
                    )
                    float inputs:noise_threshold_low.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:noise_threshold_low>
                    bool inputs:object_space (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Placement"
                        displayName = "Use object space"
                        doc = "If off, UV space will be used. If on, 3d texturing in object space will apply. For applications that do not support object space, world space will be used"
                        renderType = "bool"
                    )
                    bool inputs:object_space.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:object_space>
                    float3 inputs:rotation (
                        customData = {
                            double3 default = (0, 0, 0)
                        }
                        displayGroup = "Placement"
                        displayName = "Rotation"
                        doc = "Rotation angle of the texture in degrees"
                        renderType = "float3"
                    )
                    float3 inputs:rotation.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:rotation>
                    float3 inputs:scaling (
                        customData = {
                            double3 default = (10, 10, 10)
                        }
                        displayGroup = "Placement"
                        displayName = "Tiling"
                        doc = "Controls the scale of the texture on the object"
                        renderType = "float3"
                    )
                    float3 inputs:scaling.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:scaling>
                    int inputs:texture_space (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "Placement"
                        displayName = "UV space index"
                        doc = 'Only applies if "Use object space" is off. Selects a specific UV space'
                        renderType = "int"
                    )
                    int inputs:texture_space.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:texture_space>
                    float3 inputs:translation (
                        customData = {
                            double3 default = (0, 0, 0)
                        }
                        displayGroup = "Placement"
                        displayName = "Offset"
                        doc = "Controls position of the texture on the object"
                        renderType = "float3"
                    )
                    float3 inputs:translation.connect = </World/Looks/CutDot/perlin_noise_texture.inputs:translation>
                    token outputs:out (
                        renderType = "texture_return"
                    )
                }

                def Shader "construct_float"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "construct_float(::base::texture_return)"
                    token inputs:a (
                        renderType = "texture_return"
                    )
                    token inputs:a.connect = </World/Looks/CutDot/perlin_noise_texture/perlin_noise_texture.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "construct_color"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "construct_color(::base::texture_return)"
                    token inputs:a (
                        renderType = "texture_return"
                    )
                    token inputs:a.connect = </World/Looks/CutDot/perlin_noise_texture/perlin_noise_texture.outputs:out>
                    color3f outputs:out (
                        renderType = "color"
                    )
                }

                def Shader "x"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "x(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CutDot/perlin_noise_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "y"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "y(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CutDot/perlin_noise_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "z"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "z(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CutDot/perlin_noise_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }
            }
        }

        def Material "CustomCesium" (
            customData = {
                dictionary ui = {
                    dictionary nodegraph = {
                        dictionary node = {
                            dictionary pos = {
                                double2 output = (59.8415641784668, -45.370967864990234)
                            }
                        }
                    }
                }
            }
        )
        {
            token outputs:displacement
            token outputs:mdl:displacement.connect = </World/Looks/CustomCesium/OmniPBRBase.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/CustomCesium/OmniPBRBase.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/CustomCesium/OmniPBRBase.outputs:out>
            token outputs:surface
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "OmniPBRBase" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                float3 inputs:clearcoat_geometry_normal (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Normal"
                    hidden = true
                    renderType = "float3"
                )
                float2 inputs:coat_aniso_roughness (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat aniso roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = true
                    renderType = "float2"
                )
                color3f inputs:coat_color (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Tint"
                    doc = """Clearcoat is tinted and affects the underlying material

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:coat_ior (
                    customData = {
                        float default = 1.56
                        dictionary soft_range = {
                            float max = 4
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat IOR"
                    doc = """Sets the Index of refraction for the coat layer

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_roughness (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_transparency (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Transparency"
                    doc = """Adjusts the transparency of the coat. Can be turned into a fully opaque coat covering the underlying layer

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_weight (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Weight"
                    doc = """Sets the weight for coat layer

"""
                    hidden = false
                    renderType = "float"
                )
                color3f inputs:diffuse_reflection_color (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_reflection_color.connect = </World/Looks/CustomCesium/xyz.outputs:out>
                color3f inputs:diffuse_tint (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = """When enabled, this color value is multiplied over the final albedo color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = """The emission color

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:emission_intensity (
                    customData = {
                        float default = 40
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = """Intensity of the emission

"""
                    hidden = false
                    renderType = "float"
                )
                bool inputs:enable_coat (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Enable Clearcoat Layer"
                    doc = """Adds a coat layer on top of the material when enabled

"""
                    hidden = false
                    renderType = "bool"
                )
                bool inputs:enable_emission (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = """Enables the emission of light from the material

"""
                    hidden = false
                    renderType = "bool"
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = """Enables the use of cutout opacity

"""
                    hidden = false
                    renderType = "bool"
                )
                float3 inputs:geometry_normal (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal"
                    hidden = true
                    renderType = "float3"
                )
                float3 inputs:geometry_normal.connect = </World/Looks/CustomCesium/perlin_noise_bump_texture.outputs:out>
                float inputs:geometry_opacity (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = """Opacity value between 0 and 1, when Opacity Map is not valid

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:geometry_opacity_threshold = 0.48999998 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = """If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:metalness (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metalness"
                    doc = """Bias towards pure specular reflection

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:specular_level (
                    customData = {
                        float default = 0.5
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Specular"
                    doc = """The specular level (intensity) of the material

"""
                    hidden = false
                    renderType = "float"
                )
                float2 inputs:specular_reflection_aniso_roughness (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Aniso roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = true
                    renderType = "float2"
                )
                float inputs:specular_reflection_roughness (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                    renderType = "float"
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-205.26865, -29.528896)
            }

            def Shader "color_const" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "color_const"
                color3f inputs:c = (0, 1, 0) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-801.5618, -51.78568)
            }

            def Shader "cesium_imagery_layer_float4" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_imagery_layer_float4"
                token inputs:imagery_layer (
                    connectability = "interfaceOnly"
                    hidden = true
                    renderType = "gltf_texture_lookup_value"
                )
                int inputs:imagery_layer_index (
                    customData = {
                        int default = 0
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                    renderType = "int"
                )
                float4 outputs:out (
                    renderType = "float4"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-778.25214, 345.7228)
            }

            def Shader "xyz" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "xyz(float4)"
                float4 inputs:a (
                    customData = {
                        float4 default = (0, 0, 0, 0)
                    }
                    hidden = false
                    renderType = "float4"
                )
                float4 inputs:a.connect = </World/Looks/CustomCesium/cesium_imagery_layer_float4.outputs:out>
                float3 outputs:out (
                    renderType = "float3"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-544.2716, 276.8655)
            }

            def NodeGraph "perlin_noise_texture" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:color1", "inputs:color2", "inputs:noise_levels", "inputs:absolute_noise", "inputs:noise_threshold_low", "inputs:noise_threshold_high", "inputs:object_space", "inputs:texture_space", "inputs:rotation", "inputs:translation", "inputs:scaling", "outputs:tex", "outputs:color", "outputs:mono", "outputs:r", "outputs:g", "outputs:b"]
                bool inputs:absolute_noise = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Billowing appearance"
                    renderType = "bool"
                )
                color3f inputs:color1 (
                    customData = {
                        double3 default = (1, 1, 1)
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Color 1"
                    renderType = "color"
                )
                color3f inputs:color2 (
                    customData = {
                        double3 default = (0, 0, 0)
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Color 2"
                    renderType = "color"
                )
                int inputs:noise_levels (
                    customData = {
                        int default = 3
                        dictionary range = {
                            int max = 6
                            int min = 1
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Levels"
                    renderType = "int"
                )
                float inputs:noise_threshold_high (
                    customData = {
                        double default = 1
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Upper threshold"
                    renderType = "float"
                )
                float inputs:noise_threshold_low (
                    customData = {
                        double default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Lower threshold"
                    renderType = "float"
                )
                bool inputs:object_space (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Placement"
                    displayName = "Use object space"
                    renderType = "bool"
                )
                float3 inputs:rotation (
                    customData = {
                        double3 default = (0, 0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Rotation"
                    renderType = "float3"
                )
                float3 inputs:scaling (
                    customData = {
                        double3 default = (10, 10, 10)
                    }
                    displayGroup = "Placement"
                    displayName = "Tiling"
                    renderType = "float3"
                )
                int inputs:texture_space (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Placement"
                    displayName = "UV space index"
                    renderType = "int"
                )
                float3 inputs:translation (
                    customData = {
                        double3 default = (0, 0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Offset"
                    renderType = "float3"
                )
                float outputs:b (
                    renderType = "float"
                )
                float outputs:b.connect = </World/Looks/CustomCesium/perlin_noise_texture/z.outputs:out>
                color3f outputs:color (
                    renderType = "color"
                )
                color3f outputs:color.connect = </World/Looks/CustomCesium/perlin_noise_texture/construct_color.outputs:out>
                float outputs:g (
                    renderType = "float"
                )
                float outputs:g.connect = </World/Looks/CustomCesium/perlin_noise_texture/y.outputs:out>
                float outputs:mono (
                    renderType = "float"
                )
                float outputs:mono.connect = </World/Looks/CustomCesium/perlin_noise_texture/construct_float.outputs:out>
                float outputs:r (
                    renderType = "float"
                )
                float outputs:r.connect = </World/Looks/CustomCesium/perlin_noise_texture/x.outputs:out>
                token outputs:tex (
                    renderType = "texture_return"
                )
                token outputs:tex.connect = </World/Looks/CustomCesium/perlin_noise_texture/perlin_noise_texture.outputs:out>
                custom token ui:description = "Allow texturing with a random noise pattern"
                uniform token ui:displayGroup = "Texturing, high level"
                uniform token ui:displayName = "Perlin noise texture"
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform asset ui:nodegraph:node:icon = @core_definitions.perlin_noise_texture.png@
                uniform float2 ui:nodegraph:node:pos = (-1055.2695, 451.5737)
                custom int ui:order = 34

                def Shader "perlin_noise_texture"
                {
                    reorder properties = ["inputs:color1", "inputs:color2", "inputs:noise_levels", "inputs:absolute_noise", "inputs:noise_threshold_low", "inputs:noise_threshold_high", "inputs:object_space", "inputs:texture_space", "inputs:rotation", "inputs:translation", "inputs:scaling"]
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/core_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "perlin_noise_texture(color,color,bool,int,bool,float,float,float3,float3,float3,int)"
                    bool inputs:absolute_noise (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Billowing appearance"
                        renderType = "bool"
                    )
                    bool inputs:absolute_noise.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:absolute_noise>
                    color3f inputs:color1 (
                        customData = {
                            double3 default = (1, 1, 1)
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Color 1"
                        renderType = "color"
                    )
                    color3f inputs:color1.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:color1>
                    color3f inputs:color2 (
                        customData = {
                            double3 default = (0, 0, 0)
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Color 2"
                        renderType = "color"
                    )
                    color3f inputs:color2.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:color2>
                    int inputs:noise_levels (
                        customData = {
                            int default = 3
                            dictionary range = {
                                int max = 6
                                int min = 1
                            }
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Levels"
                        doc = "Higher amounts will add detail to the noise"
                        renderType = "int"
                    )
                    int inputs:noise_levels.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:noise_levels>
                    float inputs:noise_threshold_high (
                        customData = {
                            double default = 1
                            dictionary range = {
                                int max = 1
                                int min = 0
                            }
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Upper threshold"
                        doc = "Lowering this value will create bigger areas uniformly colored with Color 1"
                        renderType = "float"
                    )
                    float inputs:noise_threshold_high.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:noise_threshold_high>
                    float inputs:noise_threshold_low (
                        customData = {
                            double default = 0
                            dictionary range = {
                                int max = 1
                                int min = 0
                            }
                        }
                        displayGroup = "Noise parameters"
                        displayName = "Lower threshold"
                        doc = "Increasing this value will create bigger areas uniformly colored with Color 2"
                        renderType = "float"
                    )
                    float inputs:noise_threshold_low.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:noise_threshold_low>
                    bool inputs:object_space (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Placement"
                        displayName = "Use object space"
                        doc = "If off, UV space will be used. If on, 3d texturing in object space will apply. For applications that do not support object space, world space will be used"
                        renderType = "bool"
                    )
                    bool inputs:object_space.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:object_space>
                    float3 inputs:rotation (
                        customData = {
                            double3 default = (0, 0, 0)
                        }
                        displayGroup = "Placement"
                        displayName = "Rotation"
                        doc = "Rotation angle of the texture in degrees"
                        renderType = "float3"
                    )
                    float3 inputs:rotation.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:rotation>
                    float3 inputs:scaling (
                        customData = {
                            double3 default = (10, 10, 10)
                        }
                        displayGroup = "Placement"
                        displayName = "Tiling"
                        doc = "Controls the scale of the texture on the object"
                        renderType = "float3"
                    )
                    float3 inputs:scaling.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:scaling>
                    int inputs:texture_space (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "Placement"
                        displayName = "UV space index"
                        doc = 'Only applies if "Use object space" is off. Selects a specific UV space'
                        renderType = "int"
                    )
                    int inputs:texture_space.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:texture_space>
                    float3 inputs:translation (
                        customData = {
                            double3 default = (0, 0, 0)
                        }
                        displayGroup = "Placement"
                        displayName = "Offset"
                        doc = "Controls position of the texture on the object"
                        renderType = "float3"
                    )
                    float3 inputs:translation.connect = </World/Looks/CustomCesium/perlin_noise_texture.inputs:translation>
                    token outputs:out (
                        renderType = "texture_return"
                    )
                }

                def Shader "construct_float"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "construct_float(::base::texture_return)"
                    token inputs:a (
                        renderType = "texture_return"
                    )
                    token inputs:a.connect = </World/Looks/CustomCesium/perlin_noise_texture/perlin_noise_texture.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "construct_color"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "construct_color(::base::texture_return)"
                    token inputs:a (
                        renderType = "texture_return"
                    )
                    token inputs:a.connect = </World/Looks/CustomCesium/perlin_noise_texture/perlin_noise_texture.outputs:out>
                    color3f outputs:out (
                        renderType = "color"
                    )
                }

                def Shader "x"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "x(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CustomCesium/perlin_noise_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "y"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "y(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CustomCesium/perlin_noise_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "z"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "z(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CustomCesium/perlin_noise_texture/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }
            }

            def Shader "perlin_noise_bump_texture" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/core_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "perlin_noise_bump_texture"
                bool inputs:absolute_noise (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Billowing appearance"
                    hidden = false
                    renderType = "bool"
                )
                float inputs:factor = 3.61 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 5
                            float min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Bump strength"
                    hidden = false
                    renderType = "float"
                )
                int inputs:noise_levels (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 6
                            int min = 1
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Levels"
                    doc = """Higher amounts will add detail to the noise

"""
                    hidden = false
                    renderType = "int"
                )
                float inputs:noise_threshold_high (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Upper threshold"
                    doc = """Lowering this value will create bigger areas uniformly colored with Color 1

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:noise_threshold_low (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Noise parameters"
                    displayName = "Lower threshold"
                    doc = """Increasing this value will create bigger areas uniformly colored with Color 2

"""
                    hidden = false
                    renderType = "float"
                )
                bool inputs:object_space (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Placement"
                    displayName = "Use object space"
                    doc = """If off, UV space will be used. If on, 3D texturing in object space will apply. For applications that do not support object space, world space will be used.

"""
                    hidden = false
                    renderType = "bool"
                )
                float3 inputs:rotation (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Rotation"
                    doc = """Rotation angle of the texture in degrees

"""
                    hidden = false
                    renderType = "float3"
                )
                float3 inputs:scaling (
                    customData = {
                        float3 default = (10, 10, 10)
                    }
                    displayGroup = "Placement"
                    displayName = "Tiling"
                    doc = """Controls the scale of the texture on the object

"""
                    hidden = false
                    renderType = "float3"
                )
                int inputs:texture_space (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Placement"
                    displayName = "UV space index"
                    doc = '''Only applies if "Use object space" is off. Selects a specific UV space.

'''
                    hidden = false
                    renderType = "int"
                )
                float3 inputs:translation (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Placement"
                    displayName = "Offset"
                    doc = """Controls position of the texture on the object

"""
                    hidden = false
                    renderType = "float3"
                )
                float3 outputs:out (
                    renderType = "float3"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-570.64307, 526.2566)
            }
        }

        def Material "GlowUndersphere" (
            customData = {
                dictionary ui = {
                    dictionary nodegraph = {
                        dictionary node = {
                            dictionary pos = {
                                double2 output = (107.7835922241211, -94.32445526123047)
                            }
                        }
                    }
                }
            }
        )
        {
            token outputs:mdl:displacement.connect = </World/Looks/GlowUndersphere/OmniPBRBase.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/GlowUndersphere/OmniPBRBase.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/GlowUndersphere/OmniPBRBase.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "OmniPBRBase" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                float3 inputs:clearcoat_geometry_normal (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Normal"
                    hidden = true
                    renderType = "float3"
                )
                float2 inputs:coat_aniso_roughness (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat aniso roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = true
                    renderType = "float2"
                )
                color3f inputs:coat_color (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Tint"
                    doc = """Clearcoat is tinted and affects the underlying material

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:coat_ior (
                    customData = {
                        float default = 1.56
                        dictionary soft_range = {
                            float max = 4
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat IOR"
                    doc = """Sets the Index of refraction for the coat layer

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_roughness (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_transparency (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Transparency"
                    doc = """Adjusts the transparency of the coat. Can be turned into a fully opaque coat covering the underlying layer

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_weight (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Weight"
                    doc = """Sets the weight for coat layer

"""
                    hidden = false
                    renderType = "float"
                )
                color3f inputs:diffuse_reflection_color (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = """When enabled, this color value is multiplied over the final albedo color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = """The emission color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color.connect = </World/Looks/GlowUndersphere/color_const.outputs:out>
                float inputs:emission_intensity = 4000 (
                    customData = {
                        float default = 40
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = """Intensity of the emission

"""
                    hidden = false
                    renderType = "float"
                )
                bool inputs:enable_coat (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Enable Clearcoat Layer"
                    doc = """Adds a coat layer on top of the material when enabled

"""
                    hidden = false
                    renderType = "bool"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = """Enables the emission of light from the material

"""
                    hidden = false
                    renderType = "bool"
                )
                bool inputs:enable_opacity (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = """Enables the use of cutout opacity

"""
                    hidden = false
                    renderType = "bool"
                )
                float3 inputs:geometry_normal (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal"
                    hidden = true
                    renderType = "float3"
                )
                float inputs:geometry_opacity (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = """Opacity value between 0 and 1, when Opacity Map is not valid

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:geometry_opacity_threshold (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = """If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:metalness (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metalness"
                    doc = """Bias towards pure specular reflection

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:specular_level (
                    customData = {
                        float default = 0.5
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Specular"
                    doc = """The specular level (intensity) of the material

"""
                    hidden = false
                    renderType = "float"
                )
                float2 inputs:specular_reflection_aniso_roughness (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Aniso roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = true
                    renderType = "float2"
                )
                float inputs:specular_reflection_roughness (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                    renderType = "float"
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-159.12523, -162.48378)
            }

            def Shader "color_const" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "color_const"
                color3f inputs:c = (0, 0, 0.93) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-513.8778, 81.692055)
            }
        }
    }

    def Mesh "GlowSphere" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6, 0, 6, 7, 0, 7, 8, 0, 8, 9, 0, 9, 10, 0, 10, 11, 0, 11, 12, 0, 12, 13, 0, 13, 14, 0, 14, 15, 0, 15, 16, 0, 16, 17, 0, 17, 18, 0, 18, 19, 0, 19, 20, 0, 20, 21, 0, 21, 22, 0, 22, 23, 0, 23, 24, 0, 24, 25, 0, 25, 26, 0, 26, 27, 0, 27, 28, 0, 28, 29, 0, 29, 30, 0, 30, 31, 0, 31, 32, 0, 32, 1, 1, 33, 34, 2, 2, 34, 35, 3, 3, 35, 36, 4, 4, 36, 37, 5, 5, 37, 38, 6, 6, 38, 39, 7, 7, 39, 40, 8, 8, 40, 41, 9, 9, 41, 42, 10, 10, 42, 43, 11, 11, 43, 44, 12, 12, 44, 45, 13, 13, 45, 46, 14, 14, 46, 47, 15, 15, 47, 48, 16, 16, 48, 49, 17, 17, 49, 50, 18, 18, 50, 51, 19, 19, 51, 52, 20, 20, 52, 53, 21, 21, 53, 54, 22, 22, 54, 55, 23, 23, 55, 56, 24, 24, 56, 57, 25, 25, 57, 58, 26, 26, 58, 59, 27, 27, 59, 60, 28, 28, 60, 61, 29, 29, 61, 62, 30, 30, 62, 63, 31, 31, 63, 64, 32, 32, 64, 33, 1, 33, 65, 66, 34, 34, 66, 67, 35, 35, 67, 68, 36, 36, 68, 69, 37, 37, 69, 70, 38, 38, 70, 71, 39, 39, 71, 72, 40, 40, 72, 73, 41, 41, 73, 74, 42, 42, 74, 75, 43, 43, 75, 76, 44, 44, 76, 77, 45, 45, 77, 78, 46, 46, 78, 79, 47, 47, 79, 80, 48, 48, 80, 81, 49, 49, 81, 82, 50, 50, 82, 83, 51, 51, 83, 84, 52, 52, 84, 85, 53, 53, 85, 86, 54, 54, 86, 87, 55, 55, 87, 88, 56, 56, 88, 89, 57, 57, 89, 90, 58, 58, 90, 91, 59, 59, 91, 92, 60, 60, 92, 93, 61, 61, 93, 94, 62, 62, 94, 95, 63, 63, 95, 96, 64, 64, 96, 65, 33, 65, 97, 98, 66, 66, 98, 99, 67, 67, 99, 100, 68, 68, 100, 101, 69, 69, 101, 102, 70, 70, 102, 103, 71, 71, 103, 104, 72, 72, 104, 105, 73, 73, 105, 106, 74, 74, 106, 107, 75, 75, 107, 108, 76, 76, 108, 109, 77, 77, 109, 110, 78, 78, 110, 111, 79, 79, 111, 112, 80, 80, 112, 113, 81, 81, 113, 114, 82, 82, 114, 115, 83, 83, 115, 116, 84, 84, 116, 117, 85, 85, 117, 118, 86, 86, 118, 119, 87, 87, 119, 120, 88, 88, 120, 121, 89, 89, 121, 122, 90, 90, 122, 123, 91, 91, 123, 124, 92, 92, 124, 125, 93, 93, 125, 126, 94, 94, 126, 127, 95, 95, 127, 128, 96, 96, 128, 97, 65, 97, 129, 130, 98, 98, 130, 131, 99, 99, 131, 132, 100, 100, 132, 133, 101, 101, 133, 134, 102, 102, 134, 135, 103, 103, 135, 136, 104, 104, 136, 137, 105, 105, 137, 138, 106, 106, 138, 139, 107, 107, 139, 140, 108, 108, 140, 141, 109, 109, 141, 142, 110, 110, 142, 143, 111, 111, 143, 144, 112, 112, 144, 145, 113, 113, 145, 146, 114, 114, 146, 147, 115, 115, 147, 148, 116, 116, 148, 149, 117, 117, 149, 150, 118, 118, 150, 151, 119, 119, 151, 152, 120, 120, 152, 153, 121, 121, 153, 154, 122, 122, 154, 155, 123, 123, 155, 156, 124, 124, 156, 157, 125, 125, 157, 158, 126, 126, 158, 159, 127, 127, 159, 160, 128, 128, 160, 129, 97, 129, 161, 162, 130, 130, 162, 163, 131, 131, 163, 164, 132, 132, 164, 165, 133, 133, 165, 166, 134, 134, 166, 167, 135, 135, 167, 168, 136, 136, 168, 169, 137, 137, 169, 170, 138, 138, 170, 171, 139, 139, 171, 172, 140, 140, 172, 173, 141, 141, 173, 174, 142, 142, 174, 175, 143, 143, 175, 176, 144, 144, 176, 177, 145, 145, 177, 178, 146, 146, 178, 179, 147, 147, 179, 180, 148, 148, 180, 181, 149, 149, 181, 182, 150, 150, 182, 183, 151, 151, 183, 184, 152, 152, 184, 185, 153, 153, 185, 186, 154, 154, 186, 187, 155, 155, 187, 188, 156, 156, 188, 189, 157, 157, 189, 190, 158, 158, 190, 191, 159, 159, 191, 192, 160, 160, 192, 161, 129, 161, 193, 194, 162, 162, 194, 195, 163, 163, 195, 196, 164, 164, 196, 197, 165, 165, 197, 198, 166, 166, 198, 199, 167, 167, 199, 200, 168, 168, 200, 201, 169, 169, 201, 202, 170, 170, 202, 203, 171, 171, 203, 204, 172, 172, 204, 205, 173, 173, 205, 206, 174, 174, 206, 207, 175, 175, 207, 208, 176, 176, 208, 209, 177, 177, 209, 210, 178, 178, 210, 211, 179, 179, 211, 212, 180, 180, 212, 213, 181, 181, 213, 214, 182, 182, 214, 215, 183, 183, 215, 216, 184, 184, 216, 217, 185, 185, 217, 218, 186, 186, 218, 219, 187, 187, 219, 220, 188, 188, 220, 221, 189, 189, 221, 222, 190, 190, 222, 223, 191, 191, 223, 224, 192, 192, 224, 193, 161, 193, 225, 226, 194, 194, 226, 227, 195, 195, 227, 228, 196, 196, 228, 229, 197, 197, 229, 230, 198, 198, 230, 231, 199, 199, 231, 232, 200, 200, 232, 233, 201, 201, 233, 234, 202, 202, 234, 235, 203, 203, 235, 236, 204, 204, 236, 237, 205, 205, 237, 238, 206, 206, 238, 239, 207, 207, 239, 240, 208, 208, 240, 241, 209, 209, 241, 242, 210, 210, 242, 243, 211, 211, 243, 244, 212, 212, 244, 245, 213, 213, 245, 246, 214, 214, 246, 247, 215, 215, 247, 248, 216, 216, 248, 249, 217, 217, 249, 250, 218, 218, 250, 251, 219, 219, 251, 252, 220, 220, 252, 253, 221, 221, 253, 254, 222, 222, 254, 255, 223, 223, 255, 256, 224, 224, 256, 225, 193, 225, 257, 258, 226, 226, 258, 259, 227, 227, 259, 260, 228, 228, 260, 261, 229, 229, 261, 262, 230, 230, 262, 263, 231, 231, 263, 264, 232, 232, 264, 265, 233, 233, 265, 266, 234, 234, 266, 267, 235, 235, 267, 268, 236, 236, 268, 269, 237, 237, 269, 270, 238, 238, 270, 271, 239, 239, 271, 272, 240, 240, 272, 273, 241, 241, 273, 274, 242, 242, 274, 275, 243, 243, 275, 276, 244, 244, 276, 277, 245, 245, 277, 278, 246, 246, 278, 279, 247, 247, 279, 280, 248, 248, 280, 281, 249, 249, 281, 282, 250, 250, 282, 283, 251, 251, 283, 284, 252, 252, 284, 285, 253, 253, 285, 286, 254, 254, 286, 287, 255, 255, 287, 288, 256, 256, 288, 257, 225, 257, 289, 290, 258, 258, 290, 291, 259, 259, 291, 292, 260, 260, 292, 293, 261, 261, 293, 294, 262, 262, 294, 295, 263, 263, 295, 296, 264, 264, 296, 297, 265, 265, 297, 298, 266, 266, 298, 299, 267, 267, 299, 300, 268, 268, 300, 301, 269, 269, 301, 302, 270, 270, 302, 303, 271, 271, 303, 304, 272, 272, 304, 305, 273, 273, 305, 306, 274, 274, 306, 307, 275, 275, 307, 308, 276, 276, 308, 309, 277, 277, 309, 310, 278, 278, 310, 311, 279, 279, 311, 312, 280, 280, 312, 313, 281, 281, 313, 314, 282, 282, 314, 315, 283, 283, 315, 316, 284, 284, 316, 317, 285, 285, 317, 318, 286, 286, 318, 319, 287, 287, 319, 320, 288, 288, 320, 289, 257, 289, 321, 322, 290, 290, 322, 323, 291, 291, 323, 324, 292, 292, 324, 325, 293, 293, 325, 326, 294, 294, 326, 327, 295, 295, 327, 328, 296, 296, 328, 329, 297, 297, 329, 330, 298, 298, 330, 331, 299, 299, 331, 332, 300, 300, 332, 333, 301, 301, 333, 334, 302, 302, 334, 335, 303, 303, 335, 336, 304, 304, 336, 337, 305, 305, 337, 338, 306, 306, 338, 339, 307, 307, 339, 340, 308, 308, 340, 341, 309, 309, 341, 342, 310, 310, 342, 343, 311, 311, 343, 344, 312, 312, 344, 345, 313, 313, 345, 346, 314, 314, 346, 347, 315, 315, 347, 348, 316, 316, 348, 349, 317, 317, 349, 350, 318, 318, 350, 351, 319, 319, 351, 352, 320, 320, 352, 321, 289, 321, 353, 354, 322, 322, 354, 355, 323, 323, 355, 356, 324, 324, 356, 357, 325, 325, 357, 358, 326, 326, 358, 359, 327, 327, 359, 360, 328, 328, 360, 361, 329, 329, 361, 362, 330, 330, 362, 363, 331, 331, 363, 364, 332, 332, 364, 365, 333, 333, 365, 366, 334, 334, 366, 367, 335, 335, 367, 368, 336, 336, 368, 369, 337, 337, 369, 370, 338, 338, 370, 371, 339, 339, 371, 372, 340, 340, 372, 373, 341, 341, 373, 374, 342, 342, 374, 375, 343, 343, 375, 376, 344, 344, 376, 377, 345, 345, 377, 378, 346, 346, 378, 379, 347, 347, 379, 380, 348, 348, 380, 381, 349, 349, 381, 382, 350, 350, 382, 383, 351, 351, 383, 384, 352, 352, 384, 353, 321, 353, 385, 386, 354, 354, 386, 387, 355, 355, 387, 388, 356, 356, 388, 389, 357, 357, 389, 390, 358, 358, 390, 391, 359, 359, 391, 392, 360, 360, 392, 393, 361, 361, 393, 394, 362, 362, 394, 395, 363, 363, 395, 396, 364, 364, 396, 397, 365, 365, 397, 398, 366, 366, 398, 399, 367, 367, 399, 400, 368, 368, 400, 401, 369, 369, 401, 402, 370, 370, 402, 403, 371, 371, 403, 404, 372, 372, 404, 405, 373, 373, 405, 406, 374, 374, 406, 407, 375, 375, 407, 408, 376, 376, 408, 409, 377, 377, 409, 410, 378, 378, 410, 411, 379, 379, 411, 412, 380, 380, 412, 413, 381, 381, 413, 414, 382, 382, 414, 415, 383, 383, 415, 416, 384, 384, 416, 385, 353, 385, 417, 418, 386, 386, 418, 419, 387, 387, 419, 420, 388, 388, 420, 421, 389, 389, 421, 422, 390, 390, 422, 423, 391, 391, 423, 424, 392, 392, 424, 425, 393, 393, 425, 426, 394, 394, 426, 427, 395, 395, 427, 428, 396, 396, 428, 429, 397, 397, 429, 430, 398, 398, 430, 431, 399, 399, 431, 432, 400, 400, 432, 433, 401, 401, 433, 434, 402, 402, 434, 435, 403, 403, 435, 436, 404, 404, 436, 437, 405, 405, 437, 438, 406, 406, 438, 439, 407, 407, 439, 440, 408, 408, 440, 441, 409, 409, 441, 442, 410, 410, 442, 443, 411, 411, 443, 444, 412, 412, 444, 445, 413, 413, 445, 446, 414, 414, 446, 447, 415, 415, 447, 448, 416, 416, 448, 417, 385, 417, 449, 450, 418, 418, 450, 451, 419, 419, 451, 452, 420, 420, 452, 453, 421, 421, 453, 454, 422, 422, 454, 455, 423, 423, 455, 456, 424, 424, 456, 457, 425, 425, 457, 458, 426, 426, 458, 459, 427, 427, 459, 460, 428, 428, 460, 461, 429, 429, 461, 462, 430, 430, 462, 463, 431, 431, 463, 464, 432, 432, 464, 465, 433, 433, 465, 466, 434, 434, 466, 467, 435, 435, 467, 468, 436, 436, 468, 469, 437, 437, 469, 470, 438, 438, 470, 471, 439, 439, 471, 472, 440, 440, 472, 473, 441, 441, 473, 474, 442, 442, 474, 475, 443, 443, 475, 476, 444, 444, 476, 477, 445, 445, 477, 478, 446, 446, 478, 479, 447, 447, 479, 480, 448, 448, 480, 449, 417, 449, 481, 450, 450, 481, 451, 451, 481, 452, 452, 481, 453, 453, 481, 454, 454, 481, 455, 455, 481, 456, 456, 481, 457, 457, 481, 458, 458, 481, 459, 459, 481, 460, 460, 481, 461, 461, 481, 462, 462, 481, 463, 463, 481, 464, 464, 481, 465, 465, 481, 466, 466, 481, 467, 467, 481, 468, 468, 481, 469, 469, 481, 470, 470, 481, 471, 471, 481, 472, 472, 481, 473, 473, 481, 474, 474, 481, 475, 475, 481, 476, 476, 481, 477, 477, 481, 478, 478, 481, 479, 479, 481, 480, 480, 481, 449]
        rel material:binding = </World/Looks/GlowUndersphere> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, -50, 0), (9.754517, -49.03926, 0), (9.567085, -49.03926, 1.9030117), (0, -50, 0), (9.567085, -49.03926, 1.9030117), (9.011998, -49.03926, 3.7328918), (0, -50, 0), (9.011998, -49.03926, 3.7328918), (8.110583, -49.03926, 5.4193187), (0, -50, 0), (8.110583, -49.03926, 5.4193187), (6.8974843, -49.03926, 6.8974843), (0, -50, 0), (6.8974843, -49.03926, 6.8974843), (5.4193187, -49.03926, 8.110583), (0, -50, 0), (5.4193187, -49.03926, 8.110583), (3.7328918, -49.03926, 9.011998), (0, -50, 0), (3.7328918, -49.03926, 9.011998), (1.9030117, -49.03926, 9.567085), (0, -50, 0), (1.9030117, -49.03926, 9.567085), (5.9729185e-16, -49.03926, 9.754517), (0, -50, 0), (5.9729185e-16, -49.03926, 9.754517), (-1.9030117, -49.03926, 9.567085), (0, -50, 0), (-1.9030117, -49.03926, 9.567085), (-3.7328918, -49.03926, 9.011998), (0, -50, 0), (-3.7328918, -49.03926, 9.011998), (-5.4193187, -49.03926, 8.110583), (0, -50, 0), (-5.4193187, -49.03926, 8.110583), (-6.8974843, -49.03926, 6.8974843), (0, -50, 0), (-6.8974843, -49.03926, 6.8974843), (-8.110583, -49.03926, 5.4193187), (0, -50, 0), (-8.110583, -49.03926, 5.4193187), (-9.011998, -49.03926, 3.7328918), (0, -50, 0), (-9.011998, -49.03926, 3.7328918), (-9.567085, -49.03926, 1.9030117), (0, -50, 0), (-9.567085, -49.03926, 1.9030117), (-9.754517, -49.03926, 1.1945837e-15), (0, -50, 0), (-9.754517, -49.03926, 1.1945837e-15), (-9.567085, -49.03926, -1.9030117), (0, -50, 0), (-9.567085, -49.03926, -1.9030117), (-9.011998, -49.03926, -3.7328918), (0, -50, 0), (-9.011998, -49.03926, -3.7328918), (-8.110583, -49.03926, -5.4193187), (0, -50, 0), (-8.110583, -49.03926, -5.4193187), (-6.8974843, -49.03926, -6.8974843), (0, -50, 0), (-6.8974843, -49.03926, -6.8974843), (-5.4193187, -49.03926, -8.110583), (0, -50, 0), (-5.4193187, -49.03926, -8.110583), (-3.7328918, -49.03926, -9.011998), (0, -50, 0), (-3.7328918, -49.03926, -9.011998), (-1.9030117, -49.03926, -9.567085), (0, -50, 0), (-1.9030117, -49.03926, -9.567085), (-1.7918755e-15, -49.03926, -9.754517), (0, -50, 0), (-1.7918755e-15, -49.03926, -9.754517), (1.9030117, -49.03926, -9.567085), (0, -50, 0), (1.9030117, -49.03926, -9.567085), (3.7328918, -49.03926, -9.011998), (0, -50, 0), (3.7328918, -49.03926, -9.011998), (5.4193187, -49.03926, -8.110583), (0, -50, 0), (5.4193187, -49.03926, -8.110583), (6.8974843, -49.03926, -6.8974843), (0, -50, 0), (6.8974843, -49.03926, -6.8974843), (8.110583, -49.03926, -5.4193187), (0, -50, 0), (8.110583, -49.03926, -5.4193187), (9.011998, -49.03926, -3.7328918), (0, -50, 0), (9.011998, -49.03926, -3.7328918), (9.567085, -49.03926, -1.9030117), (0, -50, 0), (9.567085, -49.03926, -1.9030117), (9.754517, -49.03926, 0), (9.754517, -49.03926, 0), (19.13417, -46.193974, 0), (18.766514, -46.193974, 3.7328918), (9.567085, -49.03926, 1.9030117), (9.567085, -49.03926, 1.9030117), (18.766514, -46.193974, 3.7328918), (17.67767, -46.193974, 7.322331), (9.011998, -49.03926, 3.7328918), (9.011998, -49.03926, 3.7328918), (17.67767, -46.193974, 7.322331), (15.909483, -46.193974, 10.630376), (8.110583, -49.03926, 5.4193187), (8.110583, -49.03926, 5.4193187), (15.909483, -46.193974, 10.630376), (13.529902, -46.193974, 13.529902), (6.8974843, -49.03926, 6.8974843), (6.8974843, -49.03926, 6.8974843), (13.529902, -46.193974, 13.529902), (10.630376, -46.193974, 15.909483), (5.4193187, -49.03926, 8.110583), (5.4193187, -49.03926, 8.110583), (10.630376, -46.193974, 15.909483), (7.322331, -46.193974, 17.67767), (3.7328918, -49.03926, 9.011998), (3.7328918, -49.03926, 9.011998), (7.322331, -46.193974, 17.67767), (3.7328918, -46.193974, 18.766514), (1.9030117, -49.03926, 9.567085), (1.9030117, -49.03926, 9.567085), (3.7328918, -46.193974, 18.766514), (1.1716302e-15, -46.193974, 19.13417), (5.9729185e-16, -49.03926, 9.754517), (5.9729185e-16, -49.03926, 9.754517), (1.1716302e-15, -46.193974, 19.13417), (-3.7328918, -46.193974, 18.766514), (-1.9030117, -49.03926, 9.567085), (-1.9030117, -49.03926, 9.567085), (-3.7328918, -46.193974, 18.766514), (-7.322331, -46.193974, 17.67767), (-3.7328918, -49.03926, 9.011998), (-3.7328918, -49.03926, 9.011998), (-7.322331, -46.193974, 17.67767), (-10.630376, -46.193974, 15.909483), (-5.4193187, -49.03926, 8.110583), (-5.4193187, -49.03926, 8.110583), (-10.630376, -46.193974, 15.909483), (-13.529902, -46.193974, 13.529902), (-6.8974843, -49.03926, 6.8974843), (-6.8974843, -49.03926, 6.8974843), (-13.529902, -46.193974, 13.529902), (-15.909483, -46.193974, 10.630376), (-8.110583, -49.03926, 5.4193187), (-8.110583, -49.03926, 5.4193187), (-15.909483, -46.193974, 10.630376), (-17.67767, -46.193974, 7.322331), (-9.011998, -49.03926, 3.7328918), (-9.011998, -49.03926, 3.7328918), (-17.67767, -46.193974, 7.322331), (-18.766514, -46.193974, 3.7328918), (-9.567085, -49.03926, 1.9030117), (-9.567085, -49.03926, 1.9030117), (-18.766514, -46.193974, 3.7328918), (-19.13417, -46.193974, 2.3432603e-15), (-9.754517, -49.03926, 1.1945837e-15), (-9.754517, -49.03926, 1.1945837e-15), (-19.13417, -46.193974, 2.3432603e-15), (-18.766514, -46.193974, -3.7328918), (-9.567085, -49.03926, -1.9030117), (-9.567085, -49.03926, -1.9030117), (-18.766514, -46.193974, -3.7328918), (-17.67767, -46.193974, -7.322331), (-9.011998, -49.03926, -3.7328918), (-9.011998, -49.03926, -3.7328918), (-17.67767, -46.193974, -7.322331), (-15.909483, -46.193974, -10.630376), (-8.110583, -49.03926, -5.4193187), (-8.110583, -49.03926, -5.4193187), (-15.909483, -46.193974, -10.630376), (-13.529902, -46.193974, -13.529902), (-6.8974843, -49.03926, -6.8974843), (-6.8974843, -49.03926, -6.8974843), (-13.529902, -46.193974, -13.529902), (-10.630376, -46.193974, -15.909483), (-5.4193187, -49.03926, -8.110583), (-5.4193187, -49.03926, -8.110583), (-10.630376, -46.193974, -15.909483), (-7.322331, -46.193974, -17.67767), (-3.7328918, -49.03926, -9.011998), (-3.7328918, -49.03926, -9.011998), (-7.322331, -46.193974, -17.67767), (-3.7328918, -46.193974, -18.766514), (-1.9030117, -49.03926, -9.567085), (-1.9030117, -49.03926, -9.567085), (-3.7328918, -46.193974, -18.766514), (-3.5148903e-15, -46.193974, -19.13417), (-1.7918755e-15, -49.03926, -9.754517), (-1.7918755e-15, -49.03926, -9.754517), (-3.5148903e-15, -46.193974, -19.13417), (3.7328918, -46.193974, -18.766514), (1.9030117, -49.03926, -9.567085), (1.9030117, -49.03926, -9.567085), (3.7328918, -46.193974, -18.766514), (7.322331, -46.193974, -17.67767), (3.7328918, -49.03926, -9.011998), (3.7328918, -49.03926, -9.011998), (7.322331, -46.193974, -17.67767), (10.630376, -46.193974, -15.909483), (5.4193187, -49.03926, -8.110583), (5.4193187, -49.03926, -8.110583), (10.630376, -46.193974, -15.909483), (13.529902, -46.193974, -13.529902), (6.8974843, -49.03926, -6.8974843), (6.8974843, -49.03926, -6.8974843), (13.529902, -46.193974, -13.529902), (15.909483, -46.193974, -10.630376), (8.110583, -49.03926, -5.4193187), (8.110583, -49.03926, -5.4193187), (15.909483, -46.193974, -10.630376), (17.67767, -46.193974, -7.322331), (9.011998, -49.03926, -3.7328918), (9.011998, -49.03926, -3.7328918), (17.67767, -46.193974, -7.322331), (18.766514, -46.193974, -3.7328918), (9.567085, -49.03926, -1.9030117), (9.567085, -49.03926, -1.9030117), (18.766514, -46.193974, -3.7328918), (19.13417, -46.193974, 0), (9.754517, -49.03926, 0), (19.13417, -46.193974, 0), (27.778513, -41.57348, 0), (27.244755, -41.57348, 5.4193187), (18.766514, -46.193974, 3.7328918), (18.766514, -46.193974, 3.7328918), (27.244755, -41.57348, 5.4193187), (25.664, -41.57348, 10.630376), (17.67767, -46.193974, 7.322331), (17.67767, -46.193974, 7.322331), (25.664, -41.57348, 10.630376), (23.096987, -41.57348, 15.432914), (15.909483, -46.193974, 10.630376), (15.909483, -46.193974, 10.630376), (23.096987, -41.57348, 15.432914), (19.642374, -41.57348, 19.642374), (13.529902, -46.193974, 13.529902), (13.529902, -46.193974, 13.529902), (19.642374, -41.57348, 19.642374), (15.432914, -41.57348, 23.096987), (10.630376, -46.193974, 15.909483), (10.630376, -46.193974, 15.909483), (15.432914, -41.57348, 23.096987), (10.630376, -41.57348, 25.664), (7.322331, -46.193974, 17.67767), (7.322331, -46.193974, 17.67767), (10.630376, -41.57348, 25.664), (5.4193187, -41.57348, 27.244755), (3.7328918, -46.193974, 18.766514), (3.7328918, -46.193974, 18.766514), (5.4193187, -41.57348, 27.244755), (1.7009433e-15, -41.57348, 27.778513), (1.1716302e-15, -46.193974, 19.13417), (1.1716302e-15, -46.193974, 19.13417), (1.7009433e-15, -41.57348, 27.778513), (-5.4193187, -41.57348, 27.244755), (-3.7328918, -46.193974, 18.766514), (-3.7328918, -46.193974, 18.766514), (-5.4193187, -41.57348, 27.244755), (-10.630376, -41.57348, 25.664), (-7.322331, -46.193974, 17.67767), (-7.322331, -46.193974, 17.67767), (-10.630376, -41.57348, 25.664), (-15.432914, -41.57348, 23.096987), (-10.630376, -46.193974, 15.909483), (-10.630376, -46.193974, 15.909483), (-15.432914, -41.57348, 23.096987), (-19.642374, -41.57348, 19.642374), (-13.529902, -46.193974, 13.529902), (-13.529902, -46.193974, 13.529902), (-19.642374, -41.57348, 19.642374), (-23.096987, -41.57348, 15.432914), (-15.909483, -46.193974, 10.630376), (-15.909483, -46.193974, 10.630376), (-23.096987, -41.57348, 15.432914), (-25.664, -41.57348, 10.630376), (-17.67767, -46.193974, 7.322331), (-17.67767, -46.193974, 7.322331), (-25.664, -41.57348, 10.630376), (-27.244755, -41.57348, 5.4193187), (-18.766514, -46.193974, 3.7328918), (-18.766514, -46.193974, 3.7328918), (-27.244755, -41.57348, 5.4193187), (-27.778513, -41.57348, 3.4018865e-15), (-19.13417, -46.193974, 2.3432603e-15), (-19.13417, -46.193974, 2.3432603e-15), (-27.778513, -41.57348, 3.4018865e-15), (-27.244755, -41.57348, -5.4193187), (-18.766514, -46.193974, -3.7328918), (-18.766514, -46.193974, -3.7328918), (-27.244755, -41.57348, -5.4193187), (-25.664, -41.57348, -10.630376), (-17.67767, -46.193974, -7.322331), (-17.67767, -46.193974, -7.322331), (-25.664, -41.57348, -10.630376), (-23.096987, -41.57348, -15.432914), (-15.909483, -46.193974, -10.630376), (-15.909483, -46.193974, -10.630376), (-23.096987, -41.57348, -15.432914), (-19.642374, -41.57348, -19.642374), (-13.529902, -46.193974, -13.529902), (-13.529902, -46.193974, -13.529902), (-19.642374, -41.57348, -19.642374), (-15.432914, -41.57348, -23.096987), (-10.630376, -46.193974, -15.909483), (-10.630376, -46.193974, -15.909483), (-15.432914, -41.57348, -23.096987), (-10.630376, -41.57348, -25.664), (-7.322331, -46.193974, -17.67767), (-7.322331, -46.193974, -17.67767), (-10.630376, -41.57348, -25.664), (-5.4193187, -41.57348, -27.244755), (-3.7328918, -46.193974, -18.766514), (-3.7328918, -46.193974, -18.766514), (-5.4193187, -41.57348, -27.244755), (-5.1028297e-15, -41.57348, -27.778513), (-3.5148903e-15, -46.193974, -19.13417), (-3.5148903e-15, -46.193974, -19.13417), (-5.1028297e-15, -41.57348, -27.778513), (5.4193187, -41.57348, -27.244755), (3.7328918, -46.193974, -18.766514), (3.7328918, -46.193974, -18.766514), (5.4193187, -41.57348, -27.244755), (10.630376, -41.57348, -25.664), (7.322331, -46.193974, -17.67767), (7.322331, -46.193974, -17.67767), (10.630376, -41.57348, -25.664), (15.432914, -41.57348, -23.096987), (10.630376, -46.193974, -15.909483), (10.630376, -46.193974, -15.909483), (15.432914, -41.57348, -23.096987), (19.642374, -41.57348, -19.642374), (13.529902, -46.193974, -13.529902), (13.529902, -46.193974, -13.529902), (19.642374, -41.57348, -19.642374), (23.096987, -41.57348, -15.432914), (15.909483, -46.193974, -10.630376), (15.909483, -46.193974, -10.630376), (23.096987, -41.57348, -15.432914), (25.664, -41.57348, -10.630376), (17.67767, -46.193974, -7.322331), (17.67767, -46.193974, -7.322331), (25.664, -41.57348, -10.630376), (27.244755, -41.57348, -5.4193187), (18.766514, -46.193974, -3.7328918), (18.766514, -46.193974, -3.7328918), (27.244755, -41.57348, -5.4193187), (27.778513, -41.57348, 0), (19.13417, -46.193974, 0), (27.778513, -41.57348, 0), (35.35534, -35.35534, 0), (34.676, -35.35534, 6.8974843), (27.244755, -41.57348, 5.4193187), (27.244755, -41.57348, 5.4193187), (34.676, -35.35534, 6.8974843), (32.664074, -35.35534, 13.529902), (25.664, -41.57348, 10.630376), (25.664, -41.57348, 10.630376), (32.664074, -35.35534, 13.529902), (29.396889, -35.35534, 19.642374), (23.096987, -41.57348, 15.432914), (23.096987, -41.57348, 15.432914), (29.396889, -35.35534, 19.642374), (25, -35.35534, 25), (19.642374, -41.57348, 19.642374), (19.642374, -41.57348, 19.642374), (25, -35.35534, 25), (19.642374, -35.35534, 29.396889), (15.432914, -41.57348, 23.096987), (15.432914, -41.57348, 23.096987), (19.642374, -35.35534, 29.396889), (13.529902, -35.35534, 32.664074), (10.630376, -41.57348, 25.664), (10.630376, -41.57348, 25.664), (13.529902, -35.35534, 32.664074), (6.8974843, -35.35534, 34.676), (5.4193187, -41.57348, 27.244755), (5.4193187, -41.57348, 27.244755), (6.8974843, -35.35534, 34.676), (2.1648902e-15, -35.35534, 35.35534), (1.7009433e-15, -41.57348, 27.778513), (1.7009433e-15, -41.57348, 27.778513), (2.1648902e-15, -35.35534, 35.35534), (-6.8974843, -35.35534, 34.676), (-5.4193187, -41.57348, 27.244755), (-5.4193187, -41.57348, 27.244755), (-6.8974843, -35.35534, 34.676), (-13.529902, -35.35534, 32.664074), (-10.630376, -41.57348, 25.664), (-10.630376, -41.57348, 25.664), (-13.529902, -35.35534, 32.664074), (-19.642374, -35.35534, 29.396889), (-15.432914, -41.57348, 23.096987), (-15.432914, -41.57348, 23.096987), (-19.642374, -35.35534, 29.396889), (-25, -35.35534, 25), (-19.642374, -41.57348, 19.642374), (-19.642374, -41.57348, 19.642374), (-25, -35.35534, 25), (-29.396889, -35.35534, 19.642374), (-23.096987, -41.57348, 15.432914), (-23.096987, -41.57348, 15.432914), (-29.396889, -35.35534, 19.642374), (-32.664074, -35.35534, 13.529902), (-25.664, -41.57348, 10.630376), (-25.664, -41.57348, 10.630376), (-32.664074, -35.35534, 13.529902), (-34.676, -35.35534, 6.8974843), (-27.244755, -41.57348, 5.4193187), (-27.244755, -41.57348, 5.4193187), (-34.676, -35.35534, 6.8974843), (-35.35534, -35.35534, 4.3297804e-15), (-27.778513, -41.57348, 3.4018865e-15), (-27.778513, -41.57348, 3.4018865e-15), (-35.35534, -35.35534, 4.3297804e-15), (-34.676, -35.35534, -6.8974843), (-27.244755, -41.57348, -5.4193187), (-27.244755, -41.57348, -5.4193187), (-34.676, -35.35534, -6.8974843), (-32.664074, -35.35534, -13.529902), (-25.664, -41.57348, -10.630376), (-25.664, -41.57348, -10.630376), (-32.664074, -35.35534, -13.529902), (-29.396889, -35.35534, -19.642374), (-23.096987, -41.57348, -15.432914), (-23.096987, -41.57348, -15.432914), (-29.396889, -35.35534, -19.642374), (-25, -35.35534, -25), (-19.642374, -41.57348, -19.642374), (-19.642374, -41.57348, -19.642374), (-25, -35.35534, -25), (-19.642374, -35.35534, -29.396889), (-15.432914, -41.57348, -23.096987), (-15.432914, -41.57348, -23.096987), (-19.642374, -35.35534, -29.396889), (-13.529902, -35.35534, -32.664074), (-10.630376, -41.57348, -25.664), (-10.630376, -41.57348, -25.664), (-13.529902, -35.35534, -32.664074), (-6.8974843, -35.35534, -34.676), (-5.4193187, -41.57348, -27.244755), (-5.4193187, -41.57348, -27.244755), (-6.8974843, -35.35534, -34.676), (-6.49467e-15, -35.35534, -35.35534), (-5.1028297e-15, -41.57348, -27.778513), (-5.1028297e-15, -41.57348, -27.778513), (-6.49467e-15, -35.35534, -35.35534), (6.8974843, -35.35534, -34.676), (5.4193187, -41.57348, -27.244755), (5.4193187, -41.57348, -27.244755), (6.8974843, -35.35534, -34.676), (13.529902, -35.35534, -32.664074), (10.630376, -41.57348, -25.664), (10.630376, -41.57348, -25.664), (13.529902, -35.35534, -32.664074), (19.642374, -35.35534, -29.396889), (15.432914, -41.57348, -23.096987), (15.432914, -41.57348, -23.096987), (19.642374, -35.35534, -29.396889), (25, -35.35534, -25), (19.642374, -41.57348, -19.642374), (19.642374, -41.57348, -19.642374), (25, -35.35534, -25), (29.396889, -35.35534, -19.642374), (23.096987, -41.57348, -15.432914), (23.096987, -41.57348, -15.432914), (29.396889, -35.35534, -19.642374), (32.664074, -35.35534, -13.529902), (25.664, -41.57348, -10.630376), (25.664, -41.57348, -10.630376), (32.664074, -35.35534, -13.529902), (34.676, -35.35534, -6.8974843), (27.244755, -41.57348, -5.4193187), (27.244755, -41.57348, -5.4193187), (34.676, -35.35534, -6.8974843), (35.35534, -35.35534, 0), (27.778513, -41.57348, 0), (35.35534, -35.35534, 0), (41.57348, -27.778513, 0), (40.77466, -27.778513, 8.110583), (34.676, -35.35534, 6.8974843), (34.676, -35.35534, 6.8974843), (40.77466, -27.778513, 8.110583), (38.408886, -27.778513, 15.909483), (32.664074, -35.35534, 13.529902), (32.664074, -35.35534, 13.529902), (38.408886, -27.778513, 15.909483), (34.567085, -27.778513, 23.096987), (29.396889, -35.35534, 19.642374), (29.396889, -35.35534, 19.642374), (34.567085, -27.778513, 23.096987), (29.396889, -27.778513, 29.396889), (25, -35.35534, 25), (25, -35.35534, 25), (29.396889, -27.778513, 29.396889), (23.096987, -27.778513, 34.567085), (19.642374, -35.35534, 29.396889), (19.642374, -35.35534, 29.396889), (23.096987, -27.778513, 34.567085), (15.909483, -27.778513, 38.408886), (13.529902, -35.35534, 32.664074), (13.529902, -35.35534, 32.664074), (15.909483, -27.778513, 38.408886), (8.110583, -27.778513, 40.77466), (6.8974843, -35.35534, 34.676), (6.8974843, -35.35534, 34.676), (8.110583, -27.778513, 40.77466), (2.5456415e-15, -27.778513, 41.57348), (2.1648902e-15, -35.35534, 35.35534), (2.1648902e-15, -35.35534, 35.35534), (2.5456415e-15, -27.778513, 41.57348), (-8.110583, -27.778513, 40.77466), (-6.8974843, -35.35534, 34.676), (-6.8974843, -35.35534, 34.676), (-8.110583, -27.778513, 40.77466), (-15.909483, -27.778513, 38.408886), (-13.529902, -35.35534, 32.664074), (-13.529902, -35.35534, 32.664074), (-15.909483, -27.778513, 38.408886), (-23.096987, -27.778513, 34.567085), (-19.642374, -35.35534, 29.396889), (-19.642374, -35.35534, 29.396889), (-23.096987, -27.778513, 34.567085), (-29.396889, -27.778513, 29.396889), (-25, -35.35534, 25), (-25, -35.35534, 25), (-29.396889, -27.778513, 29.396889), (-34.567085, -27.778513, 23.096987), (-29.396889, -35.35534, 19.642374), (-29.396889, -35.35534, 19.642374), (-34.567085, -27.778513, 23.096987), (-38.408886, -27.778513, 15.909483), (-32.664074, -35.35534, 13.529902), (-32.664074, -35.35534, 13.529902), (-38.408886, -27.778513, 15.909483), (-40.77466, -27.778513, 8.110583), (-34.676, -35.35534, 6.8974843), (-34.676, -35.35534, 6.8974843), (-40.77466, -27.778513, 8.110583), (-41.57348, -27.778513, 5.091283e-15), (-35.35534, -35.35534, 4.3297804e-15), (-35.35534, -35.35534, 4.3297804e-15), (-41.57348, -27.778513, 5.091283e-15), (-40.77466, -27.778513, -8.110583), (-34.676, -35.35534, -6.8974843), (-34.676, -35.35534, -6.8974843), (-40.77466, -27.778513, -8.110583), (-38.408886, -27.778513, -15.909483), (-32.664074, -35.35534, -13.529902), (-32.664074, -35.35534, -13.529902), (-38.408886, -27.778513, -15.909483), (-34.567085, -27.778513, -23.096987), (-29.396889, -35.35534, -19.642374), (-29.396889, -35.35534, -19.642374), (-34.567085, -27.778513, -23.096987), (-29.396889, -27.778513, -29.396889), (-25, -35.35534, -25), (-25, -35.35534, -25), (-29.396889, -27.778513, -29.396889), (-23.096987, -27.778513, -34.567085), (-19.642374, -35.35534, -29.396889), (-19.642374, -35.35534, -29.396889), (-23.096987, -27.778513, -34.567085), (-15.909483, -27.778513, -38.408886), (-13.529902, -35.35534, -32.664074), (-13.529902, -35.35534, -32.664074), (-15.909483, -27.778513, -38.408886), (-8.110583, -27.778513, -40.77466), (-6.8974843, -35.35534, -34.676), (-6.8974843, -35.35534, -34.676), (-8.110583, -27.778513, -40.77466), (-7.6369244e-15, -27.778513, -41.57348), (-6.49467e-15, -35.35534, -35.35534), (-6.49467e-15, -35.35534, -35.35534), (-7.6369244e-15, -27.778513, -41.57348), (8.110583, -27.778513, -40.77466), (6.8974843, -35.35534, -34.676), (6.8974843, -35.35534, -34.676), (8.110583, -27.778513, -40.77466), (15.909483, -27.778513, -38.408886), (13.529902, -35.35534, -32.664074), (13.529902, -35.35534, -32.664074), (15.909483, -27.778513, -38.408886), (23.096987, -27.778513, -34.567085), (19.642374, -35.35534, -29.396889), (19.642374, -35.35534, -29.396889), (23.096987, -27.778513, -34.567085), (29.396889, -27.778513, -29.396889), (25, -35.35534, -25), (25, -35.35534, -25), (29.396889, -27.778513, -29.396889), (34.567085, -27.778513, -23.096987), (29.396889, -35.35534, -19.642374), (29.396889, -35.35534, -19.642374), (34.567085, -27.778513, -23.096987), (38.408886, -27.778513, -15.909483), (32.664074, -35.35534, -13.529902), (32.664074, -35.35534, -13.529902), (38.408886, -27.778513, -15.909483), (40.77466, -27.778513, -8.110583), (34.676, -35.35534, -6.8974843), (34.676, -35.35534, -6.8974843), (40.77466, -27.778513, -8.110583), (41.57348, -27.778513, 0), (35.35534, -35.35534, 0), (41.57348, -27.778513, 0), (46.193974, -19.13417, 0), (45.306374, -19.13417, 9.011998), (40.77466, -27.778513, 8.110583), (40.77466, -27.778513, 8.110583), (45.306374, -19.13417, 9.011998), (42.67767, -19.13417, 17.67767), (38.408886, -27.778513, 15.909483), (38.408886, -27.778513, 15.909483), (42.67767, -19.13417, 17.67767), (38.408886, -19.13417, 25.664), (34.567085, -27.778513, 23.096987), (34.567085, -27.778513, 23.096987), (38.408886, -19.13417, 25.664), (32.664074, -19.13417, 32.664074), (29.396889, -27.778513, 29.396889), (29.396889, -27.778513, 29.396889), (32.664074, -19.13417, 32.664074), (25.664, -19.13417, 38.408886), (23.096987, -27.778513, 34.567085), (23.096987, -27.778513, 34.567085), (25.664, -19.13417, 38.408886), (17.67767, -19.13417, 42.67767), (15.909483, -27.778513, 38.408886), (15.909483, -27.778513, 38.408886), (17.67767, -19.13417, 42.67767), (9.011998, -19.13417, 45.306374), (8.110583, -27.778513, 40.77466), (8.110583, -27.778513, 40.77466), (9.011998, -19.13417, 45.306374), (2.8285653e-15, -19.13417, 46.193974), (2.5456415e-15, -27.778513, 41.57348), (2.5456415e-15, -27.778513, 41.57348), (2.8285653e-15, -19.13417, 46.193974), (-9.011998, -19.13417, 45.306374), (-8.110583, -27.778513, 40.77466), (-8.110583, -27.778513, 40.77466), (-9.011998, -19.13417, 45.306374), (-17.67767, -19.13417, 42.67767), (-15.909483, -27.778513, 38.408886), (-15.909483, -27.778513, 38.408886), (-17.67767, -19.13417, 42.67767), (-25.664, -19.13417, 38.408886), (-23.096987, -27.778513, 34.567085), (-23.096987, -27.778513, 34.567085), (-25.664, -19.13417, 38.408886), (-32.664074, -19.13417, 32.664074), (-29.396889, -27.778513, 29.396889), (-29.396889, -27.778513, 29.396889), (-32.664074, -19.13417, 32.664074), (-38.408886, -19.13417, 25.664), (-34.567085, -27.778513, 23.096987), (-34.567085, -27.778513, 23.096987), (-38.408886, -19.13417, 25.664), (-42.67767, -19.13417, 17.67767), (-38.408886, -27.778513, 15.909483), (-38.408886, -27.778513, 15.909483), (-42.67767, -19.13417, 17.67767), (-45.306374, -19.13417, 9.011998), (-40.77466, -27.778513, 8.110583), (-40.77466, -27.778513, 8.110583), (-45.306374, -19.13417, 9.011998), (-46.193974, -19.13417, 5.6571306e-15), (-41.57348, -27.778513, 5.091283e-15), (-41.57348, -27.778513, 5.091283e-15), (-46.193974, -19.13417, 5.6571306e-15), (-45.306374, -19.13417, -9.011998), (-40.77466, -27.778513, -8.110583), (-40.77466, -27.778513, -8.110583), (-45.306374, -19.13417, -9.011998), (-42.67767, -19.13417, -17.67767), (-38.408886, -27.778513, -15.909483), (-38.408886, -27.778513, -15.909483), (-42.67767, -19.13417, -17.67767), (-38.408886, -19.13417, -25.664), (-34.567085, -27.778513, -23.096987), (-34.567085, -27.778513, -23.096987), (-38.408886, -19.13417, -25.664), (-32.664074, -19.13417, -32.664074), (-29.396889, -27.778513, -29.396889), (-29.396889, -27.778513, -29.396889), (-32.664074, -19.13417, -32.664074), (-25.664, -19.13417, -38.408886), (-23.096987, -27.778513, -34.567085), (-23.096987, -27.778513, -34.567085), (-25.664, -19.13417, -38.408886), (-17.67767, -19.13417, -42.67767), (-15.909483, -27.778513, -38.408886), (-15.909483, -27.778513, -38.408886), (-17.67767, -19.13417, -42.67767), (-9.011998, -19.13417, -45.306374), (-8.110583, -27.778513, -40.77466), (-8.110583, -27.778513, -40.77466), (-9.011998, -19.13417, -45.306374), (-8.4856955e-15, -19.13417, -46.193974), (-7.6369244e-15, -27.778513, -41.57348), (-7.6369244e-15, -27.778513, -41.57348), (-8.4856955e-15, -19.13417, -46.193974), (9.011998, -19.13417, -45.306374), (8.110583, -27.778513, -40.77466), (8.110583, -27.778513, -40.77466), (9.011998, -19.13417, -45.306374), (17.67767, -19.13417, -42.67767), (15.909483, -27.778513, -38.408886), (15.909483, -27.778513, -38.408886), (17.67767, -19.13417, -42.67767), (25.664, -19.13417, -38.408886), (23.096987, -27.778513, -34.567085), (23.096987, -27.778513, -34.567085), (25.664, -19.13417, -38.408886), (32.664074, -19.13417, -32.664074), (29.396889, -27.778513, -29.396889), (29.396889, -27.778513, -29.396889), (32.664074, -19.13417, -32.664074), (38.408886, -19.13417, -25.664), (34.567085, -27.778513, -23.096987), (34.567085, -27.778513, -23.096987), (38.408886, -19.13417, -25.664), (42.67767, -19.13417, -17.67767), (38.408886, -27.778513, -15.909483), (38.408886, -27.778513, -15.909483), (42.67767, -19.13417, -17.67767), (45.306374, -19.13417, -9.011998), (40.77466, -27.778513, -8.110583), (40.77466, -27.778513, -8.110583), (45.306374, -19.13417, -9.011998), (46.193974, -19.13417, 0), (41.57348, -27.778513, 0), (46.193974, -19.13417, 0), (49.03926, -9.754517, 0), (48.09699, -9.754517, 9.567085), (45.306374, -19.13417, 9.011998), (45.306374, -19.13417, 9.011998), (48.09699, -9.754517, 9.567085), (45.306374, -9.754517, 18.766514), (42.67767, -19.13417, 17.67767), (42.67767, -19.13417, 17.67767), (45.306374, -9.754517, 18.766514), (40.77466, -9.754517, 27.244755), (38.408886, -19.13417, 25.664), (38.408886, -19.13417, 25.664), (40.77466, -9.754517, 27.244755), (34.676, -9.754517, 34.676), (32.664074, -19.13417, 32.664074), (32.664074, -19.13417, 32.664074), (34.676, -9.754517, 34.676), (27.244755, -9.754517, 40.77466), (25.664, -19.13417, 38.408886), (25.664, -19.13417, 38.408886), (27.244755, -9.754517, 40.77466), (18.766514, -9.754517, 45.306374), (17.67767, -19.13417, 42.67767), (17.67767, -19.13417, 42.67767), (18.766514, -9.754517, 45.306374), (9.567085, -9.754517, 48.09699), (9.011998, -19.13417, 45.306374), (9.011998, -19.13417, 45.306374), (9.567085, -9.754517, 48.09699), (3.002789e-15, -9.754517, 49.03926), (2.8285653e-15, -19.13417, 46.193974), (2.8285653e-15, -19.13417, 46.193974), (3.002789e-15, -9.754517, 49.03926), (-9.567085, -9.754517, 48.09699), (-9.011998, -19.13417, 45.306374), (-9.011998, -19.13417, 45.306374), (-9.567085, -9.754517, 48.09699), (-18.766514, -9.754517, 45.306374), (-17.67767, -19.13417, 42.67767), (-17.67767, -19.13417, 42.67767), (-18.766514, -9.754517, 45.306374), (-27.244755, -9.754517, 40.77466), (-25.664, -19.13417, 38.408886), (-25.664, -19.13417, 38.408886), (-27.244755, -9.754517, 40.77466), (-34.676, -9.754517, 34.676), (-32.664074, -19.13417, 32.664074), (-32.664074, -19.13417, 32.664074), (-34.676, -9.754517, 34.676), (-40.77466, -9.754517, 27.244755), (-38.408886, -19.13417, 25.664), (-38.408886, -19.13417, 25.664), (-40.77466, -9.754517, 27.244755), (-45.306374, -9.754517, 18.766514), (-42.67767, -19.13417, 17.67767), (-42.67767, -19.13417, 17.67767), (-45.306374, -9.754517, 18.766514), (-48.09699, -9.754517, 9.567085), (-45.306374, -19.13417, 9.011998), (-45.306374, -19.13417, 9.011998), (-48.09699, -9.754517, 9.567085), (-49.03926, -9.754517, 6.005578e-15), (-46.193974, -19.13417, 5.6571306e-15), (-46.193974, -19.13417, 5.6571306e-15), (-49.03926, -9.754517, 6.005578e-15), (-48.09699, -9.754517, -9.567085), (-45.306374, -19.13417, -9.011998), (-45.306374, -19.13417, -9.011998), (-48.09699, -9.754517, -9.567085), (-45.306374, -9.754517, -18.766514), (-42.67767, -19.13417, -17.67767), (-42.67767, -19.13417, -17.67767), (-45.306374, -9.754517, -18.766514), (-40.77466, -9.754517, -27.244755), (-38.408886, -19.13417, -25.664), (-38.408886, -19.13417, -25.664), (-40.77466, -9.754517, -27.244755), (-34.676, -9.754517, -34.676), (-32.664074, -19.13417, -32.664074), (-32.664074, -19.13417, -32.664074), (-34.676, -9.754517, -34.676), (-27.244755, -9.754517, -40.77466), (-25.664, -19.13417, -38.408886), (-25.664, -19.13417, -38.408886), (-27.244755, -9.754517, -40.77466), (-18.766514, -9.754517, -45.306374), (-17.67767, -19.13417, -42.67767), (-17.67767, -19.13417, -42.67767), (-18.766514, -9.754517, -45.306374), (-9.567085, -9.754517, -48.09699), (-9.011998, -19.13417, -45.306374), (-9.011998, -19.13417, -45.306374), (-9.567085, -9.754517, -48.09699), (-9.0083665e-15, -9.754517, -49.03926), (-8.4856955e-15, -19.13417, -46.193974), (-8.4856955e-15, -19.13417, -46.193974), (-9.0083665e-15, -9.754517, -49.03926), (9.567085, -9.754517, -48.09699), (9.011998, -19.13417, -45.306374), (9.011998, -19.13417, -45.306374), (9.567085, -9.754517, -48.09699), (18.766514, -9.754517, -45.306374), (17.67767, -19.13417, -42.67767), (17.67767, -19.13417, -42.67767), (18.766514, -9.754517, -45.306374), (27.244755, -9.754517, -40.77466), (25.664, -19.13417, -38.408886), (25.664, -19.13417, -38.408886), (27.244755, -9.754517, -40.77466), (34.676, -9.754517, -34.676), (32.664074, -19.13417, -32.664074), (32.664074, -19.13417, -32.664074), (34.676, -9.754517, -34.676), (40.77466, -9.754517, -27.244755), (38.408886, -19.13417, -25.664), (38.408886, -19.13417, -25.664), (40.77466, -9.754517, -27.244755), (45.306374, -9.754517, -18.766514), (42.67767, -19.13417, -17.67767), (42.67767, -19.13417, -17.67767), (45.306374, -9.754517, -18.766514), (48.09699, -9.754517, -9.567085), (45.306374, -19.13417, -9.011998), (45.306374, -19.13417, -9.011998), (48.09699, -9.754517, -9.567085), (49.03926, -9.754517, 0), (46.193974, -19.13417, 0), (49.03926, -9.754517, 0), (50, 0, 0), (49.03926, 0, 9.754517), (48.09699, -9.754517, 9.567085), (48.09699, -9.754517, 9.567085), (49.03926, 0, 9.754517), (46.193974, 0, 19.13417), (45.306374, -9.754517, 18.766514), (45.306374, -9.754517, 18.766514), (46.193974, 0, 19.13417), (41.57348, 0, 27.778513), (40.77466, -9.754517, 27.244755), (40.77466, -9.754517, 27.244755), (41.57348, 0, 27.778513), (35.35534, 0, 35.35534), (34.676, -9.754517, 34.676), (34.676, -9.754517, 34.676), (35.35534, 0, 35.35534), (27.778513, 0, 41.57348), (27.244755, -9.754517, 40.77466), (27.244755, -9.754517, 40.77466), (27.778513, 0, 41.57348), (19.13417, 0, 46.193974), (18.766514, -9.754517, 45.306374), (18.766514, -9.754517, 45.306374), (19.13417, 0, 46.193974), (9.754517, 0, 49.03926), (9.567085, -9.754517, 48.09699), (9.567085, -9.754517, 48.09699), (9.754517, 0, 49.03926), (3.061617e-15, 0, 50), (3.002789e-15, -9.754517, 49.03926), (3.002789e-15, -9.754517, 49.03926), (3.061617e-15, 0, 50), (-9.754517, 0, 49.03926), (-9.567085, -9.754517, 48.09699), (-9.567085, -9.754517, 48.09699), (-9.754517, 0, 49.03926), (-19.13417, 0, 46.193974), (-18.766514, -9.754517, 45.306374), (-18.766514, -9.754517, 45.306374), (-19.13417, 0, 46.193974), (-27.778513, 0, 41.57348), (-27.244755, -9.754517, 40.77466), (-27.244755, -9.754517, 40.77466), (-27.778513, 0, 41.57348), (-35.35534, 0, 35.35534), (-34.676, -9.754517, 34.676), (-34.676, -9.754517, 34.676), (-35.35534, 0, 35.35534), (-41.57348, 0, 27.778513), (-40.77466, -9.754517, 27.244755), (-40.77466, -9.754517, 27.244755), (-41.57348, 0, 27.778513), (-46.193974, 0, 19.13417), (-45.306374, -9.754517, 18.766514), (-45.306374, -9.754517, 18.766514), (-46.193974, 0, 19.13417), (-49.03926, 0, 9.754517), (-48.09699, -9.754517, 9.567085), (-48.09699, -9.754517, 9.567085), (-49.03926, 0, 9.754517), (-50, 0, 6.123234e-15), (-49.03926, -9.754517, 6.005578e-15), (-49.03926, -9.754517, 6.005578e-15), (-50, 0, 6.123234e-15), (-49.03926, 0, -9.754517), (-48.09699, -9.754517, -9.567085), (-48.09699, -9.754517, -9.567085), (-49.03926, 0, -9.754517), (-46.193974, 0, -19.13417), (-45.306374, -9.754517, -18.766514), (-45.306374, -9.754517, -18.766514), (-46.193974, 0, -19.13417), (-41.57348, 0, -27.778513), (-40.77466, -9.754517, -27.244755), (-40.77466, -9.754517, -27.244755), (-41.57348, 0, -27.778513), (-35.35534, 0, -35.35534), (-34.676, -9.754517, -34.676), (-34.676, -9.754517, -34.676), (-35.35534, 0, -35.35534), (-27.778513, 0, -41.57348), (-27.244755, -9.754517, -40.77466), (-27.244755, -9.754517, -40.77466), (-27.778513, 0, -41.57348), (-19.13417, 0, -46.193974), (-18.766514, -9.754517, -45.306374), (-18.766514, -9.754517, -45.306374), (-19.13417, 0, -46.193974), (-9.754517, 0, -49.03926), (-9.567085, -9.754517, -48.09699), (-9.567085, -9.754517, -48.09699), (-9.754517, 0, -49.03926), (-9.184851e-15, 0, -50), (-9.0083665e-15, -9.754517, -49.03926), (-9.0083665e-15, -9.754517, -49.03926), (-9.184851e-15, 0, -50), (9.754517, 0, -49.03926), (9.567085, -9.754517, -48.09699), (9.567085, -9.754517, -48.09699), (9.754517, 0, -49.03926), (19.13417, 0, -46.193974), (18.766514, -9.754517, -45.306374), (18.766514, -9.754517, -45.306374), (19.13417, 0, -46.193974), (27.778513, 0, -41.57348), (27.244755, -9.754517, -40.77466), (27.244755, -9.754517, -40.77466), (27.778513, 0, -41.57348), (35.35534, 0, -35.35534), (34.676, -9.754517, -34.676), (34.676, -9.754517, -34.676), (35.35534, 0, -35.35534), (41.57348, 0, -27.778513), (40.77466, -9.754517, -27.244755), (40.77466, -9.754517, -27.244755), (41.57348, 0, -27.778513), (46.193974, 0, -19.13417), (45.306374, -9.754517, -18.766514), (45.306374, -9.754517, -18.766514), (46.193974, 0, -19.13417), (49.03926, 0, -9.754517), (48.09699, -9.754517, -9.567085), (48.09699, -9.754517, -9.567085), (49.03926, 0, -9.754517), (50, 0, 0), (49.03926, -9.754517, 0), (50, 0, 0), (49.03926, 9.754517, 0), (48.09699, 9.754517, 9.567085), (49.03926, 0, 9.754517), (49.03926, 0, 9.754517), (48.09699, 9.754517, 9.567085), (45.306374, 9.754517, 18.766514), (46.193974, 0, 19.13417), (46.193974, 0, 19.13417), (45.306374, 9.754517, 18.766514), (40.77466, 9.754517, 27.244755), (41.57348, 0, 27.778513), (41.57348, 0, 27.778513), (40.77466, 9.754517, 27.244755), (34.676, 9.754517, 34.676), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (34.676, 9.754517, 34.676), (27.244755, 9.754517, 40.77466), (27.778513, 0, 41.57348), (27.778513, 0, 41.57348), (27.244755, 9.754517, 40.77466), (18.766514, 9.754517, 45.306374), (19.13417, 0, 46.193974), (19.13417, 0, 46.193974), (18.766514, 9.754517, 45.306374), (9.567085, 9.754517, 48.09699), (9.754517, 0, 49.03926), (9.754517, 0, 49.03926), (9.567085, 9.754517, 48.09699), (3.002789e-15, 9.754517, 49.03926), (3.061617e-15, 0, 50), (3.061617e-15, 0, 50), (3.002789e-15, 9.754517, 49.03926), (-9.567085, 9.754517, 48.09699), (-9.754517, 0, 49.03926), (-9.754517, 0, 49.03926), (-9.567085, 9.754517, 48.09699), (-18.766514, 9.754517, 45.306374), (-19.13417, 0, 46.193974), (-19.13417, 0, 46.193974), (-18.766514, 9.754517, 45.306374), (-27.244755, 9.754517, 40.77466), (-27.778513, 0, 41.57348), (-27.778513, 0, 41.57348), (-27.244755, 9.754517, 40.77466), (-34.676, 9.754517, 34.676), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-34.676, 9.754517, 34.676), (-40.77466, 9.754517, 27.244755), (-41.57348, 0, 27.778513), (-41.57348, 0, 27.778513), (-40.77466, 9.754517, 27.244755), (-45.306374, 9.754517, 18.766514), (-46.193974, 0, 19.13417), (-46.193974, 0, 19.13417), (-45.306374, 9.754517, 18.766514), (-48.09699, 9.754517, 9.567085), (-49.03926, 0, 9.754517), (-49.03926, 0, 9.754517), (-48.09699, 9.754517, 9.567085), (-49.03926, 9.754517, 6.005578e-15), (-50, 0, 6.123234e-15), (-50, 0, 6.123234e-15), (-49.03926, 9.754517, 6.005578e-15), (-48.09699, 9.754517, -9.567085), (-49.03926, 0, -9.754517), (-49.03926, 0, -9.754517), (-48.09699, 9.754517, -9.567085), (-45.306374, 9.754517, -18.766514), (-46.193974, 0, -19.13417), (-46.193974, 0, -19.13417), (-45.306374, 9.754517, -18.766514), (-40.77466, 9.754517, -27.244755), (-41.57348, 0, -27.778513), (-41.57348, 0, -27.778513), (-40.77466, 9.754517, -27.244755), (-34.676, 9.754517, -34.676), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-34.676, 9.754517, -34.676), (-27.244755, 9.754517, -40.77466), (-27.778513, 0, -41.57348), (-27.778513, 0, -41.57348), (-27.244755, 9.754517, -40.77466), (-18.766514, 9.754517, -45.306374), (-19.13417, 0, -46.193974), (-19.13417, 0, -46.193974), (-18.766514, 9.754517, -45.306374), (-9.567085, 9.754517, -48.09699), (-9.754517, 0, -49.03926), (-9.754517, 0, -49.03926), (-9.567085, 9.754517, -48.09699), (-9.0083665e-15, 9.754517, -49.03926), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (-9.0083665e-15, 9.754517, -49.03926), (9.567085, 9.754517, -48.09699), (9.754517, 0, -49.03926), (9.754517, 0, -49.03926), (9.567085, 9.754517, -48.09699), (18.766514, 9.754517, -45.306374), (19.13417, 0, -46.193974), (19.13417, 0, -46.193974), (18.766514, 9.754517, -45.306374), (27.244755, 9.754517, -40.77466), (27.778513, 0, -41.57348), (27.778513, 0, -41.57348), (27.244755, 9.754517, -40.77466), (34.676, 9.754517, -34.676), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (34.676, 9.754517, -34.676), (40.77466, 9.754517, -27.244755), (41.57348, 0, -27.778513), (41.57348, 0, -27.778513), (40.77466, 9.754517, -27.244755), (45.306374, 9.754517, -18.766514), (46.193974, 0, -19.13417), (46.193974, 0, -19.13417), (45.306374, 9.754517, -18.766514), (48.09699, 9.754517, -9.567085), (49.03926, 0, -9.754517), (49.03926, 0, -9.754517), (48.09699, 9.754517, -9.567085), (49.03926, 9.754517, 0), (50, 0, 0), (49.03926, 9.754517, 0), (46.193974, 19.13417, 0), (45.306374, 19.13417, 9.011998), (48.09699, 9.754517, 9.567085), (48.09699, 9.754517, 9.567085), (45.306374, 19.13417, 9.011998), (42.67767, 19.13417, 17.67767), (45.306374, 9.754517, 18.766514), (45.306374, 9.754517, 18.766514), (42.67767, 19.13417, 17.67767), (38.408886, 19.13417, 25.664), (40.77466, 9.754517, 27.244755), (40.77466, 9.754517, 27.244755), (38.408886, 19.13417, 25.664), (32.664074, 19.13417, 32.664074), (34.676, 9.754517, 34.676), (34.676, 9.754517, 34.676), (32.664074, 19.13417, 32.664074), (25.664, 19.13417, 38.408886), (27.244755, 9.754517, 40.77466), (27.244755, 9.754517, 40.77466), (25.664, 19.13417, 38.408886), (17.67767, 19.13417, 42.67767), (18.766514, 9.754517, 45.306374), (18.766514, 9.754517, 45.306374), (17.67767, 19.13417, 42.67767), (9.011998, 19.13417, 45.306374), (9.567085, 9.754517, 48.09699), (9.567085, 9.754517, 48.09699), (9.011998, 19.13417, 45.306374), (2.8285653e-15, 19.13417, 46.193974), (3.002789e-15, 9.754517, 49.03926), (3.002789e-15, 9.754517, 49.03926), (2.8285653e-15, 19.13417, 46.193974), (-9.011998, 19.13417, 45.306374), (-9.567085, 9.754517, 48.09699), (-9.567085, 9.754517, 48.09699), (-9.011998, 19.13417, 45.306374), (-17.67767, 19.13417, 42.67767), (-18.766514, 9.754517, 45.306374), (-18.766514, 9.754517, 45.306374), (-17.67767, 19.13417, 42.67767), (-25.664, 19.13417, 38.408886), (-27.244755, 9.754517, 40.77466), (-27.244755, 9.754517, 40.77466), (-25.664, 19.13417, 38.408886), (-32.664074, 19.13417, 32.664074), (-34.676, 9.754517, 34.676), (-34.676, 9.754517, 34.676), (-32.664074, 19.13417, 32.664074), (-38.408886, 19.13417, 25.664), (-40.77466, 9.754517, 27.244755), (-40.77466, 9.754517, 27.244755), (-38.408886, 19.13417, 25.664), (-42.67767, 19.13417, 17.67767), (-45.306374, 9.754517, 18.766514), (-45.306374, 9.754517, 18.766514), (-42.67767, 19.13417, 17.67767), (-45.306374, 19.13417, 9.011998), (-48.09699, 9.754517, 9.567085), (-48.09699, 9.754517, 9.567085), (-45.306374, 19.13417, 9.011998), (-46.193974, 19.13417, 5.6571306e-15), (-49.03926, 9.754517, 6.005578e-15), (-49.03926, 9.754517, 6.005578e-15), (-46.193974, 19.13417, 5.6571306e-15), (-45.306374, 19.13417, -9.011998), (-48.09699, 9.754517, -9.567085), (-48.09699, 9.754517, -9.567085), (-45.306374, 19.13417, -9.011998), (-42.67767, 19.13417, -17.67767), (-45.306374, 9.754517, -18.766514), (-45.306374, 9.754517, -18.766514), (-42.67767, 19.13417, -17.67767), (-38.408886, 19.13417, -25.664), (-40.77466, 9.754517, -27.244755), (-40.77466, 9.754517, -27.244755), (-38.408886, 19.13417, -25.664), (-32.664074, 19.13417, -32.664074), (-34.676, 9.754517, -34.676), (-34.676, 9.754517, -34.676), (-32.664074, 19.13417, -32.664074), (-25.664, 19.13417, -38.408886), (-27.244755, 9.754517, -40.77466), (-27.244755, 9.754517, -40.77466), (-25.664, 19.13417, -38.408886), (-17.67767, 19.13417, -42.67767), (-18.766514, 9.754517, -45.306374), (-18.766514, 9.754517, -45.306374), (-17.67767, 19.13417, -42.67767), (-9.011998, 19.13417, -45.306374), (-9.567085, 9.754517, -48.09699), (-9.567085, 9.754517, -48.09699), (-9.011998, 19.13417, -45.306374), (-8.4856955e-15, 19.13417, -46.193974), (-9.0083665e-15, 9.754517, -49.03926), (-9.0083665e-15, 9.754517, -49.03926), (-8.4856955e-15, 19.13417, -46.193974), (9.011998, 19.13417, -45.306374), (9.567085, 9.754517, -48.09699), (9.567085, 9.754517, -48.09699), (9.011998, 19.13417, -45.306374), (17.67767, 19.13417, -42.67767), (18.766514, 9.754517, -45.306374), (18.766514, 9.754517, -45.306374), (17.67767, 19.13417, -42.67767), (25.664, 19.13417, -38.408886), (27.244755, 9.754517, -40.77466), (27.244755, 9.754517, -40.77466), (25.664, 19.13417, -38.408886), (32.664074, 19.13417, -32.664074), (34.676, 9.754517, -34.676), (34.676, 9.754517, -34.676), (32.664074, 19.13417, -32.664074), (38.408886, 19.13417, -25.664), (40.77466, 9.754517, -27.244755), (40.77466, 9.754517, -27.244755), (38.408886, 19.13417, -25.664), (42.67767, 19.13417, -17.67767), (45.306374, 9.754517, -18.766514), (45.306374, 9.754517, -18.766514), (42.67767, 19.13417, -17.67767), (45.306374, 19.13417, -9.011998), (48.09699, 9.754517, -9.567085), (48.09699, 9.754517, -9.567085), (45.306374, 19.13417, -9.011998), (46.193974, 19.13417, 0), (49.03926, 9.754517, 0), (46.193974, 19.13417, 0), (41.57348, 27.778513, 0), (40.77466, 27.778513, 8.110583), (45.306374, 19.13417, 9.011998), (45.306374, 19.13417, 9.011998), (40.77466, 27.778513, 8.110583), (38.408886, 27.778513, 15.909483), (42.67767, 19.13417, 17.67767), (42.67767, 19.13417, 17.67767), (38.408886, 27.778513, 15.909483), (34.567085, 27.778513, 23.096987), (38.408886, 19.13417, 25.664), (38.408886, 19.13417, 25.664), (34.567085, 27.778513, 23.096987), (29.396889, 27.778513, 29.396889), (32.664074, 19.13417, 32.664074), (32.664074, 19.13417, 32.664074), (29.396889, 27.778513, 29.396889), (23.096987, 27.778513, 34.567085), (25.664, 19.13417, 38.408886), (25.664, 19.13417, 38.408886), (23.096987, 27.778513, 34.567085), (15.909483, 27.778513, 38.408886), (17.67767, 19.13417, 42.67767), (17.67767, 19.13417, 42.67767), (15.909483, 27.778513, 38.408886), (8.110583, 27.778513, 40.77466), (9.011998, 19.13417, 45.306374), (9.011998, 19.13417, 45.306374), (8.110583, 27.778513, 40.77466), (2.5456415e-15, 27.778513, 41.57348), (2.8285653e-15, 19.13417, 46.193974), (2.8285653e-15, 19.13417, 46.193974), (2.5456415e-15, 27.778513, 41.57348), (-8.110583, 27.778513, 40.77466), (-9.011998, 19.13417, 45.306374), (-9.011998, 19.13417, 45.306374), (-8.110583, 27.778513, 40.77466), (-15.909483, 27.778513, 38.408886), (-17.67767, 19.13417, 42.67767), (-17.67767, 19.13417, 42.67767), (-15.909483, 27.778513, 38.408886), (-23.096987, 27.778513, 34.567085), (-25.664, 19.13417, 38.408886), (-25.664, 19.13417, 38.408886), (-23.096987, 27.778513, 34.567085), (-29.396889, 27.778513, 29.396889), (-32.664074, 19.13417, 32.664074), (-32.664074, 19.13417, 32.664074), (-29.396889, 27.778513, 29.396889), (-34.567085, 27.778513, 23.096987), (-38.408886, 19.13417, 25.664), (-38.408886, 19.13417, 25.664), (-34.567085, 27.778513, 23.096987), (-38.408886, 27.778513, 15.909483), (-42.67767, 19.13417, 17.67767), (-42.67767, 19.13417, 17.67767), (-38.408886, 27.778513, 15.909483), (-40.77466, 27.778513, 8.110583), (-45.306374, 19.13417, 9.011998), (-45.306374, 19.13417, 9.011998), (-40.77466, 27.778513, 8.110583), (-41.57348, 27.778513, 5.091283e-15), (-46.193974, 19.13417, 5.6571306e-15), (-46.193974, 19.13417, 5.6571306e-15), (-41.57348, 27.778513, 5.091283e-15), (-40.77466, 27.778513, -8.110583), (-45.306374, 19.13417, -9.011998), (-45.306374, 19.13417, -9.011998), (-40.77466, 27.778513, -8.110583), (-38.408886, 27.778513, -15.909483), (-42.67767, 19.13417, -17.67767), (-42.67767, 19.13417, -17.67767), (-38.408886, 27.778513, -15.909483), (-34.567085, 27.778513, -23.096987), (-38.408886, 19.13417, -25.664), (-38.408886, 19.13417, -25.664), (-34.567085, 27.778513, -23.096987), (-29.396889, 27.778513, -29.396889), (-32.664074, 19.13417, -32.664074), (-32.664074, 19.13417, -32.664074), (-29.396889, 27.778513, -29.396889), (-23.096987, 27.778513, -34.567085), (-25.664, 19.13417, -38.408886), (-25.664, 19.13417, -38.408886), (-23.096987, 27.778513, -34.567085), (-15.909483, 27.778513, -38.408886), (-17.67767, 19.13417, -42.67767), (-17.67767, 19.13417, -42.67767), (-15.909483, 27.778513, -38.408886), (-8.110583, 27.778513, -40.77466), (-9.011998, 19.13417, -45.306374), (-9.011998, 19.13417, -45.306374), (-8.110583, 27.778513, -40.77466), (-7.6369244e-15, 27.778513, -41.57348), (-8.4856955e-15, 19.13417, -46.193974), (-8.4856955e-15, 19.13417, -46.193974), (-7.6369244e-15, 27.778513, -41.57348), (8.110583, 27.778513, -40.77466), (9.011998, 19.13417, -45.306374), (9.011998, 19.13417, -45.306374), (8.110583, 27.778513, -40.77466), (15.909483, 27.778513, -38.408886), (17.67767, 19.13417, -42.67767), (17.67767, 19.13417, -42.67767), (15.909483, 27.778513, -38.408886), (23.096987, 27.778513, -34.567085), (25.664, 19.13417, -38.408886), (25.664, 19.13417, -38.408886), (23.096987, 27.778513, -34.567085), (29.396889, 27.778513, -29.396889), (32.664074, 19.13417, -32.664074), (32.664074, 19.13417, -32.664074), (29.396889, 27.778513, -29.396889), (34.567085, 27.778513, -23.096987), (38.408886, 19.13417, -25.664), (38.408886, 19.13417, -25.664), (34.567085, 27.778513, -23.096987), (38.408886, 27.778513, -15.909483), (42.67767, 19.13417, -17.67767), (42.67767, 19.13417, -17.67767), (38.408886, 27.778513, -15.909483), (40.77466, 27.778513, -8.110583), (45.306374, 19.13417, -9.011998), (45.306374, 19.13417, -9.011998), (40.77466, 27.778513, -8.110583), (41.57348, 27.778513, 0), (46.193974, 19.13417, 0), (41.57348, 27.778513, 0), (35.35534, 35.35534, 0), (34.676, 35.35534, 6.8974843), (40.77466, 27.778513, 8.110583), (40.77466, 27.778513, 8.110583), (34.676, 35.35534, 6.8974843), (32.664074, 35.35534, 13.529902), (38.408886, 27.778513, 15.909483), (38.408886, 27.778513, 15.909483), (32.664074, 35.35534, 13.529902), (29.396889, 35.35534, 19.642374), (34.567085, 27.778513, 23.096987), (34.567085, 27.778513, 23.096987), (29.396889, 35.35534, 19.642374), (25, 35.35534, 25), (29.396889, 27.778513, 29.396889), (29.396889, 27.778513, 29.396889), (25, 35.35534, 25), (19.642374, 35.35534, 29.396889), (23.096987, 27.778513, 34.567085), (23.096987, 27.778513, 34.567085), (19.642374, 35.35534, 29.396889), (13.529902, 35.35534, 32.664074), (15.909483, 27.778513, 38.408886), (15.909483, 27.778513, 38.408886), (13.529902, 35.35534, 32.664074), (6.8974843, 35.35534, 34.676), (8.110583, 27.778513, 40.77466), (8.110583, 27.778513, 40.77466), (6.8974843, 35.35534, 34.676), (2.1648902e-15, 35.35534, 35.35534), (2.5456415e-15, 27.778513, 41.57348), (2.5456415e-15, 27.778513, 41.57348), (2.1648902e-15, 35.35534, 35.35534), (-6.8974843, 35.35534, 34.676), (-8.110583, 27.778513, 40.77466), (-8.110583, 27.778513, 40.77466), (-6.8974843, 35.35534, 34.676), (-13.529902, 35.35534, 32.664074), (-15.909483, 27.778513, 38.408886), (-15.909483, 27.778513, 38.408886), (-13.529902, 35.35534, 32.664074), (-19.642374, 35.35534, 29.396889), (-23.096987, 27.778513, 34.567085), (-23.096987, 27.778513, 34.567085), (-19.642374, 35.35534, 29.396889), (-25, 35.35534, 25), (-29.396889, 27.778513, 29.396889), (-29.396889, 27.778513, 29.396889), (-25, 35.35534, 25), (-29.396889, 35.35534, 19.642374), (-34.567085, 27.778513, 23.096987), (-34.567085, 27.778513, 23.096987), (-29.396889, 35.35534, 19.642374), (-32.664074, 35.35534, 13.529902), (-38.408886, 27.778513, 15.909483), (-38.408886, 27.778513, 15.909483), (-32.664074, 35.35534, 13.529902), (-34.676, 35.35534, 6.8974843), (-40.77466, 27.778513, 8.110583), (-40.77466, 27.778513, 8.110583), (-34.676, 35.35534, 6.8974843), (-35.35534, 35.35534, 4.3297804e-15), (-41.57348, 27.778513, 5.091283e-15), (-41.57348, 27.778513, 5.091283e-15), (-35.35534, 35.35534, 4.3297804e-15), (-34.676, 35.35534, -6.8974843), (-40.77466, 27.778513, -8.110583), (-40.77466, 27.778513, -8.110583), (-34.676, 35.35534, -6.8974843), (-32.664074, 35.35534, -13.529902), (-38.408886, 27.778513, -15.909483), (-38.408886, 27.778513, -15.909483), (-32.664074, 35.35534, -13.529902), (-29.396889, 35.35534, -19.642374), (-34.567085, 27.778513, -23.096987), (-34.567085, 27.778513, -23.096987), (-29.396889, 35.35534, -19.642374), (-25, 35.35534, -25), (-29.396889, 27.778513, -29.396889), (-29.396889, 27.778513, -29.396889), (-25, 35.35534, -25), (-19.642374, 35.35534, -29.396889), (-23.096987, 27.778513, -34.567085), (-23.096987, 27.778513, -34.567085), (-19.642374, 35.35534, -29.396889), (-13.529902, 35.35534, -32.664074), (-15.909483, 27.778513, -38.408886), (-15.909483, 27.778513, -38.408886), (-13.529902, 35.35534, -32.664074), (-6.8974843, 35.35534, -34.676), (-8.110583, 27.778513, -40.77466), (-8.110583, 27.778513, -40.77466), (-6.8974843, 35.35534, -34.676), (-6.49467e-15, 35.35534, -35.35534), (-7.6369244e-15, 27.778513, -41.57348), (-7.6369244e-15, 27.778513, -41.57348), (-6.49467e-15, 35.35534, -35.35534), (6.8974843, 35.35534, -34.676), (8.110583, 27.778513, -40.77466), (8.110583, 27.778513, -40.77466), (6.8974843, 35.35534, -34.676), (13.529902, 35.35534, -32.664074), (15.909483, 27.778513, -38.408886), (15.909483, 27.778513, -38.408886), (13.529902, 35.35534, -32.664074), (19.642374, 35.35534, -29.396889), (23.096987, 27.778513, -34.567085), (23.096987, 27.778513, -34.567085), (19.642374, 35.35534, -29.396889), (25, 35.35534, -25), (29.396889, 27.778513, -29.396889), (29.396889, 27.778513, -29.396889), (25, 35.35534, -25), (29.396889, 35.35534, -19.642374), (34.567085, 27.778513, -23.096987), (34.567085, 27.778513, -23.096987), (29.396889, 35.35534, -19.642374), (32.664074, 35.35534, -13.529902), (38.408886, 27.778513, -15.909483), (38.408886, 27.778513, -15.909483), (32.664074, 35.35534, -13.529902), (34.676, 35.35534, -6.8974843), (40.77466, 27.778513, -8.110583), (40.77466, 27.778513, -8.110583), (34.676, 35.35534, -6.8974843), (35.35534, 35.35534, 0), (41.57348, 27.778513, 0), (35.35534, 35.35534, 0), (27.778513, 41.57348, 0), (27.244755, 41.57348, 5.4193187), (34.676, 35.35534, 6.8974843), (34.676, 35.35534, 6.8974843), (27.244755, 41.57348, 5.4193187), (25.664, 41.57348, 10.630376), (32.664074, 35.35534, 13.529902), (32.664074, 35.35534, 13.529902), (25.664, 41.57348, 10.630376), (23.096987, 41.57348, 15.432914), (29.396889, 35.35534, 19.642374), (29.396889, 35.35534, 19.642374), (23.096987, 41.57348, 15.432914), (19.642374, 41.57348, 19.642374), (25, 35.35534, 25), (25, 35.35534, 25), (19.642374, 41.57348, 19.642374), (15.432914, 41.57348, 23.096987), (19.642374, 35.35534, 29.396889), (19.642374, 35.35534, 29.396889), (15.432914, 41.57348, 23.096987), (10.630376, 41.57348, 25.664), (13.529902, 35.35534, 32.664074), (13.529902, 35.35534, 32.664074), (10.630376, 41.57348, 25.664), (5.4193187, 41.57348, 27.244755), (6.8974843, 35.35534, 34.676), (6.8974843, 35.35534, 34.676), (5.4193187, 41.57348, 27.244755), (1.7009433e-15, 41.57348, 27.778513), (2.1648902e-15, 35.35534, 35.35534), (2.1648902e-15, 35.35534, 35.35534), (1.7009433e-15, 41.57348, 27.778513), (-5.4193187, 41.57348, 27.244755), (-6.8974843, 35.35534, 34.676), (-6.8974843, 35.35534, 34.676), (-5.4193187, 41.57348, 27.244755), (-10.630376, 41.57348, 25.664), (-13.529902, 35.35534, 32.664074), (-13.529902, 35.35534, 32.664074), (-10.630376, 41.57348, 25.664), (-15.432914, 41.57348, 23.096987), (-19.642374, 35.35534, 29.396889), (-19.642374, 35.35534, 29.396889), (-15.432914, 41.57348, 23.096987), (-19.642374, 41.57348, 19.642374), (-25, 35.35534, 25), (-25, 35.35534, 25), (-19.642374, 41.57348, 19.642374), (-23.096987, 41.57348, 15.432914), (-29.396889, 35.35534, 19.642374), (-29.396889, 35.35534, 19.642374), (-23.096987, 41.57348, 15.432914), (-25.664, 41.57348, 10.630376), (-32.664074, 35.35534, 13.529902), (-32.664074, 35.35534, 13.529902), (-25.664, 41.57348, 10.630376), (-27.244755, 41.57348, 5.4193187), (-34.676, 35.35534, 6.8974843), (-34.676, 35.35534, 6.8974843), (-27.244755, 41.57348, 5.4193187), (-27.778513, 41.57348, 3.4018865e-15), (-35.35534, 35.35534, 4.3297804e-15), (-35.35534, 35.35534, 4.3297804e-15), (-27.778513, 41.57348, 3.4018865e-15), (-27.244755, 41.57348, -5.4193187), (-34.676, 35.35534, -6.8974843), (-34.676, 35.35534, -6.8974843), (-27.244755, 41.57348, -5.4193187), (-25.664, 41.57348, -10.630376), (-32.664074, 35.35534, -13.529902), (-32.664074, 35.35534, -13.529902), (-25.664, 41.57348, -10.630376), (-23.096987, 41.57348, -15.432914), (-29.396889, 35.35534, -19.642374), (-29.396889, 35.35534, -19.642374), (-23.096987, 41.57348, -15.432914), (-19.642374, 41.57348, -19.642374), (-25, 35.35534, -25), (-25, 35.35534, -25), (-19.642374, 41.57348, -19.642374), (-15.432914, 41.57348, -23.096987), (-19.642374, 35.35534, -29.396889), (-19.642374, 35.35534, -29.396889), (-15.432914, 41.57348, -23.096987), (-10.630376, 41.57348, -25.664), (-13.529902, 35.35534, -32.664074), (-13.529902, 35.35534, -32.664074), (-10.630376, 41.57348, -25.664), (-5.4193187, 41.57348, -27.244755), (-6.8974843, 35.35534, -34.676), (-6.8974843, 35.35534, -34.676), (-5.4193187, 41.57348, -27.244755), (-5.1028297e-15, 41.57348, -27.778513), (-6.49467e-15, 35.35534, -35.35534), (-6.49467e-15, 35.35534, -35.35534), (-5.1028297e-15, 41.57348, -27.778513), (5.4193187, 41.57348, -27.244755), (6.8974843, 35.35534, -34.676), (6.8974843, 35.35534, -34.676), (5.4193187, 41.57348, -27.244755), (10.630376, 41.57348, -25.664), (13.529902, 35.35534, -32.664074), (13.529902, 35.35534, -32.664074), (10.630376, 41.57348, -25.664), (15.432914, 41.57348, -23.096987), (19.642374, 35.35534, -29.396889), (19.642374, 35.35534, -29.396889), (15.432914, 41.57348, -23.096987), (19.642374, 41.57348, -19.642374), (25, 35.35534, -25), (25, 35.35534, -25), (19.642374, 41.57348, -19.642374), (23.096987, 41.57348, -15.432914), (29.396889, 35.35534, -19.642374), (29.396889, 35.35534, -19.642374), (23.096987, 41.57348, -15.432914), (25.664, 41.57348, -10.630376), (32.664074, 35.35534, -13.529902), (32.664074, 35.35534, -13.529902), (25.664, 41.57348, -10.630376), (27.244755, 41.57348, -5.4193187), (34.676, 35.35534, -6.8974843), (34.676, 35.35534, -6.8974843), (27.244755, 41.57348, -5.4193187), (27.778513, 41.57348, 0), (35.35534, 35.35534, 0), (27.778513, 41.57348, 0), (19.13417, 46.193974, 0), (18.766514, 46.193974, 3.7328918), (27.244755, 41.57348, 5.4193187), (27.244755, 41.57348, 5.4193187), (18.766514, 46.193974, 3.7328918), (17.67767, 46.193974, 7.322331), (25.664, 41.57348, 10.630376), (25.664, 41.57348, 10.630376), (17.67767, 46.193974, 7.322331), (15.909483, 46.193974, 10.630376), (23.096987, 41.57348, 15.432914), (23.096987, 41.57348, 15.432914), (15.909483, 46.193974, 10.630376), (13.529902, 46.193974, 13.529902), (19.642374, 41.57348, 19.642374), (19.642374, 41.57348, 19.642374), (13.529902, 46.193974, 13.529902), (10.630376, 46.193974, 15.909483), (15.432914, 41.57348, 23.096987), (15.432914, 41.57348, 23.096987), (10.630376, 46.193974, 15.909483), (7.322331, 46.193974, 17.67767), (10.630376, 41.57348, 25.664), (10.630376, 41.57348, 25.664), (7.322331, 46.193974, 17.67767), (3.7328918, 46.193974, 18.766514), (5.4193187, 41.57348, 27.244755), (5.4193187, 41.57348, 27.244755), (3.7328918, 46.193974, 18.766514), (1.1716302e-15, 46.193974, 19.13417), (1.7009433e-15, 41.57348, 27.778513), (1.7009433e-15, 41.57348, 27.778513), (1.1716302e-15, 46.193974, 19.13417), (-3.7328918, 46.193974, 18.766514), (-5.4193187, 41.57348, 27.244755), (-5.4193187, 41.57348, 27.244755), (-3.7328918, 46.193974, 18.766514), (-7.322331, 46.193974, 17.67767), (-10.630376, 41.57348, 25.664), (-10.630376, 41.57348, 25.664), (-7.322331, 46.193974, 17.67767), (-10.630376, 46.193974, 15.909483), (-15.432914, 41.57348, 23.096987), (-15.432914, 41.57348, 23.096987), (-10.630376, 46.193974, 15.909483), (-13.529902, 46.193974, 13.529902), (-19.642374, 41.57348, 19.642374), (-19.642374, 41.57348, 19.642374), (-13.529902, 46.193974, 13.529902), (-15.909483, 46.193974, 10.630376), (-23.096987, 41.57348, 15.432914), (-23.096987, 41.57348, 15.432914), (-15.909483, 46.193974, 10.630376), (-17.67767, 46.193974, 7.322331), (-25.664, 41.57348, 10.630376), (-25.664, 41.57348, 10.630376), (-17.67767, 46.193974, 7.322331), (-18.766514, 46.193974, 3.7328918), (-27.244755, 41.57348, 5.4193187), (-27.244755, 41.57348, 5.4193187), (-18.766514, 46.193974, 3.7328918), (-19.13417, 46.193974, 2.3432603e-15), (-27.778513, 41.57348, 3.4018865e-15), (-27.778513, 41.57348, 3.4018865e-15), (-19.13417, 46.193974, 2.3432603e-15), (-18.766514, 46.193974, -3.7328918), (-27.244755, 41.57348, -5.4193187), (-27.244755, 41.57348, -5.4193187), (-18.766514, 46.193974, -3.7328918), (-17.67767, 46.193974, -7.322331), (-25.664, 41.57348, -10.630376), (-25.664, 41.57348, -10.630376), (-17.67767, 46.193974, -7.322331), (-15.909483, 46.193974, -10.630376), (-23.096987, 41.57348, -15.432914), (-23.096987, 41.57348, -15.432914), (-15.909483, 46.193974, -10.630376), (-13.529902, 46.193974, -13.529902), (-19.642374, 41.57348, -19.642374), (-19.642374, 41.57348, -19.642374), (-13.529902, 46.193974, -13.529902), (-10.630376, 46.193974, -15.909483), (-15.432914, 41.57348, -23.096987), (-15.432914, 41.57348, -23.096987), (-10.630376, 46.193974, -15.909483), (-7.322331, 46.193974, -17.67767), (-10.630376, 41.57348, -25.664), (-10.630376, 41.57348, -25.664), (-7.322331, 46.193974, -17.67767), (-3.7328918, 46.193974, -18.766514), (-5.4193187, 41.57348, -27.244755), (-5.4193187, 41.57348, -27.244755), (-3.7328918, 46.193974, -18.766514), (-3.5148903e-15, 46.193974, -19.13417), (-5.1028297e-15, 41.57348, -27.778513), (-5.1028297e-15, 41.57348, -27.778513), (-3.5148903e-15, 46.193974, -19.13417), (3.7328918, 46.193974, -18.766514), (5.4193187, 41.57348, -27.244755), (5.4193187, 41.57348, -27.244755), (3.7328918, 46.193974, -18.766514), (7.322331, 46.193974, -17.67767), (10.630376, 41.57348, -25.664), (10.630376, 41.57348, -25.664), (7.322331, 46.193974, -17.67767), (10.630376, 46.193974, -15.909483), (15.432914, 41.57348, -23.096987), (15.432914, 41.57348, -23.096987), (10.630376, 46.193974, -15.909483), (13.529902, 46.193974, -13.529902), (19.642374, 41.57348, -19.642374), (19.642374, 41.57348, -19.642374), (13.529902, 46.193974, -13.529902), (15.909483, 46.193974, -10.630376), (23.096987, 41.57348, -15.432914), (23.096987, 41.57348, -15.432914), (15.909483, 46.193974, -10.630376), (17.67767, 46.193974, -7.322331), (25.664, 41.57348, -10.630376), (25.664, 41.57348, -10.630376), (17.67767, 46.193974, -7.322331), (18.766514, 46.193974, -3.7328918), (27.244755, 41.57348, -5.4193187), (27.244755, 41.57348, -5.4193187), (18.766514, 46.193974, -3.7328918), (19.13417, 46.193974, 0), (27.778513, 41.57348, 0), (19.13417, 46.193974, 0), (9.754517, 49.03926, 0), (9.567085, 49.03926, 1.9030117), (18.766514, 46.193974, 3.7328918), (18.766514, 46.193974, 3.7328918), (9.567085, 49.03926, 1.9030117), (9.011998, 49.03926, 3.7328918), (17.67767, 46.193974, 7.322331), (17.67767, 46.193974, 7.322331), (9.011998, 49.03926, 3.7328918), (8.110583, 49.03926, 5.4193187), (15.909483, 46.193974, 10.630376), (15.909483, 46.193974, 10.630376), (8.110583, 49.03926, 5.4193187), (6.8974843, 49.03926, 6.8974843), (13.529902, 46.193974, 13.529902), (13.529902, 46.193974, 13.529902), (6.8974843, 49.03926, 6.8974843), (5.4193187, 49.03926, 8.110583), (10.630376, 46.193974, 15.909483), (10.630376, 46.193974, 15.909483), (5.4193187, 49.03926, 8.110583), (3.7328918, 49.03926, 9.011998), (7.322331, 46.193974, 17.67767), (7.322331, 46.193974, 17.67767), (3.7328918, 49.03926, 9.011998), (1.9030117, 49.03926, 9.567085), (3.7328918, 46.193974, 18.766514), (3.7328918, 46.193974, 18.766514), (1.9030117, 49.03926, 9.567085), (5.9729185e-16, 49.03926, 9.754517), (1.1716302e-15, 46.193974, 19.13417), (1.1716302e-15, 46.193974, 19.13417), (5.9729185e-16, 49.03926, 9.754517), (-1.9030117, 49.03926, 9.567085), (-3.7328918, 46.193974, 18.766514), (-3.7328918, 46.193974, 18.766514), (-1.9030117, 49.03926, 9.567085), (-3.7328918, 49.03926, 9.011998), (-7.322331, 46.193974, 17.67767), (-7.322331, 46.193974, 17.67767), (-3.7328918, 49.03926, 9.011998), (-5.4193187, 49.03926, 8.110583), (-10.630376, 46.193974, 15.909483), (-10.630376, 46.193974, 15.909483), (-5.4193187, 49.03926, 8.110583), (-6.8974843, 49.03926, 6.8974843), (-13.529902, 46.193974, 13.529902), (-13.529902, 46.193974, 13.529902), (-6.8974843, 49.03926, 6.8974843), (-8.110583, 49.03926, 5.4193187), (-15.909483, 46.193974, 10.630376), (-15.909483, 46.193974, 10.630376), (-8.110583, 49.03926, 5.4193187), (-9.011998, 49.03926, 3.7328918), (-17.67767, 46.193974, 7.322331), (-17.67767, 46.193974, 7.322331), (-9.011998, 49.03926, 3.7328918), (-9.567085, 49.03926, 1.9030117), (-18.766514, 46.193974, 3.7328918), (-18.766514, 46.193974, 3.7328918), (-9.567085, 49.03926, 1.9030117), (-9.754517, 49.03926, 1.1945837e-15), (-19.13417, 46.193974, 2.3432603e-15), (-19.13417, 46.193974, 2.3432603e-15), (-9.754517, 49.03926, 1.1945837e-15), (-9.567085, 49.03926, -1.9030117), (-18.766514, 46.193974, -3.7328918), (-18.766514, 46.193974, -3.7328918), (-9.567085, 49.03926, -1.9030117), (-9.011998, 49.03926, -3.7328918), (-17.67767, 46.193974, -7.322331), (-17.67767, 46.193974, -7.322331), (-9.011998, 49.03926, -3.7328918), (-8.110583, 49.03926, -5.4193187), (-15.909483, 46.193974, -10.630376), (-15.909483, 46.193974, -10.630376), (-8.110583, 49.03926, -5.4193187), (-6.8974843, 49.03926, -6.8974843), (-13.529902, 46.193974, -13.529902), (-13.529902, 46.193974, -13.529902), (-6.8974843, 49.03926, -6.8974843), (-5.4193187, 49.03926, -8.110583), (-10.630376, 46.193974, -15.909483), (-10.630376, 46.193974, -15.909483), (-5.4193187, 49.03926, -8.110583), (-3.7328918, 49.03926, -9.011998), (-7.322331, 46.193974, -17.67767), (-7.322331, 46.193974, -17.67767), (-3.7328918, 49.03926, -9.011998), (-1.9030117, 49.03926, -9.567085), (-3.7328918, 46.193974, -18.766514), (-3.7328918, 46.193974, -18.766514), (-1.9030117, 49.03926, -9.567085), (-1.7918755e-15, 49.03926, -9.754517), (-3.5148903e-15, 46.193974, -19.13417), (-3.5148903e-15, 46.193974, -19.13417), (-1.7918755e-15, 49.03926, -9.754517), (1.9030117, 49.03926, -9.567085), (3.7328918, 46.193974, -18.766514), (3.7328918, 46.193974, -18.766514), (1.9030117, 49.03926, -9.567085), (3.7328918, 49.03926, -9.011998), (7.322331, 46.193974, -17.67767), (7.322331, 46.193974, -17.67767), (3.7328918, 49.03926, -9.011998), (5.4193187, 49.03926, -8.110583), (10.630376, 46.193974, -15.909483), (10.630376, 46.193974, -15.909483), (5.4193187, 49.03926, -8.110583), (6.8974843, 49.03926, -6.8974843), (13.529902, 46.193974, -13.529902), (13.529902, 46.193974, -13.529902), (6.8974843, 49.03926, -6.8974843), (8.110583, 49.03926, -5.4193187), (15.909483, 46.193974, -10.630376), (15.909483, 46.193974, -10.630376), (8.110583, 49.03926, -5.4193187), (9.011998, 49.03926, -3.7328918), (17.67767, 46.193974, -7.322331), (17.67767, 46.193974, -7.322331), (9.011998, 49.03926, -3.7328918), (9.567085, 49.03926, -1.9030117), (18.766514, 46.193974, -3.7328918), (18.766514, 46.193974, -3.7328918), (9.567085, 49.03926, -1.9030117), (9.754517, 49.03926, 0), (19.13417, 46.193974, 0), (9.754517, 49.03926, 0), (0, 50, 0), (9.567085, 49.03926, 1.9030117), (9.567085, 49.03926, 1.9030117), (0, 50, 0), (9.011998, 49.03926, 3.7328918), (9.011998, 49.03926, 3.7328918), (0, 50, 0), (8.110583, 49.03926, 5.4193187), (8.110583, 49.03926, 5.4193187), (0, 50, 0), (6.8974843, 49.03926, 6.8974843), (6.8974843, 49.03926, 6.8974843), (0, 50, 0), (5.4193187, 49.03926, 8.110583), (5.4193187, 49.03926, 8.110583), (0, 50, 0), (3.7328918, 49.03926, 9.011998), (3.7328918, 49.03926, 9.011998), (0, 50, 0), (1.9030117, 49.03926, 9.567085), (1.9030117, 49.03926, 9.567085), (0, 50, 0), (5.9729185e-16, 49.03926, 9.754517), (5.9729185e-16, 49.03926, 9.754517), (0, 50, 0), (-1.9030117, 49.03926, 9.567085), (-1.9030117, 49.03926, 9.567085), (0, 50, 0), (-3.7328918, 49.03926, 9.011998), (-3.7328918, 49.03926, 9.011998), (0, 50, 0), (-5.4193187, 49.03926, 8.110583), (-5.4193187, 49.03926, 8.110583), (0, 50, 0), (-6.8974843, 49.03926, 6.8974843), (-6.8974843, 49.03926, 6.8974843), (0, 50, 0), (-8.110583, 49.03926, 5.4193187), (-8.110583, 49.03926, 5.4193187), (0, 50, 0), (-9.011998, 49.03926, 3.7328918), (-9.011998, 49.03926, 3.7328918), (0, 50, 0), (-9.567085, 49.03926, 1.9030117), (-9.567085, 49.03926, 1.9030117), (0, 50, 0), (-9.754517, 49.03926, 1.1945837e-15), (-9.754517, 49.03926, 1.1945837e-15), (0, 50, 0), (-9.567085, 49.03926, -1.9030117), (-9.567085, 49.03926, -1.9030117), (0, 50, 0), (-9.011998, 49.03926, -3.7328918), (-9.011998, 49.03926, -3.7328918), (0, 50, 0), (-8.110583, 49.03926, -5.4193187), (-8.110583, 49.03926, -5.4193187), (0, 50, 0), (-6.8974843, 49.03926, -6.8974843), (-6.8974843, 49.03926, -6.8974843), (0, 50, 0), (-5.4193187, 49.03926, -8.110583), (-5.4193187, 49.03926, -8.110583), (0, 50, 0), (-3.7328918, 49.03926, -9.011998), (-3.7328918, 49.03926, -9.011998), (0, 50, 0), (-1.9030117, 49.03926, -9.567085), (-1.9030117, 49.03926, -9.567085), (0, 50, 0), (-1.7918755e-15, 49.03926, -9.754517), (-1.7918755e-15, 49.03926, -9.754517), (0, 50, 0), (1.9030117, 49.03926, -9.567085), (1.9030117, 49.03926, -9.567085), (0, 50, 0), (3.7328918, 49.03926, -9.011998), (3.7328918, 49.03926, -9.011998), (0, 50, 0), (5.4193187, 49.03926, -8.110583), (5.4193187, 49.03926, -8.110583), (0, 50, 0), (6.8974843, 49.03926, -6.8974843), (6.8974843, 49.03926, -6.8974843), (0, 50, 0), (8.110583, 49.03926, -5.4193187), (8.110583, 49.03926, -5.4193187), (0, 50, 0), (9.011998, 49.03926, -3.7328918), (9.011998, 49.03926, -3.7328918), (0, 50, 0), (9.567085, 49.03926, -1.9030117), (9.567085, 49.03926, -1.9030117), (0, 50, 0), (9.754517, 49.03926, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(0, -50, 0), (9.754517, -49.03926, 0), (9.567085, -49.03926, 1.9030117), (9.011998, -49.03926, 3.7328918), (8.110583, -49.03926, 5.4193187), (6.8974843, -49.03926, 6.8974843), (5.4193187, -49.03926, 8.110583), (3.7328918, -49.03926, 9.011998), (1.9030117, -49.03926, 9.567085), (5.9729185e-16, -49.03926, 9.754517), (-1.9030117, -49.03926, 9.567085), (-3.7328918, -49.03926, 9.011998), (-5.4193187, -49.03926, 8.110583), (-6.8974843, -49.03926, 6.8974843), (-8.110583, -49.03926, 5.4193187), (-9.011998, -49.03926, 3.7328918), (-9.567085, -49.03926, 1.9030117), (-9.754517, -49.03926, 1.1945837e-15), (-9.567085, -49.03926, -1.9030117), (-9.011998, -49.03926, -3.7328918), (-8.110583, -49.03926, -5.4193187), (-6.8974843, -49.03926, -6.8974843), (-5.4193187, -49.03926, -8.110583), (-3.7328918, -49.03926, -9.011998), (-1.9030117, -49.03926, -9.567085), (-1.7918755e-15, -49.03926, -9.754517), (1.9030117, -49.03926, -9.567085), (3.7328918, -49.03926, -9.011998), (5.4193187, -49.03926, -8.110583), (6.8974843, -49.03926, -6.8974843), (8.110583, -49.03926, -5.4193187), (9.011998, -49.03926, -3.7328918), (9.567085, -49.03926, -1.9030117), (19.13417, -46.193974, 0), (18.766514, -46.193974, 3.7328918), (17.67767, -46.193974, 7.322331), (15.909483, -46.193974, 10.630376), (13.529902, -46.193974, 13.529902), (10.630376, -46.193974, 15.909483), (7.322331, -46.193974, 17.67767), (3.7328918, -46.193974, 18.766514), (1.1716302e-15, -46.193974, 19.13417), (-3.7328918, -46.193974, 18.766514), (-7.322331, -46.193974, 17.67767), (-10.630376, -46.193974, 15.909483), (-13.529902, -46.193974, 13.529902), (-15.909483, -46.193974, 10.630376), (-17.67767, -46.193974, 7.322331), (-18.766514, -46.193974, 3.7328918), (-19.13417, -46.193974, 2.3432603e-15), (-18.766514, -46.193974, -3.7328918), (-17.67767, -46.193974, -7.322331), (-15.909483, -46.193974, -10.630376), (-13.529902, -46.193974, -13.529902), (-10.630376, -46.193974, -15.909483), (-7.322331, -46.193974, -17.67767), (-3.7328918, -46.193974, -18.766514), (-3.5148903e-15, -46.193974, -19.13417), (3.7328918, -46.193974, -18.766514), (7.322331, -46.193974, -17.67767), (10.630376, -46.193974, -15.909483), (13.529902, -46.193974, -13.529902), (15.909483, -46.193974, -10.630376), (17.67767, -46.193974, -7.322331), (18.766514, -46.193974, -3.7328918), (27.778513, -41.57348, 0), (27.244755, -41.57348, 5.4193187), (25.664, -41.57348, 10.630376), (23.096987, -41.57348, 15.432914), (19.642374, -41.57348, 19.642374), (15.432914, -41.57348, 23.096987), (10.630376, -41.57348, 25.664), (5.4193187, -41.57348, 27.244755), (1.7009433e-15, -41.57348, 27.778513), (-5.4193187, -41.57348, 27.244755), (-10.630376, -41.57348, 25.664), (-15.432914, -41.57348, 23.096987), (-19.642374, -41.57348, 19.642374), (-23.096987, -41.57348, 15.432914), (-25.664, -41.57348, 10.630376), (-27.244755, -41.57348, 5.4193187), (-27.778513, -41.57348, 3.4018865e-15), (-27.244755, -41.57348, -5.4193187), (-25.664, -41.57348, -10.630376), (-23.096987, -41.57348, -15.432914), (-19.642374, -41.57348, -19.642374), (-15.432914, -41.57348, -23.096987), (-10.630376, -41.57348, -25.664), (-5.4193187, -41.57348, -27.244755), (-5.1028297e-15, -41.57348, -27.778513), (5.4193187, -41.57348, -27.244755), (10.630376, -41.57348, -25.664), (15.432914, -41.57348, -23.096987), (19.642374, -41.57348, -19.642374), (23.096987, -41.57348, -15.432914), (25.664, -41.57348, -10.630376), (27.244755, -41.57348, -5.4193187), (35.35534, -35.35534, 0), (34.676, -35.35534, 6.8974843), (32.664074, -35.35534, 13.529902), (29.396889, -35.35534, 19.642374), (25, -35.35534, 25), (19.642374, -35.35534, 29.396889), (13.529902, -35.35534, 32.664074), (6.8974843, -35.35534, 34.676), (2.1648902e-15, -35.35534, 35.35534), (-6.8974843, -35.35534, 34.676), (-13.529902, -35.35534, 32.664074), (-19.642374, -35.35534, 29.396889), (-25, -35.35534, 25), (-29.396889, -35.35534, 19.642374), (-32.664074, -35.35534, 13.529902), (-34.676, -35.35534, 6.8974843), (-35.35534, -35.35534, 4.3297804e-15), (-34.676, -35.35534, -6.8974843), (-32.664074, -35.35534, -13.529902), (-29.396889, -35.35534, -19.642374), (-25, -35.35534, -25), (-19.642374, -35.35534, -29.396889), (-13.529902, -35.35534, -32.664074), (-6.8974843, -35.35534, -34.676), (-6.49467e-15, -35.35534, -35.35534), (6.8974843, -35.35534, -34.676), (13.529902, -35.35534, -32.664074), (19.642374, -35.35534, -29.396889), (25, -35.35534, -25), (29.396889, -35.35534, -19.642374), (32.664074, -35.35534, -13.529902), (34.676, -35.35534, -6.8974843), (41.57348, -27.778513, 0), (40.77466, -27.778513, 8.110583), (38.408886, -27.778513, 15.909483), (34.567085, -27.778513, 23.096987), (29.396889, -27.778513, 29.396889), (23.096987, -27.778513, 34.567085), (15.909483, -27.778513, 38.408886), (8.110583, -27.778513, 40.77466), (2.5456415e-15, -27.778513, 41.57348), (-8.110583, -27.778513, 40.77466), (-15.909483, -27.778513, 38.408886), (-23.096987, -27.778513, 34.567085), (-29.396889, -27.778513, 29.396889), (-34.567085, -27.778513, 23.096987), (-38.408886, -27.778513, 15.909483), (-40.77466, -27.778513, 8.110583), (-41.57348, -27.778513, 5.091283e-15), (-40.77466, -27.778513, -8.110583), (-38.408886, -27.778513, -15.909483), (-34.567085, -27.778513, -23.096987), (-29.396889, -27.778513, -29.396889), (-23.096987, -27.778513, -34.567085), (-15.909483, -27.778513, -38.408886), (-8.110583, -27.778513, -40.77466), (-7.6369244e-15, -27.778513, -41.57348), (8.110583, -27.778513, -40.77466), (15.909483, -27.778513, -38.408886), (23.096987, -27.778513, -34.567085), (29.396889, -27.778513, -29.396889), (34.567085, -27.778513, -23.096987), (38.408886, -27.778513, -15.909483), (40.77466, -27.778513, -8.110583), (46.193974, -19.13417, 0), (45.306374, -19.13417, 9.011998), (42.67767, -19.13417, 17.67767), (38.408886, -19.13417, 25.664), (32.664074, -19.13417, 32.664074), (25.664, -19.13417, 38.408886), (17.67767, -19.13417, 42.67767), (9.011998, -19.13417, 45.306374), (2.8285653e-15, -19.13417, 46.193974), (-9.011998, -19.13417, 45.306374), (-17.67767, -19.13417, 42.67767), (-25.664, -19.13417, 38.408886), (-32.664074, -19.13417, 32.664074), (-38.408886, -19.13417, 25.664), (-42.67767, -19.13417, 17.67767), (-45.306374, -19.13417, 9.011998), (-46.193974, -19.13417, 5.6571306e-15), (-45.306374, -19.13417, -9.011998), (-42.67767, -19.13417, -17.67767), (-38.408886, -19.13417, -25.664), (-32.664074, -19.13417, -32.664074), (-25.664, -19.13417, -38.408886), (-17.67767, -19.13417, -42.67767), (-9.011998, -19.13417, -45.306374), (-8.4856955e-15, -19.13417, -46.193974), (9.011998, -19.13417, -45.306374), (17.67767, -19.13417, -42.67767), (25.664, -19.13417, -38.408886), (32.664074, -19.13417, -32.664074), (38.408886, -19.13417, -25.664), (42.67767, -19.13417, -17.67767), (45.306374, -19.13417, -9.011998), (49.03926, -9.754517, 0), (48.09699, -9.754517, 9.567085), (45.306374, -9.754517, 18.766514), (40.77466, -9.754517, 27.244755), (34.676, -9.754517, 34.676), (27.244755, -9.754517, 40.77466), (18.766514, -9.754517, 45.306374), (9.567085, -9.754517, 48.09699), (3.002789e-15, -9.754517, 49.03926), (-9.567085, -9.754517, 48.09699), (-18.766514, -9.754517, 45.306374), (-27.244755, -9.754517, 40.77466), (-34.676, -9.754517, 34.676), (-40.77466, -9.754517, 27.244755), (-45.306374, -9.754517, 18.766514), (-48.09699, -9.754517, 9.567085), (-49.03926, -9.754517, 6.005578e-15), (-48.09699, -9.754517, -9.567085), (-45.306374, -9.754517, -18.766514), (-40.77466, -9.754517, -27.244755), (-34.676, -9.754517, -34.676), (-27.244755, -9.754517, -40.77466), (-18.766514, -9.754517, -45.306374), (-9.567085, -9.754517, -48.09699), (-9.0083665e-15, -9.754517, -49.03926), (9.567085, -9.754517, -48.09699), (18.766514, -9.754517, -45.306374), (27.244755, -9.754517, -40.77466), (34.676, -9.754517, -34.676), (40.77466, -9.754517, -27.244755), (45.306374, -9.754517, -18.766514), (48.09699, -9.754517, -9.567085), (50, 0, 0), (49.03926, 0, 9.754517), (46.193974, 0, 19.13417), (41.57348, 0, 27.778513), (35.35534, 0, 35.35534), (27.778513, 0, 41.57348), (19.13417, 0, 46.193974), (9.754517, 0, 49.03926), (3.061617e-15, 0, 50), (-9.754517, 0, 49.03926), (-19.13417, 0, 46.193974), (-27.778513, 0, 41.57348), (-35.35534, 0, 35.35534), (-41.57348, 0, 27.778513), (-46.193974, 0, 19.13417), (-49.03926, 0, 9.754517), (-50, 0, 6.123234e-15), (-49.03926, 0, -9.754517), (-46.193974, 0, -19.13417), (-41.57348, 0, -27.778513), (-35.35534, 0, -35.35534), (-27.778513, 0, -41.57348), (-19.13417, 0, -46.193974), (-9.754517, 0, -49.03926), (-9.184851e-15, 0, -50), (9.754517, 0, -49.03926), (19.13417, 0, -46.193974), (27.778513, 0, -41.57348), (35.35534, 0, -35.35534), (41.57348, 0, -27.778513), (46.193974, 0, -19.13417), (49.03926, 0, -9.754517), (49.03926, 9.754517, 0), (48.09699, 9.754517, 9.567085), (45.306374, 9.754517, 18.766514), (40.77466, 9.754517, 27.244755), (34.676, 9.754517, 34.676), (27.244755, 9.754517, 40.77466), (18.766514, 9.754517, 45.306374), (9.567085, 9.754517, 48.09699), (3.002789e-15, 9.754517, 49.03926), (-9.567085, 9.754517, 48.09699), (-18.766514, 9.754517, 45.306374), (-27.244755, 9.754517, 40.77466), (-34.676, 9.754517, 34.676), (-40.77466, 9.754517, 27.244755), (-45.306374, 9.754517, 18.766514), (-48.09699, 9.754517, 9.567085), (-49.03926, 9.754517, 6.005578e-15), (-48.09699, 9.754517, -9.567085), (-45.306374, 9.754517, -18.766514), (-40.77466, 9.754517, -27.244755), (-34.676, 9.754517, -34.676), (-27.244755, 9.754517, -40.77466), (-18.766514, 9.754517, -45.306374), (-9.567085, 9.754517, -48.09699), (-9.0083665e-15, 9.754517, -49.03926), (9.567085, 9.754517, -48.09699), (18.766514, 9.754517, -45.306374), (27.244755, 9.754517, -40.77466), (34.676, 9.754517, -34.676), (40.77466, 9.754517, -27.244755), (45.306374, 9.754517, -18.766514), (48.09699, 9.754517, -9.567085), (46.193974, 19.13417, 0), (45.306374, 19.13417, 9.011998), (42.67767, 19.13417, 17.67767), (38.408886, 19.13417, 25.664), (32.664074, 19.13417, 32.664074), (25.664, 19.13417, 38.408886), (17.67767, 19.13417, 42.67767), (9.011998, 19.13417, 45.306374), (2.8285653e-15, 19.13417, 46.193974), (-9.011998, 19.13417, 45.306374), (-17.67767, 19.13417, 42.67767), (-25.664, 19.13417, 38.408886), (-32.664074, 19.13417, 32.664074), (-38.408886, 19.13417, 25.664), (-42.67767, 19.13417, 17.67767), (-45.306374, 19.13417, 9.011998), (-46.193974, 19.13417, 5.6571306e-15), (-45.306374, 19.13417, -9.011998), (-42.67767, 19.13417, -17.67767), (-38.408886, 19.13417, -25.664), (-32.664074, 19.13417, -32.664074), (-25.664, 19.13417, -38.408886), (-17.67767, 19.13417, -42.67767), (-9.011998, 19.13417, -45.306374), (-8.4856955e-15, 19.13417, -46.193974), (9.011998, 19.13417, -45.306374), (17.67767, 19.13417, -42.67767), (25.664, 19.13417, -38.408886), (32.664074, 19.13417, -32.664074), (38.408886, 19.13417, -25.664), (42.67767, 19.13417, -17.67767), (45.306374, 19.13417, -9.011998), (41.57348, 27.778513, 0), (40.77466, 27.778513, 8.110583), (38.408886, 27.778513, 15.909483), (34.567085, 27.778513, 23.096987), (29.396889, 27.778513, 29.396889), (23.096987, 27.778513, 34.567085), (15.909483, 27.778513, 38.408886), (8.110583, 27.778513, 40.77466), (2.5456415e-15, 27.778513, 41.57348), (-8.110583, 27.778513, 40.77466), (-15.909483, 27.778513, 38.408886), (-23.096987, 27.778513, 34.567085), (-29.396889, 27.778513, 29.396889), (-34.567085, 27.778513, 23.096987), (-38.408886, 27.778513, 15.909483), (-40.77466, 27.778513, 8.110583), (-41.57348, 27.778513, 5.091283e-15), (-40.77466, 27.778513, -8.110583), (-38.408886, 27.778513, -15.909483), (-34.567085, 27.778513, -23.096987), (-29.396889, 27.778513, -29.396889), (-23.096987, 27.778513, -34.567085), (-15.909483, 27.778513, -38.408886), (-8.110583, 27.778513, -40.77466), (-7.6369244e-15, 27.778513, -41.57348), (8.110583, 27.778513, -40.77466), (15.909483, 27.778513, -38.408886), (23.096987, 27.778513, -34.567085), (29.396889, 27.778513, -29.396889), (34.567085, 27.778513, -23.096987), (38.408886, 27.778513, -15.909483), (40.77466, 27.778513, -8.110583), (35.35534, 35.35534, 0), (34.676, 35.35534, 6.8974843), (32.664074, 35.35534, 13.529902), (29.396889, 35.35534, 19.642374), (25, 35.35534, 25), (19.642374, 35.35534, 29.396889), (13.529902, 35.35534, 32.664074), (6.8974843, 35.35534, 34.676), (2.1648902e-15, 35.35534, 35.35534), (-6.8974843, 35.35534, 34.676), (-13.529902, 35.35534, 32.664074), (-19.642374, 35.35534, 29.396889), (-25, 35.35534, 25), (-29.396889, 35.35534, 19.642374), (-32.664074, 35.35534, 13.529902), (-34.676, 35.35534, 6.8974843), (-35.35534, 35.35534, 4.3297804e-15), (-34.676, 35.35534, -6.8974843), (-32.664074, 35.35534, -13.529902), (-29.396889, 35.35534, -19.642374), (-25, 35.35534, -25), (-19.642374, 35.35534, -29.396889), (-13.529902, 35.35534, -32.664074), (-6.8974843, 35.35534, -34.676), (-6.49467e-15, 35.35534, -35.35534), (6.8974843, 35.35534, -34.676), (13.529902, 35.35534, -32.664074), (19.642374, 35.35534, -29.396889), (25, 35.35534, -25), (29.396889, 35.35534, -19.642374), (32.664074, 35.35534, -13.529902), (34.676, 35.35534, -6.8974843), (27.778513, 41.57348, 0), (27.244755, 41.57348, 5.4193187), (25.664, 41.57348, 10.630376), (23.096987, 41.57348, 15.432914), (19.642374, 41.57348, 19.642374), (15.432914, 41.57348, 23.096987), (10.630376, 41.57348, 25.664), (5.4193187, 41.57348, 27.244755), (1.7009433e-15, 41.57348, 27.778513), (-5.4193187, 41.57348, 27.244755), (-10.630376, 41.57348, 25.664), (-15.432914, 41.57348, 23.096987), (-19.642374, 41.57348, 19.642374), (-23.096987, 41.57348, 15.432914), (-25.664, 41.57348, 10.630376), (-27.244755, 41.57348, 5.4193187), (-27.778513, 41.57348, 3.4018865e-15), (-27.244755, 41.57348, -5.4193187), (-25.664, 41.57348, -10.630376), (-23.096987, 41.57348, -15.432914), (-19.642374, 41.57348, -19.642374), (-15.432914, 41.57348, -23.096987), (-10.630376, 41.57348, -25.664), (-5.4193187, 41.57348, -27.244755), (-5.1028297e-15, 41.57348, -27.778513), (5.4193187, 41.57348, -27.244755), (10.630376, 41.57348, -25.664), (15.432914, 41.57348, -23.096987), (19.642374, 41.57348, -19.642374), (23.096987, 41.57348, -15.432914), (25.664, 41.57348, -10.630376), (27.244755, 41.57348, -5.4193187), (19.13417, 46.193974, 0), (18.766514, 46.193974, 3.7328918), (17.67767, 46.193974, 7.322331), (15.909483, 46.193974, 10.630376), (13.529902, 46.193974, 13.529902), (10.630376, 46.193974, 15.909483), (7.322331, 46.193974, 17.67767), (3.7328918, 46.193974, 18.766514), (1.1716302e-15, 46.193974, 19.13417), (-3.7328918, 46.193974, 18.766514), (-7.322331, 46.193974, 17.67767), (-10.630376, 46.193974, 15.909483), (-13.529902, 46.193974, 13.529902), (-15.909483, 46.193974, 10.630376), (-17.67767, 46.193974, 7.322331), (-18.766514, 46.193974, 3.7328918), (-19.13417, 46.193974, 2.3432603e-15), (-18.766514, 46.193974, -3.7328918), (-17.67767, 46.193974, -7.322331), (-15.909483, 46.193974, -10.630376), (-13.529902, 46.193974, -13.529902), (-10.630376, 46.193974, -15.909483), (-7.322331, 46.193974, -17.67767), (-3.7328918, 46.193974, -18.766514), (-3.5148903e-15, 46.193974, -19.13417), (3.7328918, 46.193974, -18.766514), (7.322331, 46.193974, -17.67767), (10.630376, 46.193974, -15.909483), (13.529902, 46.193974, -13.529902), (15.909483, 46.193974, -10.630376), (17.67767, 46.193974, -7.322331), (18.766514, 46.193974, -3.7328918), (9.754517, 49.03926, 0), (9.567085, 49.03926, 1.9030117), (9.011998, 49.03926, 3.7328918), (8.110583, 49.03926, 5.4193187), (6.8974843, 49.03926, 6.8974843), (5.4193187, 49.03926, 8.110583), (3.7328918, 49.03926, 9.011998), (1.9030117, 49.03926, 9.567085), (5.9729185e-16, 49.03926, 9.754517), (-1.9030117, 49.03926, 9.567085), (-3.7328918, 49.03926, 9.011998), (-5.4193187, 49.03926, 8.110583), (-6.8974843, 49.03926, 6.8974843), (-8.110583, 49.03926, 5.4193187), (-9.011998, 49.03926, 3.7328918), (-9.567085, 49.03926, 1.9030117), (-9.754517, 49.03926, 1.1945837e-15), (-9.567085, 49.03926, -1.9030117), (-9.011998, 49.03926, -3.7328918), (-8.110583, 49.03926, -5.4193187), (-6.8974843, 49.03926, -6.8974843), (-5.4193187, 49.03926, -8.110583), (-3.7328918, 49.03926, -9.011998), (-1.9030117, 49.03926, -9.567085), (-1.7918755e-15, 49.03926, -9.754517), (1.9030117, 49.03926, -9.567085), (3.7328918, 49.03926, -9.011998), (5.4193187, 49.03926, -8.110583), (6.8974843, 49.03926, -6.8974843), (8.110583, 49.03926, -5.4193187), (9.011998, 49.03926, -3.7328918), (9.567085, 49.03926, -1.9030117), (0, 50, 0)]
        texCoord2f[] primvars:st = [(1, 0), (1, 0.0625), (0.96875, 0.0625), (0.96875, 0), (0.96875, 0.0625), (0.9375, 0.0625), (0.9375, 0), (0.9375, 0.0625), (0.90625, 0.0625), (0.90625, 0), (0.90625, 0.0625), (0.875, 0.0625), (0.875, 0), (0.875, 0.0625), (0.84375, 0.0625), (0.84375, 0), (0.84375, 0.0625), (0.8125, 0.0625), (0.8125, 0), (0.8125, 0.0625), (0.78125, 0.0625), (0.78125, 0), (0.78125, 0.0625), (0.75, 0.0625), (0.75, 0), (0.75, 0.0625), (0.71875, 0.0625), (0.71875, 0), (0.71875, 0.0625), (0.6875, 0.0625), (0.6875, 0), (0.6875, 0.0625), (0.65625, 0.0625), (0.65625, 0), (0.65625, 0.0625), (0.625, 0.0625), (0.625, 0), (0.625, 0.0625), (0.59375, 0.0625), (0.59375, 0), (0.59375, 0.0625), (0.5625, 0.0625), (0.5625, 0), (0.5625, 0.0625), (0.53125, 0.0625), (0.53125, 0), (0.53125, 0.0625), (0.5, 0.0625), (0.5, 0), (0.5, 0.0625), (0.46875, 0.0625), (0.46875, 0), (0.46875, 0.0625), (0.4375, 0.0625), (0.4375, 0), (0.4375, 0.0625), (0.40625, 0.0625), (0.40625, 0), (0.40625, 0.0625), (0.375, 0.0625), (0.375, 0), (0.375, 0.0625), (0.34375, 0.0625), (0.34375, 0), (0.34375, 0.0625), (0.3125, 0.0625), (0.3125, 0), (0.3125, 0.0625), (0.28125, 0.0625), (0.28125, 0), (0.28125, 0.0625), (0.25, 0.0625), (0.25, 0), (0.25, 0.0625), (0.21875, 0.0625), (0.21875, 0), (0.21875, 0.0625), (0.1875, 0.0625), (0.1875, 0), (0.1875, 0.0625), (0.15625, 0.0625), (0.15625, 0), (0.15625, 0.0625), (0.125, 0.0625), (0.125, 0), (0.125, 0.0625), (0.09375, 0.0625), (0.09375, 0), (0.09375, 0.0625), (0.0625, 0.0625), (0.0625, 0), (0.0625, 0.0625), (0.03125, 0.0625), (0.03125, 0), (0.03125, 0.0625), (0, 0.0625), (1, 0.0625), (1, 0.125), (0.96875, 0.125), (0.96875, 0.0625), (0.96875, 0.0625), (0.96875, 0.125), (0.9375, 0.125), (0.9375, 0.0625), (0.9375, 0.0625), (0.9375, 0.125), (0.90625, 0.125), (0.90625, 0.0625), (0.90625, 0.0625), (0.90625, 0.125), (0.875, 0.125), (0.875, 0.0625), (0.875, 0.0625), (0.875, 0.125), (0.84375, 0.125), (0.84375, 0.0625), (0.84375, 0.0625), (0.84375, 0.125), (0.8125, 0.125), (0.8125, 0.0625), (0.8125, 0.0625), (0.8125, 0.125), (0.78125, 0.125), (0.78125, 0.0625), (0.78125, 0.0625), (0.78125, 0.125), (0.75, 0.125), (0.75, 0.0625), (0.75, 0.0625), (0.75, 0.125), (0.71875, 0.125), (0.71875, 0.0625), (0.71875, 0.0625), (0.71875, 0.125), (0.6875, 0.125), (0.6875, 0.0625), (0.6875, 0.0625), (0.6875, 0.125), (0.65625, 0.125), (0.65625, 0.0625), (0.65625, 0.0625), (0.65625, 0.125), (0.625, 0.125), (0.625, 0.0625), (0.625, 0.0625), (0.625, 0.125), (0.59375, 0.125), (0.59375, 0.0625), (0.59375, 0.0625), (0.59375, 0.125), (0.5625, 0.125), (0.5625, 0.0625), (0.5625, 0.0625), (0.5625, 0.125), (0.53125, 0.125), (0.53125, 0.0625), (0.53125, 0.0625), (0.53125, 0.125), (0.5, 0.125), (0.5, 0.0625), (0.5, 0.0625), (0.5, 0.125), (0.46875, 0.125), (0.46875, 0.0625), (0.46875, 0.0625), (0.46875, 0.125), (0.4375, 0.125), (0.4375, 0.0625), (0.4375, 0.0625), (0.4375, 0.125), (0.40625, 0.125), (0.40625, 0.0625), (0.40625, 0.0625), (0.40625, 0.125), (0.375, 0.125), (0.375, 0.0625), (0.375, 0.0625), (0.375, 0.125), (0.34375, 0.125), (0.34375, 0.0625), (0.34375, 0.0625), (0.34375, 0.125), (0.3125, 0.125), (0.3125, 0.0625), (0.3125, 0.0625), (0.3125, 0.125), (0.28125, 0.125), (0.28125, 0.0625), (0.28125, 0.0625), (0.28125, 0.125), (0.25, 0.125), (0.25, 0.0625), (0.25, 0.0625), (0.25, 0.125), (0.21875, 0.125), (0.21875, 0.0625), (0.21875, 0.0625), (0.21875, 0.125), (0.1875, 0.125), (0.1875, 0.0625), (0.1875, 0.0625), (0.1875, 0.125), (0.15625, 0.125), (0.15625, 0.0625), (0.15625, 0.0625), (0.15625, 0.125), (0.125, 0.125), (0.125, 0.0625), (0.125, 0.0625), (0.125, 0.125), (0.09375, 0.125), (0.09375, 0.0625), (0.09375, 0.0625), (0.09375, 0.125), (0.0625, 0.125), (0.0625, 0.0625), (0.0625, 0.0625), (0.0625, 0.125), (0.03125, 0.125), (0.03125, 0.0625), (0.03125, 0.0625), (0.03125, 0.125), (0, 0.125), (0, 0.0625), (1, 0.125), (1, 0.1875), (0.96875, 0.1875), (0.96875, 0.125), (0.96875, 0.125), (0.96875, 0.1875), (0.9375, 0.1875), (0.9375, 0.125), (0.9375, 0.125), (0.9375, 0.1875), (0.90625, 0.1875), (0.90625, 0.125), (0.90625, 0.125), (0.90625, 0.1875), (0.875, 0.1875), (0.875, 0.125), (0.875, 0.125), (0.875, 0.1875), (0.84375, 0.1875), (0.84375, 0.125), (0.84375, 0.125), (0.84375, 0.1875), (0.8125, 0.1875), (0.8125, 0.125), (0.8125, 0.125), (0.8125, 0.1875), (0.78125, 0.1875), (0.78125, 0.125), (0.78125, 0.125), (0.78125, 0.1875), (0.75, 0.1875), (0.75, 0.125), (0.75, 0.125), (0.75, 0.1875), (0.71875, 0.1875), (0.71875, 0.125), (0.71875, 0.125), (0.71875, 0.1875), (0.6875, 0.1875), (0.6875, 0.125), (0.6875, 0.125), (0.6875, 0.1875), (0.65625, 0.1875), (0.65625, 0.125), (0.65625, 0.125), (0.65625, 0.1875), (0.625, 0.1875), (0.625, 0.125), (0.625, 0.125), (0.625, 0.1875), (0.59375, 0.1875), (0.59375, 0.125), (0.59375, 0.125), (0.59375, 0.1875), (0.5625, 0.1875), (0.5625, 0.125), (0.5625, 0.125), (0.5625, 0.1875), (0.53125, 0.1875), (0.53125, 0.125), (0.53125, 0.125), (0.53125, 0.1875), (0.5, 0.1875), (0.5, 0.125), (0.5, 0.125), (0.5, 0.1875), (0.46875, 0.1875), (0.46875, 0.125), (0.46875, 0.125), (0.46875, 0.1875), (0.4375, 0.1875), (0.4375, 0.125), (0.4375, 0.125), (0.4375, 0.1875), (0.40625, 0.1875), (0.40625, 0.125), (0.40625, 0.125), (0.40625, 0.1875), (0.375, 0.1875), (0.375, 0.125), (0.375, 0.125), (0.375, 0.1875), (0.34375, 0.1875), (0.34375, 0.125), (0.34375, 0.125), (0.34375, 0.1875), (0.3125, 0.1875), (0.3125, 0.125), (0.3125, 0.125), (0.3125, 0.1875), (0.28125, 0.1875), (0.28125, 0.125), (0.28125, 0.125), (0.28125, 0.1875), (0.25, 0.1875), (0.25, 0.125), (0.25, 0.125), (0.25, 0.1875), (0.21875, 0.1875), (0.21875, 0.125), (0.21875, 0.125), (0.21875, 0.1875), (0.1875, 0.1875), (0.1875, 0.125), (0.1875, 0.125), (0.1875, 0.1875), (0.15625, 0.1875), (0.15625, 0.125), (0.15625, 0.125), (0.15625, 0.1875), (0.125, 0.1875), (0.125, 0.125), (0.125, 0.125), (0.125, 0.1875), (0.09375, 0.1875), (0.09375, 0.125), (0.09375, 0.125), (0.09375, 0.1875), (0.0625, 0.1875), (0.0625, 0.125), (0.0625, 0.125), (0.0625, 0.1875), (0.03125, 0.1875), (0.03125, 0.125), (0.03125, 0.125), (0.03125, 0.1875), (0, 0.1875), (0, 0.125), (1, 0.1875), (1, 0.25), (0.96875, 0.25), (0.96875, 0.1875), (0.96875, 0.1875), (0.96875, 0.25), (0.9375, 0.25), (0.9375, 0.1875), (0.9375, 0.1875), (0.9375, 0.25), (0.90625, 0.25), (0.90625, 0.1875), (0.90625, 0.1875), (0.90625, 0.25), (0.875, 0.25), (0.875, 0.1875), (0.875, 0.1875), (0.875, 0.25), (0.84375, 0.25), (0.84375, 0.1875), (0.84375, 0.1875), (0.84375, 0.25), (0.8125, 0.25), (0.8125, 0.1875), (0.8125, 0.1875), (0.8125, 0.25), (0.78125, 0.25), (0.78125, 0.1875), (0.78125, 0.1875), (0.78125, 0.25), (0.75, 0.25), (0.75, 0.1875), (0.75, 0.1875), (0.75, 0.25), (0.71875, 0.25), (0.71875, 0.1875), (0.71875, 0.1875), (0.71875, 0.25), (0.6875, 0.25), (0.6875, 0.1875), (0.6875, 0.1875), (0.6875, 0.25), (0.65625, 0.25), (0.65625, 0.1875), (0.65625, 0.1875), (0.65625, 0.25), (0.625, 0.25), (0.625, 0.1875), (0.625, 0.1875), (0.625, 0.25), (0.59375, 0.25), (0.59375, 0.1875), (0.59375, 0.1875), (0.59375, 0.25), (0.5625, 0.25), (0.5625, 0.1875), (0.5625, 0.1875), (0.5625, 0.25), (0.53125, 0.25), (0.53125, 0.1875), (0.53125, 0.1875), (0.53125, 0.25), (0.5, 0.25), (0.5, 0.1875), (0.5, 0.1875), (0.5, 0.25), (0.46875, 0.25), (0.46875, 0.1875), (0.46875, 0.1875), (0.46875, 0.25), (0.4375, 0.25), (0.4375, 0.1875), (0.4375, 0.1875), (0.4375, 0.25), (0.40625, 0.25), (0.40625, 0.1875), (0.40625, 0.1875), (0.40625, 0.25), (0.375, 0.25), (0.375, 0.1875), (0.375, 0.1875), (0.375, 0.25), (0.34375, 0.25), (0.34375, 0.1875), (0.34375, 0.1875), (0.34375, 0.25), (0.3125, 0.25), (0.3125, 0.1875), (0.3125, 0.1875), (0.3125, 0.25), (0.28125, 0.25), (0.28125, 0.1875), (0.28125, 0.1875), (0.28125, 0.25), (0.25, 0.25), (0.25, 0.1875), (0.25, 0.1875), (0.25, 0.25), (0.21875, 0.25), (0.21875, 0.1875), (0.21875, 0.1875), (0.21875, 0.25), (0.1875, 0.25), (0.1875, 0.1875), (0.1875, 0.1875), (0.1875, 0.25), (0.15625, 0.25), (0.15625, 0.1875), (0.15625, 0.1875), (0.15625, 0.25), (0.125, 0.25), (0.125, 0.1875), (0.125, 0.1875), (0.125, 0.25), (0.09375, 0.25), (0.09375, 0.1875), (0.09375, 0.1875), (0.09375, 0.25), (0.0625, 0.25), (0.0625, 0.1875), (0.0625, 0.1875), (0.0625, 0.25), (0.03125, 0.25), (0.03125, 0.1875), (0.03125, 0.1875), (0.03125, 0.25), (0, 0.25), (0, 0.1875), (1, 0.25), (1, 0.3125), (0.96875, 0.3125), (0.96875, 0.25), (0.96875, 0.25), (0.96875, 0.3125), (0.9375, 0.3125), (0.9375, 0.25), (0.9375, 0.25), (0.9375, 0.3125), (0.90625, 0.3125), (0.90625, 0.25), (0.90625, 0.25), (0.90625, 0.3125), (0.875, 0.3125), (0.875, 0.25), (0.875, 0.25), (0.875, 0.3125), (0.84375, 0.3125), (0.84375, 0.25), (0.84375, 0.25), (0.84375, 0.3125), (0.8125, 0.3125), (0.8125, 0.25), (0.8125, 0.25), (0.8125, 0.3125), (0.78125, 0.3125), (0.78125, 0.25), (0.78125, 0.25), (0.78125, 0.3125), (0.75, 0.3125), (0.75, 0.25), (0.75, 0.25), (0.75, 0.3125), (0.71875, 0.3125), (0.71875, 0.25), (0.71875, 0.25), (0.71875, 0.3125), (0.6875, 0.3125), (0.6875, 0.25), (0.6875, 0.25), (0.6875, 0.3125), (0.65625, 0.3125), (0.65625, 0.25), (0.65625, 0.25), (0.65625, 0.3125), (0.625, 0.3125), (0.625, 0.25), (0.625, 0.25), (0.625, 0.3125), (0.59375, 0.3125), (0.59375, 0.25), (0.59375, 0.25), (0.59375, 0.3125), (0.5625, 0.3125), (0.5625, 0.25), (0.5625, 0.25), (0.5625, 0.3125), (0.53125, 0.3125), (0.53125, 0.25), (0.53125, 0.25), (0.53125, 0.3125), (0.5, 0.3125), (0.5, 0.25), (0.5, 0.25), (0.5, 0.3125), (0.46875, 0.3125), (0.46875, 0.25), (0.46875, 0.25), (0.46875, 0.3125), (0.4375, 0.3125), (0.4375, 0.25), (0.4375, 0.25), (0.4375, 0.3125), (0.40625, 0.3125), (0.40625, 0.25), (0.40625, 0.25), (0.40625, 0.3125), (0.375, 0.3125), (0.375, 0.25), (0.375, 0.25), (0.375, 0.3125), (0.34375, 0.3125), (0.34375, 0.25), (0.34375, 0.25), (0.34375, 0.3125), (0.3125, 0.3125), (0.3125, 0.25), (0.3125, 0.25), (0.3125, 0.3125), (0.28125, 0.3125), (0.28125, 0.25), (0.28125, 0.25), (0.28125, 0.3125), (0.25, 0.3125), (0.25, 0.25), (0.25, 0.25), (0.25, 0.3125), (0.21875, 0.3125), (0.21875, 0.25), (0.21875, 0.25), (0.21875, 0.3125), (0.1875, 0.3125), (0.1875, 0.25), (0.1875, 0.25), (0.1875, 0.3125), (0.15625, 0.3125), (0.15625, 0.25), (0.15625, 0.25), (0.15625, 0.3125), (0.125, 0.3125), (0.125, 0.25), (0.125, 0.25), (0.125, 0.3125), (0.09375, 0.3125), (0.09375, 0.25), (0.09375, 0.25), (0.09375, 0.3125), (0.0625, 0.3125), (0.0625, 0.25), (0.0625, 0.25), (0.0625, 0.3125), (0.03125, 0.3125), (0.03125, 0.25), (0.03125, 0.25), (0.03125, 0.3125), (0, 0.3125), (0, 0.25), (1, 0.3125), (1, 0.375), (0.96875, 0.375), (0.96875, 0.3125), (0.96875, 0.3125), (0.96875, 0.375), (0.9375, 0.375), (0.9375, 0.3125), (0.9375, 0.3125), (0.9375, 0.375), (0.90625, 0.375), (0.90625, 0.3125), (0.90625, 0.3125), (0.90625, 0.375), (0.875, 0.375), (0.875, 0.3125), (0.875, 0.3125), (0.875, 0.375), (0.84375, 0.375), (0.84375, 0.3125), (0.84375, 0.3125), (0.84375, 0.375), (0.8125, 0.375), (0.8125, 0.3125), (0.8125, 0.3125), (0.8125, 0.375), (0.78125, 0.375), (0.78125, 0.3125), (0.78125, 0.3125), (0.78125, 0.375), (0.75, 0.375), (0.75, 0.3125), (0.75, 0.3125), (0.75, 0.375), (0.71875, 0.375), (0.71875, 0.3125), (0.71875, 0.3125), (0.71875, 0.375), (0.6875, 0.375), (0.6875, 0.3125), (0.6875, 0.3125), (0.6875, 0.375), (0.65625, 0.375), (0.65625, 0.3125), (0.65625, 0.3125), (0.65625, 0.375), (0.625, 0.375), (0.625, 0.3125), (0.625, 0.3125), (0.625, 0.375), (0.59375, 0.375), (0.59375, 0.3125), (0.59375, 0.3125), (0.59375, 0.375), (0.5625, 0.375), (0.5625, 0.3125), (0.5625, 0.3125), (0.5625, 0.375), (0.53125, 0.375), (0.53125, 0.3125), (0.53125, 0.3125), (0.53125, 0.375), (0.5, 0.375), (0.5, 0.3125), (0.5, 0.3125), (0.5, 0.375), (0.46875, 0.375), (0.46875, 0.3125), (0.46875, 0.3125), (0.46875, 0.375), (0.4375, 0.375), (0.4375, 0.3125), (0.4375, 0.3125), (0.4375, 0.375), (0.40625, 0.375), (0.40625, 0.3125), (0.40625, 0.3125), (0.40625, 0.375), (0.375, 0.375), (0.375, 0.3125), (0.375, 0.3125), (0.375, 0.375), (0.34375, 0.375), (0.34375, 0.3125), (0.34375, 0.3125), (0.34375, 0.375), (0.3125, 0.375), (0.3125, 0.3125), (0.3125, 0.3125), (0.3125, 0.375), (0.28125, 0.375), (0.28125, 0.3125), (0.28125, 0.3125), (0.28125, 0.375), (0.25, 0.375), (0.25, 0.3125), (0.25, 0.3125), (0.25, 0.375), (0.21875, 0.375), (0.21875, 0.3125), (0.21875, 0.3125), (0.21875, 0.375), (0.1875, 0.375), (0.1875, 0.3125), (0.1875, 0.3125), (0.1875, 0.375), (0.15625, 0.375), (0.15625, 0.3125), (0.15625, 0.3125), (0.15625, 0.375), (0.125, 0.375), (0.125, 0.3125), (0.125, 0.3125), (0.125, 0.375), (0.09375, 0.375), (0.09375, 0.3125), (0.09375, 0.3125), (0.09375, 0.375), (0.0625, 0.375), (0.0625, 0.3125), (0.0625, 0.3125), (0.0625, 0.375), (0.03125, 0.375), (0.03125, 0.3125), (0.03125, 0.3125), (0.03125, 0.375), (0, 0.375), (0, 0.3125), (1, 0.375), (1, 0.4375), (0.96875, 0.4375), (0.96875, 0.375), (0.96875, 0.375), (0.96875, 0.4375), (0.9375, 0.4375), (0.9375, 0.375), (0.9375, 0.375), (0.9375, 0.4375), (0.90625, 0.4375), (0.90625, 0.375), (0.90625, 0.375), (0.90625, 0.4375), (0.875, 0.4375), (0.875, 0.375), (0.875, 0.375), (0.875, 0.4375), (0.84375, 0.4375), (0.84375, 0.375), (0.84375, 0.375), (0.84375, 0.4375), (0.8125, 0.4375), (0.8125, 0.375), (0.8125, 0.375), (0.8125, 0.4375), (0.78125, 0.4375), (0.78125, 0.375), (0.78125, 0.375), (0.78125, 0.4375), (0.75, 0.4375), (0.75, 0.375), (0.75, 0.375), (0.75, 0.4375), (0.71875, 0.4375), (0.71875, 0.375), (0.71875, 0.375), (0.71875, 0.4375), (0.6875, 0.4375), (0.6875, 0.375), (0.6875, 0.375), (0.6875, 0.4375), (0.65625, 0.4375), (0.65625, 0.375), (0.65625, 0.375), (0.65625, 0.4375), (0.625, 0.4375), (0.625, 0.375), (0.625, 0.375), (0.625, 0.4375), (0.59375, 0.4375), (0.59375, 0.375), (0.59375, 0.375), (0.59375, 0.4375), (0.5625, 0.4375), (0.5625, 0.375), (0.5625, 0.375), (0.5625, 0.4375), (0.53125, 0.4375), (0.53125, 0.375), (0.53125, 0.375), (0.53125, 0.4375), (0.5, 0.4375), (0.5, 0.375), (0.5, 0.375), (0.5, 0.4375), (0.46875, 0.4375), (0.46875, 0.375), (0.46875, 0.375), (0.46875, 0.4375), (0.4375, 0.4375), (0.4375, 0.375), (0.4375, 0.375), (0.4375, 0.4375), (0.40625, 0.4375), (0.40625, 0.375), (0.40625, 0.375), (0.40625, 0.4375), (0.375, 0.4375), (0.375, 0.375), (0.375, 0.375), (0.375, 0.4375), (0.34375, 0.4375), (0.34375, 0.375), (0.34375, 0.375), (0.34375, 0.4375), (0.3125, 0.4375), (0.3125, 0.375), (0.3125, 0.375), (0.3125, 0.4375), (0.28125, 0.4375), (0.28125, 0.375), (0.28125, 0.375), (0.28125, 0.4375), (0.25, 0.4375), (0.25, 0.375), (0.25, 0.375), (0.25, 0.4375), (0.21875, 0.4375), (0.21875, 0.375), (0.21875, 0.375), (0.21875, 0.4375), (0.1875, 0.4375), (0.1875, 0.375), (0.1875, 0.375), (0.1875, 0.4375), (0.15625, 0.4375), (0.15625, 0.375), (0.15625, 0.375), (0.15625, 0.4375), (0.125, 0.4375), (0.125, 0.375), (0.125, 0.375), (0.125, 0.4375), (0.09375, 0.4375), (0.09375, 0.375), (0.09375, 0.375), (0.09375, 0.4375), (0.0625, 0.4375), (0.0625, 0.375), (0.0625, 0.375), (0.0625, 0.4375), (0.03125, 0.4375), (0.03125, 0.375), (0.03125, 0.375), (0.03125, 0.4375), (0, 0.4375), (0, 0.375), (1, 0.4375), (1, 0.5), (0.96875, 0.5), (0.96875, 0.4375), (0.96875, 0.4375), (0.96875, 0.5), (0.9375, 0.5), (0.9375, 0.4375), (0.9375, 0.4375), (0.9375, 0.5), (0.90625, 0.5), (0.90625, 0.4375), (0.90625, 0.4375), (0.90625, 0.5), (0.875, 0.5), (0.875, 0.4375), (0.875, 0.4375), (0.875, 0.5), (0.84375, 0.5), (0.84375, 0.4375), (0.84375, 0.4375), (0.84375, 0.5), (0.8125, 0.5), (0.8125, 0.4375), (0.8125, 0.4375), (0.8125, 0.5), (0.78125, 0.5), (0.78125, 0.4375), (0.78125, 0.4375), (0.78125, 0.5), (0.75, 0.5), (0.75, 0.4375), (0.75, 0.4375), (0.75, 0.5), (0.71875, 0.5), (0.71875, 0.4375), (0.71875, 0.4375), (0.71875, 0.5), (0.6875, 0.5), (0.6875, 0.4375), (0.6875, 0.4375), (0.6875, 0.5), (0.65625, 0.5), (0.65625, 0.4375), (0.65625, 0.4375), (0.65625, 0.5), (0.625, 0.5), (0.625, 0.4375), (0.625, 0.4375), (0.625, 0.5), (0.59375, 0.5), (0.59375, 0.4375), (0.59375, 0.4375), (0.59375, 0.5), (0.5625, 0.5), (0.5625, 0.4375), (0.5625, 0.4375), (0.5625, 0.5), (0.53125, 0.5), (0.53125, 0.4375), (0.53125, 0.4375), (0.53125, 0.5), (0.5, 0.5), (0.5, 0.4375), (0.5, 0.4375), (0.5, 0.5), (0.46875, 0.5), (0.46875, 0.4375), (0.46875, 0.4375), (0.46875, 0.5), (0.4375, 0.5), (0.4375, 0.4375), (0.4375, 0.4375), (0.4375, 0.5), (0.40625, 0.5), (0.40625, 0.4375), (0.40625, 0.4375), (0.40625, 0.5), (0.375, 0.5), (0.375, 0.4375), (0.375, 0.4375), (0.375, 0.5), (0.34375, 0.5), (0.34375, 0.4375), (0.34375, 0.4375), (0.34375, 0.5), (0.3125, 0.5), (0.3125, 0.4375), (0.3125, 0.4375), (0.3125, 0.5), (0.28125, 0.5), (0.28125, 0.4375), (0.28125, 0.4375), (0.28125, 0.5), (0.25, 0.5), (0.25, 0.4375), (0.25, 0.4375), (0.25, 0.5), (0.21875, 0.5), (0.21875, 0.4375), (0.21875, 0.4375), (0.21875, 0.5), (0.1875, 0.5), (0.1875, 0.4375), (0.1875, 0.4375), (0.1875, 0.5), (0.15625, 0.5), (0.15625, 0.4375), (0.15625, 0.4375), (0.15625, 0.5), (0.125, 0.5), (0.125, 0.4375), (0.125, 0.4375), (0.125, 0.5), (0.09375, 0.5), (0.09375, 0.4375), (0.09375, 0.4375), (0.09375, 0.5), (0.0625, 0.5), (0.0625, 0.4375), (0.0625, 0.4375), (0.0625, 0.5), (0.03125, 0.5), (0.03125, 0.4375), (0.03125, 0.4375), (0.03125, 0.5), (0, 0.5), (0, 0.4375), (1, 0.5), (1, 0.5625), (0.96875, 0.5625), (0.96875, 0.5), (0.96875, 0.5), (0.96875, 0.5625), (0.9375, 0.5625), (0.9375, 0.5), (0.9375, 0.5), (0.9375, 0.5625), (0.90625, 0.5625), (0.90625, 0.5), (0.90625, 0.5), (0.90625, 0.5625), (0.875, 0.5625), (0.875, 0.5), (0.875, 0.5), (0.875, 0.5625), (0.84375, 0.5625), (0.84375, 0.5), (0.84375, 0.5), (0.84375, 0.5625), (0.8125, 0.5625), (0.8125, 0.5), (0.8125, 0.5), (0.8125, 0.5625), (0.78125, 0.5625), (0.78125, 0.5), (0.78125, 0.5), (0.78125, 0.5625), (0.75, 0.5625), (0.75, 0.5), (0.75, 0.5), (0.75, 0.5625), (0.71875, 0.5625), (0.71875, 0.5), (0.71875, 0.5), (0.71875, 0.5625), (0.6875, 0.5625), (0.6875, 0.5), (0.6875, 0.5), (0.6875, 0.5625), (0.65625, 0.5625), (0.65625, 0.5), (0.65625, 0.5), (0.65625, 0.5625), (0.625, 0.5625), (0.625, 0.5), (0.625, 0.5), (0.625, 0.5625), (0.59375, 0.5625), (0.59375, 0.5), (0.59375, 0.5), (0.59375, 0.5625), (0.5625, 0.5625), (0.5625, 0.5), (0.5625, 0.5), (0.5625, 0.5625), (0.53125, 0.5625), (0.53125, 0.5), (0.53125, 0.5), (0.53125, 0.5625), (0.5, 0.5625), (0.5, 0.5), (0.5, 0.5), (0.5, 0.5625), (0.46875, 0.5625), (0.46875, 0.5), (0.46875, 0.5), (0.46875, 0.5625), (0.4375, 0.5625), (0.4375, 0.5), (0.4375, 0.5), (0.4375, 0.5625), (0.40625, 0.5625), (0.40625, 0.5), (0.40625, 0.5), (0.40625, 0.5625), (0.375, 0.5625), (0.375, 0.5), (0.375, 0.5), (0.375, 0.5625), (0.34375, 0.5625), (0.34375, 0.5), (0.34375, 0.5), (0.34375, 0.5625), (0.3125, 0.5625), (0.3125, 0.5), (0.3125, 0.5), (0.3125, 0.5625), (0.28125, 0.5625), (0.28125, 0.5), (0.28125, 0.5), (0.28125, 0.5625), (0.25, 0.5625), (0.25, 0.5), (0.25, 0.5), (0.25, 0.5625), (0.21875, 0.5625), (0.21875, 0.5), (0.21875, 0.5), (0.21875, 0.5625), (0.1875, 0.5625), (0.1875, 0.5), (0.1875, 0.5), (0.1875, 0.5625), (0.15625, 0.5625), (0.15625, 0.5), (0.15625, 0.5), (0.15625, 0.5625), (0.125, 0.5625), (0.125, 0.5), (0.125, 0.5), (0.125, 0.5625), (0.09375, 0.5625), (0.09375, 0.5), (0.09375, 0.5), (0.09375, 0.5625), (0.0625, 0.5625), (0.0625, 0.5), (0.0625, 0.5), (0.0625, 0.5625), (0.03125, 0.5625), (0.03125, 0.5), (0.03125, 0.5), (0.03125, 0.5625), (0, 0.5625), (0, 0.5), (1, 0.5625), (1, 0.625), (0.96875, 0.625), (0.96875, 0.5625), (0.96875, 0.5625), (0.96875, 0.625), (0.9375, 0.625), (0.9375, 0.5625), (0.9375, 0.5625), (0.9375, 0.625), (0.90625, 0.625), (0.90625, 0.5625), (0.90625, 0.5625), (0.90625, 0.625), (0.875, 0.625), (0.875, 0.5625), (0.875, 0.5625), (0.875, 0.625), (0.84375, 0.625), (0.84375, 0.5625), (0.84375, 0.5625), (0.84375, 0.625), (0.8125, 0.625), (0.8125, 0.5625), (0.8125, 0.5625), (0.8125, 0.625), (0.78125, 0.625), (0.78125, 0.5625), (0.78125, 0.5625), (0.78125, 0.625), (0.75, 0.625), (0.75, 0.5625), (0.75, 0.5625), (0.75, 0.625), (0.71875, 0.625), (0.71875, 0.5625), (0.71875, 0.5625), (0.71875, 0.625), (0.6875, 0.625), (0.6875, 0.5625), (0.6875, 0.5625), (0.6875, 0.625), (0.65625, 0.625), (0.65625, 0.5625), (0.65625, 0.5625), (0.65625, 0.625), (0.625, 0.625), (0.625, 0.5625), (0.625, 0.5625), (0.625, 0.625), (0.59375, 0.625), (0.59375, 0.5625), (0.59375, 0.5625), (0.59375, 0.625), (0.5625, 0.625), (0.5625, 0.5625), (0.5625, 0.5625), (0.5625, 0.625), (0.53125, 0.625), (0.53125, 0.5625), (0.53125, 0.5625), (0.53125, 0.625), (0.5, 0.625), (0.5, 0.5625), (0.5, 0.5625), (0.5, 0.625), (0.46875, 0.625), (0.46875, 0.5625), (0.46875, 0.5625), (0.46875, 0.625), (0.4375, 0.625), (0.4375, 0.5625), (0.4375, 0.5625), (0.4375, 0.625), (0.40625, 0.625), (0.40625, 0.5625), (0.40625, 0.5625), (0.40625, 0.625), (0.375, 0.625), (0.375, 0.5625), (0.375, 0.5625), (0.375, 0.625), (0.34375, 0.625), (0.34375, 0.5625), (0.34375, 0.5625), (0.34375, 0.625), (0.3125, 0.625), (0.3125, 0.5625), (0.3125, 0.5625), (0.3125, 0.625), (0.28125, 0.625), (0.28125, 0.5625), (0.28125, 0.5625), (0.28125, 0.625), (0.25, 0.625), (0.25, 0.5625), (0.25, 0.5625), (0.25, 0.625), (0.21875, 0.625), (0.21875, 0.5625), (0.21875, 0.5625), (0.21875, 0.625), (0.1875, 0.625), (0.1875, 0.5625), (0.1875, 0.5625), (0.1875, 0.625), (0.15625, 0.625), (0.15625, 0.5625), (0.15625, 0.5625), (0.15625, 0.625), (0.125, 0.625), (0.125, 0.5625), (0.125, 0.5625), (0.125, 0.625), (0.09375, 0.625), (0.09375, 0.5625), (0.09375, 0.5625), (0.09375, 0.625), (0.0625, 0.625), (0.0625, 0.5625), (0.0625, 0.5625), (0.0625, 0.625), (0.03125, 0.625), (0.03125, 0.5625), (0.03125, 0.5625), (0.03125, 0.625), (0, 0.625), (0, 0.5625), (1, 0.625), (1, 0.6875), (0.96875, 0.6875), (0.96875, 0.625), (0.96875, 0.625), (0.96875, 0.6875), (0.9375, 0.6875), (0.9375, 0.625), (0.9375, 0.625), (0.9375, 0.6875), (0.90625, 0.6875), (0.90625, 0.625), (0.90625, 0.625), (0.90625, 0.6875), (0.875, 0.6875), (0.875, 0.625), (0.875, 0.625), (0.875, 0.6875), (0.84375, 0.6875), (0.84375, 0.625), (0.84375, 0.625), (0.84375, 0.6875), (0.8125, 0.6875), (0.8125, 0.625), (0.8125, 0.625), (0.8125, 0.6875), (0.78125, 0.6875), (0.78125, 0.625), (0.78125, 0.625), (0.78125, 0.6875), (0.75, 0.6875), (0.75, 0.625), (0.75, 0.625), (0.75, 0.6875), (0.71875, 0.6875), (0.71875, 0.625), (0.71875, 0.625), (0.71875, 0.6875), (0.6875, 0.6875), (0.6875, 0.625), (0.6875, 0.625), (0.6875, 0.6875), (0.65625, 0.6875), (0.65625, 0.625), (0.65625, 0.625), (0.65625, 0.6875), (0.625, 0.6875), (0.625, 0.625), (0.625, 0.625), (0.625, 0.6875), (0.59375, 0.6875), (0.59375, 0.625), (0.59375, 0.625), (0.59375, 0.6875), (0.5625, 0.6875), (0.5625, 0.625), (0.5625, 0.625), (0.5625, 0.6875), (0.53125, 0.6875), (0.53125, 0.625), (0.53125, 0.625), (0.53125, 0.6875), (0.5, 0.6875), (0.5, 0.625), (0.5, 0.625), (0.5, 0.6875), (0.46875, 0.6875), (0.46875, 0.625), (0.46875, 0.625), (0.46875, 0.6875), (0.4375, 0.6875), (0.4375, 0.625), (0.4375, 0.625), (0.4375, 0.6875), (0.40625, 0.6875), (0.40625, 0.625), (0.40625, 0.625), (0.40625, 0.6875), (0.375, 0.6875), (0.375, 0.625), (0.375, 0.625), (0.375, 0.6875), (0.34375, 0.6875), (0.34375, 0.625), (0.34375, 0.625), (0.34375, 0.6875), (0.3125, 0.6875), (0.3125, 0.625), (0.3125, 0.625), (0.3125, 0.6875), (0.28125, 0.6875), (0.28125, 0.625), (0.28125, 0.625), (0.28125, 0.6875), (0.25, 0.6875), (0.25, 0.625), (0.25, 0.625), (0.25, 0.6875), (0.21875, 0.6875), (0.21875, 0.625), (0.21875, 0.625), (0.21875, 0.6875), (0.1875, 0.6875), (0.1875, 0.625), (0.1875, 0.625), (0.1875, 0.6875), (0.15625, 0.6875), (0.15625, 0.625), (0.15625, 0.625), (0.15625, 0.6875), (0.125, 0.6875), (0.125, 0.625), (0.125, 0.625), (0.125, 0.6875), (0.09375, 0.6875), (0.09375, 0.625), (0.09375, 0.625), (0.09375, 0.6875), (0.0625, 0.6875), (0.0625, 0.625), (0.0625, 0.625), (0.0625, 0.6875), (0.03125, 0.6875), (0.03125, 0.625), (0.03125, 0.625), (0.03125, 0.6875), (0, 0.6875), (0, 0.625), (1, 0.6875), (1, 0.75), (0.96875, 0.75), (0.96875, 0.6875), (0.96875, 0.6875), (0.96875, 0.75), (0.9375, 0.75), (0.9375, 0.6875), (0.9375, 0.6875), (0.9375, 0.75), (0.90625, 0.75), (0.90625, 0.6875), (0.90625, 0.6875), (0.90625, 0.75), (0.875, 0.75), (0.875, 0.6875), (0.875, 0.6875), (0.875, 0.75), (0.84375, 0.75), (0.84375, 0.6875), (0.84375, 0.6875), (0.84375, 0.75), (0.8125, 0.75), (0.8125, 0.6875), (0.8125, 0.6875), (0.8125, 0.75), (0.78125, 0.75), (0.78125, 0.6875), (0.78125, 0.6875), (0.78125, 0.75), (0.75, 0.75), (0.75, 0.6875), (0.75, 0.6875), (0.75, 0.75), (0.71875, 0.75), (0.71875, 0.6875), (0.71875, 0.6875), (0.71875, 0.75), (0.6875, 0.75), (0.6875, 0.6875), (0.6875, 0.6875), (0.6875, 0.75), (0.65625, 0.75), (0.65625, 0.6875), (0.65625, 0.6875), (0.65625, 0.75), (0.625, 0.75), (0.625, 0.6875), (0.625, 0.6875), (0.625, 0.75), (0.59375, 0.75), (0.59375, 0.6875), (0.59375, 0.6875), (0.59375, 0.75), (0.5625, 0.75), (0.5625, 0.6875), (0.5625, 0.6875), (0.5625, 0.75), (0.53125, 0.75), (0.53125, 0.6875), (0.53125, 0.6875), (0.53125, 0.75), (0.5, 0.75), (0.5, 0.6875), (0.5, 0.6875), (0.5, 0.75), (0.46875, 0.75), (0.46875, 0.6875), (0.46875, 0.6875), (0.46875, 0.75), (0.4375, 0.75), (0.4375, 0.6875), (0.4375, 0.6875), (0.4375, 0.75), (0.40625, 0.75), (0.40625, 0.6875), (0.40625, 0.6875), (0.40625, 0.75), (0.375, 0.75), (0.375, 0.6875), (0.375, 0.6875), (0.375, 0.75), (0.34375, 0.75), (0.34375, 0.6875), (0.34375, 0.6875), (0.34375, 0.75), (0.3125, 0.75), (0.3125, 0.6875), (0.3125, 0.6875), (0.3125, 0.75), (0.28125, 0.75), (0.28125, 0.6875), (0.28125, 0.6875), (0.28125, 0.75), (0.25, 0.75), (0.25, 0.6875), (0.25, 0.6875), (0.25, 0.75), (0.21875, 0.75), (0.21875, 0.6875), (0.21875, 0.6875), (0.21875, 0.75), (0.1875, 0.75), (0.1875, 0.6875), (0.1875, 0.6875), (0.1875, 0.75), (0.15625, 0.75), (0.15625, 0.6875), (0.15625, 0.6875), (0.15625, 0.75), (0.125, 0.75), (0.125, 0.6875), (0.125, 0.6875), (0.125, 0.75), (0.09375, 0.75), (0.09375, 0.6875), (0.09375, 0.6875), (0.09375, 0.75), (0.0625, 0.75), (0.0625, 0.6875), (0.0625, 0.6875), (0.0625, 0.75), (0.03125, 0.75), (0.03125, 0.6875), (0.03125, 0.6875), (0.03125, 0.75), (0, 0.75), (0, 0.6875), (1, 0.75), (1, 0.8125), (0.96875, 0.8125), (0.96875, 0.75), (0.96875, 0.75), (0.96875, 0.8125), (0.9375, 0.8125), (0.9375, 0.75), (0.9375, 0.75), (0.9375, 0.8125), (0.90625, 0.8125), (0.90625, 0.75), (0.90625, 0.75), (0.90625, 0.8125), (0.875, 0.8125), (0.875, 0.75), (0.875, 0.75), (0.875, 0.8125), (0.84375, 0.8125), (0.84375, 0.75), (0.84375, 0.75), (0.84375, 0.8125), (0.8125, 0.8125), (0.8125, 0.75), (0.8125, 0.75), (0.8125, 0.8125), (0.78125, 0.8125), (0.78125, 0.75), (0.78125, 0.75), (0.78125, 0.8125), (0.75, 0.8125), (0.75, 0.75), (0.75, 0.75), (0.75, 0.8125), (0.71875, 0.8125), (0.71875, 0.75), (0.71875, 0.75), (0.71875, 0.8125), (0.6875, 0.8125), (0.6875, 0.75), (0.6875, 0.75), (0.6875, 0.8125), (0.65625, 0.8125), (0.65625, 0.75), (0.65625, 0.75), (0.65625, 0.8125), (0.625, 0.8125), (0.625, 0.75), (0.625, 0.75), (0.625, 0.8125), (0.59375, 0.8125), (0.59375, 0.75), (0.59375, 0.75), (0.59375, 0.8125), (0.5625, 0.8125), (0.5625, 0.75), (0.5625, 0.75), (0.5625, 0.8125), (0.53125, 0.8125), (0.53125, 0.75), (0.53125, 0.75), (0.53125, 0.8125), (0.5, 0.8125), (0.5, 0.75), (0.5, 0.75), (0.5, 0.8125), (0.46875, 0.8125), (0.46875, 0.75), (0.46875, 0.75), (0.46875, 0.8125), (0.4375, 0.8125), (0.4375, 0.75), (0.4375, 0.75), (0.4375, 0.8125), (0.40625, 0.8125), (0.40625, 0.75), (0.40625, 0.75), (0.40625, 0.8125), (0.375, 0.8125), (0.375, 0.75), (0.375, 0.75), (0.375, 0.8125), (0.34375, 0.8125), (0.34375, 0.75), (0.34375, 0.75), (0.34375, 0.8125), (0.3125, 0.8125), (0.3125, 0.75), (0.3125, 0.75), (0.3125, 0.8125), (0.28125, 0.8125), (0.28125, 0.75), (0.28125, 0.75), (0.28125, 0.8125), (0.25, 0.8125), (0.25, 0.75), (0.25, 0.75), (0.25, 0.8125), (0.21875, 0.8125), (0.21875, 0.75), (0.21875, 0.75), (0.21875, 0.8125), (0.1875, 0.8125), (0.1875, 0.75), (0.1875, 0.75), (0.1875, 0.8125), (0.15625, 0.8125), (0.15625, 0.75), (0.15625, 0.75), (0.15625, 0.8125), (0.125, 0.8125), (0.125, 0.75), (0.125, 0.75), (0.125, 0.8125), (0.09375, 0.8125), (0.09375, 0.75), (0.09375, 0.75), (0.09375, 0.8125), (0.0625, 0.8125), (0.0625, 0.75), (0.0625, 0.75), (0.0625, 0.8125), (0.03125, 0.8125), (0.03125, 0.75), (0.03125, 0.75), (0.03125, 0.8125), (0, 0.8125), (0, 0.75), (1, 0.8125), (1, 0.875), (0.96875, 0.875), (0.96875, 0.8125), (0.96875, 0.8125), (0.96875, 0.875), (0.9375, 0.875), (0.9375, 0.8125), (0.9375, 0.8125), (0.9375, 0.875), (0.90625, 0.875), (0.90625, 0.8125), (0.90625, 0.8125), (0.90625, 0.875), (0.875, 0.875), (0.875, 0.8125), (0.875, 0.8125), (0.875, 0.875), (0.84375, 0.875), (0.84375, 0.8125), (0.84375, 0.8125), (0.84375, 0.875), (0.8125, 0.875), (0.8125, 0.8125), (0.8125, 0.8125), (0.8125, 0.875), (0.78125, 0.875), (0.78125, 0.8125), (0.78125, 0.8125), (0.78125, 0.875), (0.75, 0.875), (0.75, 0.8125), (0.75, 0.8125), (0.75, 0.875), (0.71875, 0.875), (0.71875, 0.8125), (0.71875, 0.8125), (0.71875, 0.875), (0.6875, 0.875), (0.6875, 0.8125), (0.6875, 0.8125), (0.6875, 0.875), (0.65625, 0.875), (0.65625, 0.8125), (0.65625, 0.8125), (0.65625, 0.875), (0.625, 0.875), (0.625, 0.8125), (0.625, 0.8125), (0.625, 0.875), (0.59375, 0.875), (0.59375, 0.8125), (0.59375, 0.8125), (0.59375, 0.875), (0.5625, 0.875), (0.5625, 0.8125), (0.5625, 0.8125), (0.5625, 0.875), (0.53125, 0.875), (0.53125, 0.8125), (0.53125, 0.8125), (0.53125, 0.875), (0.5, 0.875), (0.5, 0.8125), (0.5, 0.8125), (0.5, 0.875), (0.46875, 0.875), (0.46875, 0.8125), (0.46875, 0.8125), (0.46875, 0.875), (0.4375, 0.875), (0.4375, 0.8125), (0.4375, 0.8125), (0.4375, 0.875), (0.40625, 0.875), (0.40625, 0.8125), (0.40625, 0.8125), (0.40625, 0.875), (0.375, 0.875), (0.375, 0.8125), (0.375, 0.8125), (0.375, 0.875), (0.34375, 0.875), (0.34375, 0.8125), (0.34375, 0.8125), (0.34375, 0.875), (0.3125, 0.875), (0.3125, 0.8125), (0.3125, 0.8125), (0.3125, 0.875), (0.28125, 0.875), (0.28125, 0.8125), (0.28125, 0.8125), (0.28125, 0.875), (0.25, 0.875), (0.25, 0.8125), (0.25, 0.8125), (0.25, 0.875), (0.21875, 0.875), (0.21875, 0.8125), (0.21875, 0.8125), (0.21875, 0.875), (0.1875, 0.875), (0.1875, 0.8125), (0.1875, 0.8125), (0.1875, 0.875), (0.15625, 0.875), (0.15625, 0.8125), (0.15625, 0.8125), (0.15625, 0.875), (0.125, 0.875), (0.125, 0.8125), (0.125, 0.8125), (0.125, 0.875), (0.09375, 0.875), (0.09375, 0.8125), (0.09375, 0.8125), (0.09375, 0.875), (0.0625, 0.875), (0.0625, 0.8125), (0.0625, 0.8125), (0.0625, 0.875), (0.03125, 0.875), (0.03125, 0.8125), (0.03125, 0.8125), (0.03125, 0.875), (0, 0.875), (0, 0.8125), (1, 0.875), (1, 0.9375), (0.96875, 0.9375), (0.96875, 0.875), (0.96875, 0.875), (0.96875, 0.9375), (0.9375, 0.9375), (0.9375, 0.875), (0.9375, 0.875), (0.9375, 0.9375), (0.90625, 0.9375), (0.90625, 0.875), (0.90625, 0.875), (0.90625, 0.9375), (0.875, 0.9375), (0.875, 0.875), (0.875, 0.875), (0.875, 0.9375), (0.84375, 0.9375), (0.84375, 0.875), (0.84375, 0.875), (0.84375, 0.9375), (0.8125, 0.9375), (0.8125, 0.875), (0.8125, 0.875), (0.8125, 0.9375), (0.78125, 0.9375), (0.78125, 0.875), (0.78125, 0.875), (0.78125, 0.9375), (0.75, 0.9375), (0.75, 0.875), (0.75, 0.875), (0.75, 0.9375), (0.71875, 0.9375), (0.71875, 0.875), (0.71875, 0.875), (0.71875, 0.9375), (0.6875, 0.9375), (0.6875, 0.875), (0.6875, 0.875), (0.6875, 0.9375), (0.65625, 0.9375), (0.65625, 0.875), (0.65625, 0.875), (0.65625, 0.9375), (0.625, 0.9375), (0.625, 0.875), (0.625, 0.875), (0.625, 0.9375), (0.59375, 0.9375), (0.59375, 0.875), (0.59375, 0.875), (0.59375, 0.9375), (0.5625, 0.9375), (0.5625, 0.875), (0.5625, 0.875), (0.5625, 0.9375), (0.53125, 0.9375), (0.53125, 0.875), (0.53125, 0.875), (0.53125, 0.9375), (0.5, 0.9375), (0.5, 0.875), (0.5, 0.875), (0.5, 0.9375), (0.46875, 0.9375), (0.46875, 0.875), (0.46875, 0.875), (0.46875, 0.9375), (0.4375, 0.9375), (0.4375, 0.875), (0.4375, 0.875), (0.4375, 0.9375), (0.40625, 0.9375), (0.40625, 0.875), (0.40625, 0.875), (0.40625, 0.9375), (0.375, 0.9375), (0.375, 0.875), (0.375, 0.875), (0.375, 0.9375), (0.34375, 0.9375), (0.34375, 0.875), (0.34375, 0.875), (0.34375, 0.9375), (0.3125, 0.9375), (0.3125, 0.875), (0.3125, 0.875), (0.3125, 0.9375), (0.28125, 0.9375), (0.28125, 0.875), (0.28125, 0.875), (0.28125, 0.9375), (0.25, 0.9375), (0.25, 0.875), (0.25, 0.875), (0.25, 0.9375), (0.21875, 0.9375), (0.21875, 0.875), (0.21875, 0.875), (0.21875, 0.9375), (0.1875, 0.9375), (0.1875, 0.875), (0.1875, 0.875), (0.1875, 0.9375), (0.15625, 0.9375), (0.15625, 0.875), (0.15625, 0.875), (0.15625, 0.9375), (0.125, 0.9375), (0.125, 0.875), (0.125, 0.875), (0.125, 0.9375), (0.09375, 0.9375), (0.09375, 0.875), (0.09375, 0.875), (0.09375, 0.9375), (0.0625, 0.9375), (0.0625, 0.875), (0.0625, 0.875), (0.0625, 0.9375), (0.03125, 0.9375), (0.03125, 0.875), (0.03125, 0.875), (0.03125, 0.9375), (0, 0.9375), (0, 0.875), (1, 0.9375), (1, 1), (0.96875, 0.9375), (0.96875, 0.9375), (0.96875, 1), (0.9375, 0.9375), (0.9375, 0.9375), (0.9375, 1), (0.90625, 0.9375), (0.90625, 0.9375), (0.90625, 1), (0.875, 0.9375), (0.875, 0.9375), (0.875, 1), (0.84375, 0.9375), (0.84375, 0.9375), (0.84375, 1), (0.8125, 0.9375), (0.8125, 0.9375), (0.8125, 1), (0.78125, 0.9375), (0.78125, 0.9375), (0.78125, 1), (0.75, 0.9375), (0.75, 0.9375), (0.75, 1), (0.71875, 0.9375), (0.71875, 0.9375), (0.71875, 1), (0.6875, 0.9375), (0.6875, 0.9375), (0.6875, 1), (0.65625, 0.9375), (0.65625, 0.9375), (0.65625, 1), (0.625, 0.9375), (0.625, 0.9375), (0.625, 1), (0.59375, 0.9375), (0.59375, 0.9375), (0.59375, 1), (0.5625, 0.9375), (0.5625, 0.9375), (0.5625, 1), (0.53125, 0.9375), (0.53125, 0.9375), (0.53125, 1), (0.5, 0.9375), (0.5, 0.9375), (0.5, 1), (0.46875, 0.9375), (0.46875, 0.9375), (0.46875, 1), (0.4375, 0.9375), (0.4375, 0.9375), (0.4375, 1), (0.40625, 0.9375), (0.40625, 0.9375), (0.40625, 1), (0.375, 0.9375), (0.375, 0.9375), (0.375, 1), (0.34375, 0.9375), (0.34375, 0.9375), (0.34375, 1), (0.3125, 0.9375), (0.3125, 0.9375), (0.3125, 1), (0.28125, 0.9375), (0.28125, 0.9375), (0.28125, 1), (0.25, 0.9375), (0.25, 0.9375), (0.25, 1), (0.21875, 0.9375), (0.21875, 0.9375), (0.21875, 1), (0.1875, 0.9375), (0.1875, 0.9375), (0.1875, 1), (0.15625, 0.9375), (0.15625, 0.9375), (0.15625, 1), (0.125, 0.9375), (0.125, 0.9375), (0.125, 1), (0.09375, 0.9375), (0.09375, 0.9375), (0.09375, 1), (0.0625, 0.9375), (0.0625, 0.9375), (0.0625, 1), (0.03125, 0.9375), (0.03125, 0.9375), (0.03125, 1), (0, 0.9375)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        token visibility = "invisible"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (139740.64654131603, 2437.054596924213, 206220.74420632358)
        double3 xformOp:translate = (0, -254475.83722378153, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

def Xform "Environment"
{
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 6000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        double3 xformOp:rotateXYZ = (315, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

def CesiumDataPrim "Cesium"
{
    prepend rel cesium:selectedIonServer = </CesiumServers/IonOfficial>
}

def CesiumGeoreferencePrim "CesiumGeoreference"
{
}

def "CesiumServers"
{
    def CesiumIonServerPrim "IonOfficial"
    {
        string cesium:ionServerApiUrl = "https://api.cesium.com/"
        int64 cesium:ionServerApplicationId = 413
        string cesium:ionServerUrl = "https://ion.cesium.com/"
        string cesium:projectDefaultIonAccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJjZGViMjAyNS1kNWY5LTRlM2QtODhkZC05MDY4NWY2ZWY0NDQiLCJpZCI6MTM5OTgwLCJpYXQiOjE2ODQ1MTk4MzF9.i0FVwDnL-9RxnWmiaT6q5RBBJ0UtykFkEi8UC3RGqCM"
        string cesium:projectDefaultIonAccessTokenId = "cdeb2025-d5f9-4e3d-88dd-90685f6ef444"
    }
}

def CesiumTilesetPrim "Cesium_World_Terrain" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    prepend rel cesium:georeferenceBinding = </CesiumGeoreference>
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 1
    prepend rel cesium:ionServerBinding = </CesiumServers/IonOfficial>
    uniform token cesium:sourceType = "ion"
    float3[] extent = [(-638713700, -1273740900, -640816300), (638713700, -590464, 636611140)]
    rel material:binding = </World/Looks/CustomCesium> (
        bindMaterialAs = "weakerThanDescendants"
    )

    def CesiumImageryPrim "Bing_Maps_Aerial_imagery"
    {
        string cesium:ionAccessToken = ""
        int64 cesium:ionAssetId = 2
        prepend rel cesium:ionServerBinding = </CesiumServers/IonOfficial>
    }
}

