#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (3085039.6163923084, 2054098.1286107549, 3822479.71495196)
                double3 target = (-5278.08035879815, -37806.76271561999, 44926.34727611765)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./CustomCesiumMDL.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def Scope "Looks"
    {
        def Material "CustomCTWBing" (
            customData = {
                dictionary ui = {
                    dictionary nodegraph = {
                        dictionary node = {
                            dictionary pos = {
                                double2 output = (257.4266662597656, -36.04356002807617)
                            }
                        }
                    }
                }
            }
        )
        {
            token outputs:displacement.connect = </World/Looks/CustomCTWBing/OmniPBRBase.outputs:out>
            token outputs:mdl:displacement.connect = </World/Looks/CustomCTWBing/OmniPBRBase.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/CustomCTWBing/OmniPBRBase.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/CustomCTWBing/OmniPBRBase.outputs:out>
            token outputs:surface.connect = </World/Looks/CustomCTWBing/OmniPBRBase.outputs:out>
            token outputs:volume.connect = </World/Looks/CustomCTWBing/OmniPBRBase.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "cesium_material" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_material"
                float inputs:alpha_cutoff (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Alpha Cutoff"
                    doc = """Threshold to decide between fully transparent and fully opaque when alpha mode is 'mask'.

"""
                    hidden = false
                    renderType = "float"
                )
                int inputs:alpha_mode (
                    customData = {
                        int default = 0
                    }
                    displayName = "Alpha Mode"
                    doc = """Select how to interpret the alpha value.

"""
                    hidden = false
                    renderType = "gltf_alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "opaque"
                        string options = "opaque:0|mask:1|blend:2"
                    }
                )
                float inputs:base_alpha (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Base Alpha"
                    doc = """Select between transparent (0.0) and opaque (1.0).

"""
                    hidden = false
                    renderType = "float"
                )
                color3f inputs:base_color_factor (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayName = "Base Color Factor"
                    doc = """The base color of the material.

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:base_color_factor.connect = </World/Looks/CustomCTWBing/construct_color_02.outputs:out>
                color3f inputs:emissive_factor (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayName = "Emissive Factor"
                    doc = """The emissive color of the material.

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:metallic_factor (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Metallic Factor"
                    doc = """The metalness of the material. Select between dielectric (0.0) and metallic (1.0).

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:roughness_factor (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Roughness Factor"
                    doc = """The roughness of the material. Select between very glossy (0.0) and dull (1.0).

"""
                    hidden = false
                    renderType = "float"
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (115.88848, -321.39655)
            }

            def Shader "xyz" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "xyz(float4)"
                float4 inputs:a (
                    customData = {
                        float4 default = (0, 0, 0, 0)
                    }
                    hidden = false
                    renderType = "float4"
                )
                float4 inputs:a.connect = </World/Looks/CustomCTWBing/cesium_base_color_texture_float4_01.outputs:out>
                float3 outputs:out (
                    renderType = "float3"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-499.82574, -276.2758)
            }

            def Shader "construct_color_02" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "construct_color(float3)"
                float3 inputs:a (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "float3"
                )
                float3 inputs:a.connect = </World/Looks/CustomCTWBing/xyz.outputs:out>
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-297.2888, -286.87875)
            }

            def Shader "OmniPBRBase" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                float3 inputs:clearcoat_geometry_normal (
                    customData = {
                        float3 default = (0, 0, 0)
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Normal"
                    hidden = true
                    renderType = "float3"
                )
                float2 inputs:coat_aniso_roughness (
                    customData = {
                        float2 default = (0, 0)
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat aniso roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = true
                    renderType = "float2"
                )
                color3f inputs:coat_color (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Tint"
                    doc = """Clearcoat is tinted and affects the underlying material

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:coat_ior (
                    customData = {
                        float default = 1.56
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                        dictionary soft_range = {
                            float max = 4
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat IOR"
                    doc = """Sets the Index of refraction for the coat layer

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_roughness (
                    customData = {
                        float default = 0
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_transparency (
                    customData = {
                        float default = 1
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Transparency"
                    doc = """Adjusts the transparency of the coat. Can be turned into a fully opaque coat covering the underlying layer

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:coat_weight (
                    customData = {
                        float default = 1
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Weight"
                    doc = """Sets the weight for coat layer

"""
                    hidden = false
                    renderType = "float"
                )
                color3f inputs:diffuse_reflection_color (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_reflection_color.connect = </World/Looks/CustomCTWBing/construct_color_02.outputs:out>
                color3f inputs:diffuse_tint (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = """When enabled, this color value is multiplied over the final albedo color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = """The emission color

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:emission_intensity (
                    customData = {
                        float default = 40
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = """Intensity of the emission

"""
                    hidden = false
                    renderType = "float"
                )
                bool inputs:enable_coat (
                    customData = {
                        bool default = 0
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Enable Clearcoat Layer"
                    doc = """Adds a coat layer on top of the material when enabled

"""
                    hidden = false
                    renderType = "bool"
                )
                bool inputs:enable_emission (
                    customData = {
                        bool default = 0
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = """Enables the emission of light from the material

"""
                    hidden = false
                    renderType = "bool"
                )
                bool inputs:enable_opacity (
                    customData = {
                        bool default = 0
                        dictionary displayGroup = {
                            string state = "open"
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = """Enables the use of cutout opacity

"""
                    hidden = false
                    renderType = "bool"
                )
                float3 inputs:geometry_normal (
                    customData = {
                        float3 default = (0, 0, 0)
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal"
                    hidden = true
                    renderType = "float3"
                )
                float inputs:geometry_opacity (
                    customData = {
                        float default = 1
                        dictionary displayGroup = {
                            string state = "open"
                        }
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = """Opacity value between 0 and 1, when Opacity Map is not valid

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:geometry_opacity_threshold (
                    customData = {
                        float default = 0
                        dictionary displayGroup = {
                            string state = "open"
                        }
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = """If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:metalness (
                    customData = {
                        float default = 0
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metalness"
                    doc = """Bias towards pure specular reflection

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:specular_level (
                    customData = {
                        float default = 0.5
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Specular"
                    doc = """The specular level (intensity) of the material

"""
                    hidden = false
                    renderType = "float"
                )
                float2 inputs:specular_reflection_aniso_roughness (
                    customData = {
                        float2 default = (0, 0)
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Aniso roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = true
                    renderType = "float2"
                )
                float inputs:specular_reflection_roughness (
                    customData = {
                        float default = 0
                        dictionary displayGroup = {
                            string state = "closed"
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness"
                    doc = """Higher roughness values lead to more blurry reflections

"""
                    hidden = false
                    renderType = "float"
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-57.952553, -102.4559)
            }

            def Shader "cesium_base_color_texture_float4_01" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_base_color_texture_float4"
                token inputs:base_color_texture (
                    connectability = "interfaceOnly"
                    hidden = true
                    renderType = "gltf_texture_lookup_value"
                )
                float4 outputs:out (
                    renderType = "float4"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-786.90485, -241.54932)
            }
        }
    }
}

def Xform "Environment"
{
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        double3 xformOp:rotateXYZ = (315, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

def CesiumDataPrim "Cesium"
{
    prepend rel cesium:selectedIonServer = </CesiumServers/IonOfficial>
}

def CesiumGeoreferencePrim "CesiumGeoreference"
{
}

def "CesiumServers"
{
    def CesiumIonServerPrim "IonOfficial"
    {
        string cesium:ionServerApiUrl = "https://api.cesium.com/"
        int64 cesium:ionServerApplicationId = 413
        string cesium:ionServerUrl = "https://ion.cesium.com/"
        string cesium:projectDefaultIonAccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJjZGViMjAyNS1kNWY5LTRlM2QtODhkZC05MDY4NWY2ZWY0NDQiLCJpZCI6MTM5OTgwLCJpYXQiOjE2ODQ1MTk4MzF9.i0FVwDnL-9RxnWmiaT6q5RBBJ0UtykFkEi8UC3RGqCM"
        string cesium:projectDefaultIonAccessTokenId = "cdeb2025-d5f9-4e3d-88dd-90685f6ef444"
    }
}

def CesiumTilesetPrim "Cesium_World_Terrain" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    prepend rel cesium:georeferenceBinding = </CesiumGeoreference>
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 1
    prepend rel cesium:ionServerBinding = </CesiumServers/IonOfficial>
    uniform token cesium:sourceType = "ion"
    float3[] extent = [(-638713700, -1273740900, -640816300), (638713700, -590464, 636611140)]
    rel material:binding = </World/Looks/CustomCTWBing> (
        bindMaterialAs = "weakerThanDescendants"
    )

    def CesiumImageryPrim "Bing_Maps_Aerial_imagery"
    {
        string cesium:ionAccessToken = ""
        int64 cesium:ionAssetId = 2
        prepend rel cesium:ionServerBinding = </CesiumServers/IonOfficial>
    }
}

