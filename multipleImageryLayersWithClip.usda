#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (-287960857.23217756, 1338907917.8266287, 1976552129.7483878)
                double3 target = (-5.960464477539063e-8, -637165696, -2102592)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./multipleImageryLayersWithClip.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    rel material:binding = </World/Looks/CesiumCustom> (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Scope "Looks"
    {
        def Material "CesiumCustom" (
            customData = {
                dictionary ui = {
                    dictionary nodegraph = {
                        dictionary node = {
                            dictionary pos = {
                                double2 output = (310.859375, -645.2258911132812)
                            }
                        }
                    }
                }
            }
        )
        {
            token outputs:displacement
            token outputs:mdl:displacement.connect = </World/Looks/CesiumCustom/cesium_material.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/CesiumCustom/cesium_material.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/CesiumCustom/cesium_material.outputs:out>
            token outputs:out (
                renderType = "material"
            )
            token outputs:surface
            token outputs:volume
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "cesium_imagery_layer_float4" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_imagery_layer_float4"
                token inputs:imagery_layer (
                    connectability = "interfaceOnly"
                    hidden = true
                    renderType = "gltf_texture_lookup_value"
                )
                int inputs:imagery_layer_index (
                    customData = {
                        int default = 0
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                    renderType = "int"
                )
                float4 outputs:out (
                    renderType = "float4"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-651.7598, -566.44824)
            }

            def Shader "xyz" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "xyz(float4)"
                float4 inputs:a (
                    customData = {
                        float4 default = (0, 0, 0, 0)
                    }
                    hidden = false
                    renderType = "float4"
                )
                float4 inputs:a.connect = </World/Looks/CesiumCustom/cesium_imagery_layer_float4.outputs:out>
                float3 outputs:out (
                    renderType = "float3"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-400.3102, -569.5005)
            }

            def Shader "cesium_material" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_material"
                float inputs:alpha_cutoff (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Alpha Cutoff"
                    doc = """Threshold to decide between fully transparent and fully opaque when alpha mode is 'mask'.

"""
                    hidden = false
                    renderType = "float"
                )
                int inputs:alpha_mode = 2 (
                    customData = {
                        int default = 0
                    }
                    displayName = "Alpha Mode"
                    doc = """Select how to interpret the alpha value.

"""
                    hidden = false
                    renderType = "gltf_alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "opaque"
                        string options = "opaque:0|mask:1|blend:2"
                    }
                )
                float inputs:base_alpha (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Base Alpha"
                    doc = """Select between transparent (0.0) and opaque (1.0).

"""
                    hidden = false
                    renderType = "float"
                )
                color3f inputs:base_color_factor (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayName = "Base Color Factor"
                    doc = """The base color of the material.

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:base_color_factor.connect = </World/Looks/CesiumCustom/blend_colors.outputs:color>
                color3f inputs:emissive_factor (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    displayName = "Emissive Factor"
                    doc = """The emissive color of the material.

"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:metallic_factor (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Metallic Factor"
                    doc = """The metalness of the material. Select between dielectric (0.0) and metallic (1.0).

"""
                    hidden = false
                    renderType = "float"
                )
                float inputs:roughness_factor (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Roughness Factor"
                    doc = """The roughness of the material. Select between very glossy (0.0) and dull (1.0).

"""
                    hidden = false
                    renderType = "float"
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (91.81501, -619.93665)
            }

            def Shader "cesium_imagery_layer_float4_01" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_imagery_layer_float4"
                token inputs:imagery_layer (
                    connectability = "interfaceOnly"
                    hidden = true
                    renderType = "gltf_texture_lookup_value"
                )
                int inputs:imagery_layer_index = 1 (
                    customData = {
                        int default = 0
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                    renderType = "int"
                )
                float4 outputs:out (
                    renderType = "float4"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-652.9185, -369.67352)
            }

            def Shader "xyz_01" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "xyz(float4)"
                float4 inputs:a (
                    customData = {
                        float4 default = (0, 0, 0, 0)
                    }
                    hidden = false
                    renderType = "float4"
                )
                float4 inputs:a.connect = </World/Looks/CesiumCustom/cesium_imagery_layer_float4_01.outputs:out>
                float3 outputs:out (
                    renderType = "float3"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-400.88446, -385.05588)
            }

            def NodeGraph "blend_colors" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:color_1", "inputs:color_2", "inputs:mode", "inputs:weight", "inputs:linear_blend", "outputs:tex", "outputs:color", "outputs:mono", "outputs:r", "outputs:g", "outputs:b"]
                color3f inputs:color_1 (
                    customData = {
                        double3 default = (0, 0, 0)
                    }
                    displayName = "Color 1"
                    renderType = "color"
                )
                color3f inputs:color_1.connect = </World/Looks/CesiumCustom/xyz.outputs:out>
                color3f inputs:color_2 (
                    customData = {
                        double3 default = (1, 1, 1)
                    }
                    displayName = "Color 2"
                    renderType = "color"
                )
                color3f inputs:color_2.connect = </World/Looks/CesiumCustom/xyz_01.outputs:out>
                bool inputs:linear_blend (
                    customData = {
                        bool default = 1
                    }
                    displayName = "Linear blend"
                    renderType = "bool"
                )
                int inputs:mode = 1 (
                    customData = {
                        int default = 0
                    }
                    displayName = "Blend mode"
                    renderType = "color_layer_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "color_layer_blend"
                        string options = "color_layer_blend:0|color_layer_add:1|color_layer_multiply:2|color_layer_screen:3|color_layer_overlay:4|color_layer_brightness:5|color_layer_color:6|color_layer_exclusion:7|color_layer_average:8|color_layer_lighten:9|color_layer_darken:10|color_layer_sub:11|color_layer_negation:12|color_layer_difference:13|color_layer_softlight:14|color_layer_colordodge:15|color_layer_reflect:16|color_layer_colorburn:17|color_layer_phoenix:18|color_layer_hardlight:19|color_layer_pinlight:20|color_layer_hardmix:21|color_layer_lineardodge:22|color_layer_linearburn:23|color_layer_spotlight:24|color_layer_spotlightblend:25|color_layer_hue:26|color_layer_saturation:27"
                    }
                )
                float inputs:weight = 0.29999998 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayName = "Blend weight"
                    renderType = "float"
                )
                float outputs:b (
                    renderType = "float"
                )
                float outputs:b.connect = </World/Looks/CesiumCustom/blend_colors/z.outputs:out>
                color3f outputs:color (
                    renderType = "color"
                )
                color3f outputs:color.connect = </World/Looks/CesiumCustom/blend_colors/construct_color.outputs:out>
                float outputs:g (
                    renderType = "float"
                )
                float outputs:g.connect = </World/Looks/CesiumCustom/blend_colors/y.outputs:out>
                float outputs:mono (
                    renderType = "float"
                )
                float outputs:mono.connect = </World/Looks/CesiumCustom/blend_colors/construct_float.outputs:out>
                float outputs:r (
                    renderType = "float"
                )
                float outputs:r.connect = </World/Looks/CesiumCustom/blend_colors/x.outputs:out>
                token outputs:tex (
                    renderType = "texture_return"
                )
                token outputs:tex.connect = </World/Looks/CesiumCustom/blend_colors/blend_colors.outputs:out>
                custom token ui:description = "Allows combining textures and colors in varied ways"
                uniform token ui:displayGroup = "Texturing, high level"
                uniform token ui:displayName = "Blend colors"
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform asset ui:nodegraph:node:icon = @core_definitions.blend_colors.png@
                uniform float2 ui:nodegraph:node:pos = (-138.5486, -553.4547)
                custom int ui:order = 33

                def Shader "blend_colors"
                {
                    reorder properties = ["inputs:color_1", "inputs:color_2", "inputs:mode", "inputs:weight", "inputs:linear_blend"]
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/core_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "blend_colors(color,color,::base::color_layer_mode,float,bool)"
                    color3f inputs:color_1 (
                        customData = {
                            double3 default = (0, 0, 0)
                        }
                        displayName = "Color 1"
                        renderType = "color"
                    )
                    color3f inputs:color_1.connect = </World/Looks/CesiumCustom/blend_colors.inputs:color_1>
                    color3f inputs:color_2 (
                        customData = {
                            double3 default = (1, 1, 1)
                        }
                        displayName = "Color 2"
                        renderType = "color"
                    )
                    color3f inputs:color_2.connect = </World/Looks/CesiumCustom/blend_colors.inputs:color_2>
                    bool inputs:linear_blend (
                        customData = {
                            bool default = 1
                        }
                        displayName = "Linear blend"
                        doc = "The blend opperation can either be applied in linear or gamma (2.2) color space"
                        renderType = "bool"
                    )
                    bool inputs:linear_blend.connect = </World/Looks/CesiumCustom/blend_colors.inputs:linear_blend>
                    int inputs:mode (
                        customData = {
                            int default = 0
                        }
                        displayName = "Blend mode"
                        doc = "Describes how Color 1 and Color 2 are combined"
                        renderType = "color_layer_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "color_layer_blend"
                            string options = "color_layer_blend:0|color_layer_add:1|color_layer_multiply:2|color_layer_screen:3|color_layer_overlay:4|color_layer_brightness:5|color_layer_color:6|color_layer_exclusion:7|color_layer_average:8|color_layer_lighten:9|color_layer_darken:10|color_layer_sub:11|color_layer_negation:12|color_layer_difference:13|color_layer_softlight:14|color_layer_colordodge:15|color_layer_reflect:16|color_layer_colorburn:17|color_layer_phoenix:18|color_layer_hardlight:19|color_layer_pinlight:20|color_layer_hardmix:21|color_layer_lineardodge:22|color_layer_linearburn:23|color_layer_spotlight:24|color_layer_spotlightblend:25|color_layer_hue:26|color_layer_saturation:27"
                        }
                    )
                    int inputs:mode.connect = </World/Looks/CesiumCustom/blend_colors.inputs:mode>
                    float inputs:weight (
                        customData = {
                            double default = 1
                        }
                        displayName = "Blend weight"
                        doc = "Defines strength of the effect. At weight of 0, only color 1 will be visible. At weight 1, the blend function will have full effect"
                        renderType = "float"
                    )
                    float inputs:weight.connect = </World/Looks/CesiumCustom/blend_colors.inputs:weight>
                    token outputs:out (
                        renderType = "texture_return"
                    )
                }

                def Shader "construct_float"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "construct_float(::base::texture_return)"
                    token inputs:a (
                        renderType = "texture_return"
                    )
                    token inputs:a.connect = </World/Looks/CesiumCustom/blend_colors/blend_colors.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "construct_color"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "construct_color(::base::texture_return)"
                    token inputs:a (
                        renderType = "texture_return"
                    )
                    token inputs:a.connect = </World/Looks/CesiumCustom/blend_colors/blend_colors.outputs:out>
                    color3f outputs:out (
                        renderType = "color"
                    )
                }

                def Shader "x"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "x(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CesiumCustom/blend_colors/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "y"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "y(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CesiumCustom/blend_colors/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }

                def Shader "z"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "z(color)"
                    color3f inputs:a (
                        renderType = "color"
                    )
                    color3f inputs:a.connect = </World/Looks/CesiumCustom/blend_colors/construct_color.outputs:out>
                    float outputs:out (
                        renderType = "float"
                    )
                }
            }
        }

        def Material "OmniPBRDefault"
        {
            token outputs:mdl:displacement.connect = </World/Looks/OmniPBRDefault/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/OmniPBRDefault/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/OmniPBRDefault/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def Mesh "Cube" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
        rel material:binding = </World/Looks/OmniPBRDefault> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, -50, 50), (50, -50, 50), (-50, 50, 50), (50, 50, 50), (-50, -50, -50), (50, -50, -50), (-50, 50, -50), (50, 50, -50)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

def Xform "Environment"
{
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        double3 xformOp:rotateXYZ = (315, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

def CesiumDataPrim "Cesium"
{
}

def CesiumGeoreferencePrim "CesiumGeoreference"
{
}

def "CesiumServers"
{
    def CesiumIonServerPrim "IonOfficial"
    {
        string cesium:projectDefaultIonAccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJjZGViMjAyNS1kNWY5LTRlM2QtODhkZC05MDY4NWY2ZWY0NDQiLCJpZCI6MTM5OTgwLCJpYXQiOjE2ODQ1MTk4MzF9.i0FVwDnL-9RxnWmiaT6q5RBBJ0UtykFkEi8UC3RGqCM"
        string cesium:projectDefaultIonAccessTokenId = "cdeb2025-d5f9-4e3d-88dd-90685f6ef444"
    }
}

def CesiumTilesetPrim "Cesium_World_Terrain_02" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    prepend rel cesium:georeferenceBinding = </CesiumGeoreference>
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 1
    uniform token cesium:sourceType = "ion"
    float3[] extent = [(-638713700, -1273740900, -640816300), (638713700, -590464, 636611140)]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )
    token visibility = "inherited"

    def CesiumIonImageryPrim "Bing_Maps_Aerial_imagery"
    {
        string cesium:ionAccessToken = ""
        int64 cesium:ionAssetId = 2
    }

    def CesiumIonImageryPrim "Earth_at_Night"
    {
        float cesium:alpha = 1.5
        int64 cesium:ionAssetId = 3812
    }
}

