#usda 1.0
(
    """ This file describes an example schema for code generation using
        usdGenSchema.
    """
    subLayers = [
        @usd/schema.usda@
    ]
)

over "GLOBAL" (
    customData = {
        string libraryName       = "cesium"
        string libraryPath       = "./"
        string libraryPrefix     = "Cesium"
    }
) {
}

class CesiumDataPrim "CesiumDataPrim" (
    doc = """Stores stage level data for Cesium for Omniverse/USD."""
    inherits = </Typed>
    customData = {
        string className = "Data"
    }
) {
    string cesium:projectDefaultIonAccessToken = "" (
        customData = {
            string apiName = "projectDefaultIonAccessToken"
        }
        displayName = "Project default ion Access Token"
        doc = "A string representing the token for accessing Cesium ion assets."
    )

    string cesium:projectDefaultIonAccessTokenId = "" (
        customData = {
            string apiName = "projectDefaultIonAccessTokenId"
        }
        displayName = "Project default ion Access Token ID"
        doc = "A string representing the token ID for accessing Cesium ion assets."
    )

    double cesium:georeferenceOrigin:longitude = -105.25737 (
        customData = {
            string apiName = "georeferenceOriginLongitude"
        }
        displayName = "Georeference Origin Longitude"
        doc = "The longitude of the origin in degrees, in the range [-180, 180]."
    )

    double cesium:georeferenceOrigin:latitude = 39.736401  (
        customData = {
            string apiName = "georeferenceOriginLatitude"
        }
        displayName = "Georeference Original Latitude"
        doc = "The latitude of the origin in degrees, in the range [-90, 90]."
    )

    double cesium:georeferenceOrigin:height = 2250.0 (
        customData = {
            string apiName = "georeferenceOriginHeight"
        }
        displayName = "Georeference Origin Height"
        doc = "The height of the origin in meters above the WGS84 ellipsoid. Do not confuse this with a geoid height or height above mean sea level, which can be tens of meters higher or lower depending on where in the world the origin is located."
    )

    bool cesium:debug:disableMaterials = false (
        customData = {
            string apiName = "debugDisableMaterials"
        }
        displayName = "Disable Materials"
        doc = "Debug option that renders tilesets with materials disabled."
    )

    bool cesium:debug:disableGeometryPool = true (
        customData = {
            string apiName = "debugDisableGeometryPool"
        }
        displayName = "Disable Geometry Pool"
        doc = "Debug option that disables geometry pooling."
    )

    bool cesium:debug:disableMaterialPool = false (
        customData = {
            string apiName = "debugDisableMaterialPool"
        }
        displayName = "Disable Material Pool"
        doc = "Debug option that disables material pooling."
    )

    uint64 cesium:debug:geometryPoolInitialCapacity = 0 (
        customData = {
            string apiName = "debugGeometryPoolInitialCapacity"
        }
        displayName = "Geometry Pool Initial Capacity"
        doc = "Debug option that controls the initial capacity of the geometry pool."
    )

    uint64 cesium:debug:materialPoolInitialCapacity = 2048 (
        customData = {
            string apiName = "debugMaterialPoolInitialCapacity"
        }
        displayName = "Material Pool Initial Capacity"
        doc = "Debug option that controls the initial capacity of the material pool."
    )
}

class CesiumSessionPrim "CesiumSessionPrim" (
    doc = """Stores session layer state for Cesium for Omniverse/USD."""
    inherits = </Typed>
    customData = {
        string className = "Session"
    }
) {
    matrix4d cesium:ecefToUsdTransform (
        customData = {
            string apiName = "ecefToUsdTransform"
        }
        displayName = "ECEF to USD Transform"
        doc = "The 4x4 transformation matrix (row major) from global ECEF coordinates to USD stage coordinates based on the georeference origin."
    )
}

class "CesiumTilesetSchemaAPI" (
    doc = """Adds Cesium specific data to a prim for representing a tileset."""
    inherits = </APISchemaBase>
    customData = {
        string className = "TilesetAPI"
        token apiSchemaType = "singleApply"
    }
) {
    uniform token cesium:sourceType = "ion" (
        customData = {
            string apiName = "sourceType"
        }
        allowedTokens = ["ion", "url"]
        displayName = "Source Type"
        doc = "Selects whether to use the Cesium ion Asset ID or the provided URL for this tileset."
    )

    string cesium:url = "" (
        customData = {
            string apiName = "url"
        }
        displayName = "URL"
        doc = "The URL of this tileset's tileset.json file. Usually blank if this is an ion asset."
    )

    int64 cesium:ionAssetId = 0 (
        customData = {
            string apiName = "ionAssetId"
        }
        displayName = "ion Asset ID"
        doc = "The ID of the Cesium ion asset to use. Usually blank if using URL."
    )

    string cesium:ionAccessToken = "" (
        customData = {
            string apiName = "ionAccessToken"
        }
        displayName = "ion Access Token"
        doc = "The access token to use to access the Cesium ion resource. Overrides the default token. Usually blank if using URL."
    )

    float cesium:maximumScreenSpaceError = 16 (
        customData = {
            string apiName = "maximumScreenSpaceError"
        }
        displayName = "Maximum Screen Space Error"
        doc = "The maximum number of pixels of error when rendering this tileset. This is used to select an appropriate level-of-detail: A low value will cause many tiles with a high level of detail to be loaded, causing a finer visual representation of the tiles, but with a higher performance cost for loading and rendering. A higher value will cause a coarser visual representation, with lower performance requirements. When a tileset uses the older layer.json / quantized-mesh format rather than 3D Tiles, this value is effectively divided by 8.0. So the default value of 16.0 corresponds to the standard value for quantized-mesh terrain of 2.0."
    )

    bool cesium:preloadAncestors = true (
        customData = {
            string apiName = "preloadAncestors"
        }
        displayName = "Preload Ancestors"
        doc = "Whether to preload ancestor tiles. Setting this to true optimizes the zoom-out experience and provides more detail in newly-exposed areas when panning. The down side is that it requires loading more tiles."
    )

    bool cesium:preloadSiblings = true (
        customData = {
            string apiName = "preloadSiblings"
        }
        displayName = "Preload Siblings"
        doc = "Whether to preload sibling tiles. Setting this to true causes tiles with the same parent as a rendered tile to be loaded, even if they are culled. Setting this to true may provide a better panning experience at the cost of loading more tiles."
    )

    bool cesium:forbidHoles = false (
        customData = {
            string apiName = "forbidHoles"
        }
        displayName = "Forbid Holes"
        doc = "Whether to prevent refinement of a parent tile when a child isn't done loading. When this is set to true, the tileset will guarantee that the tileset will never be rendered with holes in place of tiles that are not yet loaded, even though the tile that is rendered instead may have low resolution. When false, overall loading will be faster, but newly-visible parts of the tileset may initially be blank."
    )

    uint cesium:maximumSimultaneousTileLoads = 20 (
        customData = {
            string apiName = "maximumSimultaneousTileLoads"
        }
        displayName = "Maximum Simultaneous Tile Loads"
        doc = "The maximum number of tiles that may be loaded at once. When new parts of the tileset become visible, the tasks to load the corresponding tiles are put into a queue. This value determines how many of these tasks are processed at the same time. A higher value may cause the tiles to be loaded and rendered more quickly, at the cost of a higher network and processing load."
    )

    uint64 cesium:maximumCachedBytes = 536870912 (
        customData = {
            string apiName = "maximumCachedBytes"
        }
        displayName = "Maximum Cached Bytes"
        doc = "The maximum number of bytes that may be cached. Note that this value, even if 0, will never cause tiles that are needed for rendering to be unloaded. However, if the total number of loaded bytes is greater than this value, tiles will be unloaded until the total is under this number or until only required tiles remain, whichever comes first."
    )

    uint cesium:loadingDescendantLimit = 20 (
        customData = {
            string apiName = "loadingDescendantLimit"
        }
        displayName = "Loading Descendant Limit"
        doc = "The number of loading descendants a tile should allow before deciding to render itself instead of waiting. Setting this to 0 will cause each level of detail to be loaded successively. This will increase the overall loading time, but cause additional detail to appear more gradually. Setting this to a high value like 1000 will decrease the overall time until the desired level of detail is achieved, but this high-detail representation will appear at once, as soon as it is loaded completely."
    )

    bool cesium:enableFrustumCulling = true (
        customData = {
            string apiName = "enableFrustumCulling"
        }
        displayName = "Enable Frustum Culling"
        doc = "Whether to cull tiles that are outside the frustum. By default this is true, meaning that tiles that are not visible with the current camera configuration will be ignored. It can be set to false, so that these tiles are still considered for loading, refinement and rendering. This will cause more tiles to be loaded, but helps to avoid holes and provides a more consistent mesh, which may be helpful for physics and shadows. Note that this will always be disabled if Use Lod Transitions is set to true."
    )

    bool cesium:enableFogCulling = true (
        customData = {
            string apiName = "enableFogCulling"
        }
        displayName = "Enable Fog Culling"
        doc = "Whether to cull tiles that are occluded by fog. This does not refer to the atmospheric fog rendered by Unity, but to an internal representation of fog: Depending on the height of the camera above the ground, tiles that are far away (close to the horizon) will be culled when this flag is enabled. Note that this will always be disabled if Use Lod Transitions is set to true."
    )

    bool cesium:enforceCulledScreenSpaceError = true (
        customData = {
            string apiName = "enforceCulledScreenSpaceError"
        }
        displayName = "Enforce Culled Screen Space Error"
        doc = "Whether a specified screen-space error should be enforced for tiles that are outside the frustum or hidden in fog. When Enable Frustum Culling and Enable Fog Culling are both true, tiles outside the view frustum or hidden in fog are effectively ignored, and so their level-of-detail doesn't matter. And in this scenario, this property is ignored. However, when either of those flags are false, these would-be-culled tiles continue to be processed, and the question arises of how to handle their level-of-detail. When this property is false, refinement terminates at these tiles, no matter what their current screen-space error. The tiles are available for physics, shadows, etc., but their level-of-detail may be very low. When set to true, these tiles are refined until they achieve the specified Culled Screen Space Error. This allows control over the minimum quality of these would-be-culled tiles."
    )

    float cesium:culledScreenSpaceError = 64 (
        customData = {
            string apiName = "culledScreenSpaceError"
        }
        displayName = "Culled Screen Space Error"
        doc = "The screen-space error to be enforced for tiles that are outside the frustum or hidden in fog. When Enable Frustum Culling and Enable Fog Culling are both true, tiles outside the view frustum or hidden in fog are effectively ignored, and so their level-of-detail doesn't matter. And in this scenario, this property is ignored. However, when either of those flags are false, these would-be-culled tiles continue to be processed, and the question arises of how to handle their level-of-detail. When this property is false, refinement terminates at these tiles, no matter what their current screen-space error. The tiles are available for physics, shadows, etc., but their level-of-detail may be very low. When set to true, these tiles are refined until they achieve the specified Culled Screen Space Error. This allows control over the minimum quality of these would-be-culled tiles."
    )

    bool cesium:suspendUpdate = false (
        customData = {
            string apiName = "suspendUpdate"
        }
        displayName = "Suspend Update"
        doc = "Pauses level-of-detail and culling updates of this tileset."
    )

    bool cesium:smoothNormals = false (
        customData = {
            string apiName = "smoothNormals"
        }
        displayName = "Smooth Normals"
        doc = "Generate smooth normals instead of flat normals when normals are missing."
    )

    bool cesium:showCreditsOnScreen = false (
        customData = {
            string apiName = "showCreditsOnScreen"
        }
        displayName = "Show Credits On Screen"
        doc = "Whether or not to show this tileset's credits on screen."
    )
}

class CesiumImageryPrim "CesiumImageryPrim" (
    doc = """Adds a prim for representing an imagery layer. Should be a child of a tileset."""
    inherits = </Typed>
    customData = {
        string className = "Imagery"
    }
) {
    int64 cesium:ionAssetId = 0 (
        customData = {
            string apiName = "ionAssetId"
        }
        displayName = "ion Asset ID"
        doc = "The ID of the Cesium ion asset to use."
    )

    string cesium:ionAccessToken = "" (
        customData = {
            string apiName = "ionAccessToken"
        }
        displayName = "ion Access Token"
        doc = "The access token to use to access the Cesium ion resource. Overrides the default token. Blank if using URL."
    )

    bool cesium:showCreditsOnScreen = false (
        customData = {
            string apiName = "showCreditsOnScreen"
        }
        displayName = "Show Credits On Screen"
        doc = "Whether or not to show this imagery layer's credits on screen."
    )
}
