mdl 1.8;

import ::anno::*;
import ::state::*;
import ::tex::*;

using ::gltf::pbr import *;

module [[
    anno::version( 1, 0, 0),
    anno::display_name("Cesium MDL functions")
]];

// For internal use only
export gltf_texture_lookup_value cesium_texture_lookup(*) [[ anno::hidden() ]] = gltf_texture_lookup();
export material cesium_material(*) [[ anno::hidden() ]] = gltf_material();

export gltf_texture_lookup_value cesium_texture_array_lookup(
    uniform int texture_count = 0,
    gltf_texture_lookup_value texture_0 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_1 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_2 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_3 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_4 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_5 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_6 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_7 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_8 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_9 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_10 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_11 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_12 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_13 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_14 = gltf_texture_lookup(),
    gltf_texture_lookup_value texture_15 = gltf_texture_lookup()
) [[ anno::hidden() ]]
{
    // The array length should match MAX_TEXTURE_LAYER_COUNT in Tokens.h
    gltf_texture_lookup_value[16] texture_values(
        texture_0,
        texture_1,
        texture_2,
        texture_3,
        texture_4,
        texture_5,
        texture_6,
        texture_7,
        texture_8,
        texture_9,
        texture_10,
        texture_11,
        texture_12,
        texture_13,
        texture_14,
        texture_15,
    );

    float3 final = float3(1.0, 1.0, 1.0);

    for (int i = 0; i < texture_count; i++) {
        gltf_texture_lookup_value value = texture_values[i];
        if (value.valid) {
            float3 rgb = float3(value.value[0], value.value[1], value.value[2]);
            float alpha = value.value[3];
            final = alpha * rgb + (1.0 - alpha) * final;
        }
    }

    gltf_texture_lookup_value tex_ret;
    tex_ret.value = float4(final[0], final[1], final[2], 1.0);
    tex_ret.valid = true;

    return tex_ret;
}
