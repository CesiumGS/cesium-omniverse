mdl 1.8;

import ::anno::*;
import ::state::*;
import ::tex::*;

using ::gltf::pbr import *;

module [[
    anno::version( 1, 0, 0),
    anno::display_name("Cesium MDL functions")
]];

annotation annotation_not_connectable();

export float4 cesium_base_color_texture_float4(
    gltf_texture_lookup_value base_color_texture = gltf_texture_lookup_value()
    [[
        anno::hidden(),
        annotation_not_connectable()
    ]]
)
[[
    anno::display_name("Cesium base color texture lookup float4"),
    anno::description("Returns the base color texture as a float4. Returns [0, 0, 0, 0] if the base color texture does not exist."),
    anno::author("Cesium GS Inc."),
    anno::in_group("Cesium")
]]
{
    return base_color_texture.valid ? base_color_texture.value : float4(0.0);
}

export float4 cesium_imagery_layer_float4(
    gltf_texture_lookup_value imagery_layer = gltf_texture_lookup_value()
    [[
        anno::hidden(),
        annotation_not_connectable()
    ]],
    int imagery_layer_index = 0
    [[
        anno::unused()
    ]]
)
[[
    anno::display_name("Cesium imagery layer lookup float4"),
    anno::description("Returns the imagery layer at the given index as a float4. Returns [0, 0, 0, 0] if the imagery layer does not exist."),
    anno::author("Cesium GS Inc."),
    anno::in_group("Cesium")
]]
{
    return imagery_layer.valid ? imagery_layer.value : float4(0.0);
}

export material cesium_material(
    uniform color base_color_factor = color(1.0)
    [[
        anno::display_name("Base Color Factor"),
        anno::description("The base color of the material.")
    ]],
    uniform float metallic_factor = 0.0
    [[
        anno::hard_range(0.0, 1.0),
        anno::display_name("Metallic Factor"),
        anno::description("The metalness of the material. Select between dielectric (0.0) and metallic (1.0).")
    ]],

    uniform float roughness_factor = 1.0
    [[
        anno::hard_range(0.0, 1.0),
        anno::display_name("Roughness Factor"),
        anno::description("The roughness of the material. Select between very glossy (0.0) and dull (1.0).")
    ]],
    uniform color emissive_factor = color(0.0)
    [[
        anno::display_name("Emissive Factor"),
        anno::description("The emissive color of the material.")
    ]],
    uniform gltf_alpha_mode alpha_mode = opaque
    [[
        anno::display_name("Alpha Mode"),
        anno::description("Select how to interpret the alpha value.")
    ]],
    uniform float base_alpha = 1.0
    [[
        anno::hard_range(0.0, 1.0),
        anno::display_name("Base Alpha"),
        anno::description("Select between transparent (0.0) and opaque (1.0)."),
        anno::enable_if("alpha_mode!=opaque")
    ]],
    uniform float alpha_cutoff  = 0.5
    [[
        anno::hard_range(0.0, 1.0),
        anno::display_name("Alpha Cutoff"),
        anno::description("Threshold to decide between fully transparent and fully opaque when alpha mode is 'mask'."),
        anno::enable_if("alpha_mode==mask")
    ]]
) [[
    anno::display_name("Cesium PBR material"),
    anno::description("Cesium metallic-roughness material based off glTF PBR model"),
    anno::author("Cesium GS Inc."),
    anno::in_group("Cesium")
]] = let {
    material base = gltf_material(
        base_color_factor: base_color_factor,
        metallic_factor: metallic_factor,
        roughness_factor: roughness_factor,
        emissive_factor: emissive_factor,
        alpha_mode: alpha_mode,
        base_alpha: base_alpha,
        alpha_cutoff: alpha_cutoff
    );

} in material(
    thin_walled: base.thin_walled,
    surface: base.surface,
    volume: base.volume,
    ior: base.ior,
    geometry: base.geometry
);

float4 alpha_blend(float4 src, float4 dst) {
    return src * float4(src.w, src.w, src.w, 1.0) + dst * (1.0 - src.w);
}

float4 compute_base_color(
    gltf_texture_lookup_value imagery_layers_texture,
    color debug_color,
    gltf_texture_lookup_value base_color_texture,
    color base_color_factor,
    float base_alpha) {

    auto debug_color_float3 = float3(debug_color);
    auto base_color_factor_float3 = float3(base_color_factor);

    auto base_color = base_color_texture.valid ? base_color_texture.value : float4(1.0);
    base_color *= float4(base_color_factor_float3.x, base_color_factor_float3.y, base_color_factor_float3.z, base_alpha);
    base_color = alpha_blend(imagery_layers_texture.value, base_color);
    base_color *= float4(debug_color_float3.x, debug_color_float3.y, debug_color_float3.z, 1.0);

    return base_color;
}

export gltf_texture_lookup_value cesium_internal_texture_lookup(*) [[ anno::hidden() ]] = gltf_texture_lookup();

export gltf_texture_lookup_value cesium_internal_imagery_layer_lookup(
    uniform float alpha = 1.0,
    // gltf_texture_lookup inputs below
    uniform texture_2d texture = texture_2d(),
    uniform int tex_coord_index = 0,
    uniform float2 offset = float2(0.0, 0.0),
    uniform float rotation = 0.0,
    uniform float2 scale = float2(1.0, 1.0),
    uniform gltf_wrapping_mode wrap_s = repeat,
    uniform gltf_wrapping_mode wrap_t = repeat
) [[ anno::hidden() ]] {
    auto imagery_layer = gltf_texture_lookup(
        texture: texture,
        tex_coord_index: tex_coord_index,
        offset: offset,
        rotation: rotation,
        scale: scale,
        wrap_s: wrap_s,
        wrap_t: wrap_t
    );

    if (imagery_layer.valid) {
        imagery_layer.value.w *= alpha;
    }

    return imagery_layer;
}

export material cesium_internal_material(
    gltf_texture_lookup_value imagery_layers_texture = gltf_texture_lookup_value(true, float4(0.0)),
    uniform color debug_color = color(1.0),
    // gltf_material inputs below
    gltf_texture_lookup_value base_color_texture = gltf_texture_lookup_value(),
    uniform color base_color_factor = color(1.0),
    uniform float metallic_factor = 1.0,
    uniform float roughness_factor = 1.0,
    uniform color emissive_factor = color(0.0),
    uniform gltf_alpha_mode alpha_mode = opaque,
    uniform float base_alpha = 1.0,
    uniform float alpha_cutoff  = 0.5
) [[ anno::hidden() ]] = let {
    auto base_color = compute_base_color(imagery_layers_texture, debug_color, base_color_texture, base_color_factor, base_alpha);
    material base = gltf_material(
        base_color_texture: gltf_texture_lookup_value(true, base_color),
        metallic_factor: metallic_factor,
        roughness_factor: roughness_factor,
        emissive_factor: emissive_factor,
        alpha_mode: alpha_mode,
        alpha_cutoff: alpha_cutoff
    );

} in material(
    thin_walled: base.thin_walled,
    surface: base.surface,
    volume: base.volume,
    ior: base.ior,
    geometry: base.geometry
);

export gltf_texture_lookup_value cesium_internal_imagery_layer_resolver(
    uniform int imagery_layers_count = 0,
    gltf_texture_lookup_value imagery_layer_0 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_1 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_2 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_3 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_4 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_5 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_6 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_7 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_8 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_9 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_10 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_11 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_12 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_13 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_14 = gltf_texture_lookup_value(),
    gltf_texture_lookup_value imagery_layer_15 = gltf_texture_lookup_value()
) [[ anno::hidden() ]] {
    // The array length should match MAX_IMAGERY_LAYERS_COUNT in Tokens.h
    gltf_texture_lookup_value[16] imagery_layers(
        imagery_layer_0,
        imagery_layer_1,
        imagery_layer_2,
        imagery_layer_3,
        imagery_layer_4,
        imagery_layer_5,
        imagery_layer_6,
        imagery_layer_7,
        imagery_layer_8,
        imagery_layer_9,
        imagery_layer_10,
        imagery_layer_11,
        imagery_layer_12,
        imagery_layer_13,
        imagery_layer_14,
        imagery_layer_15,
    );

    auto resolved_value = float4(0.0);

    for (int i = 0; i < imagery_layers_count; i++) {
        auto imagery_layer = imagery_layers[i];
        if (imagery_layer.valid) {
            resolved_value = alpha_blend(imagery_layer.value, resolved_value);
        }
    }

    return gltf_texture_lookup_value(true, resolved_value);
}
