mdl 1.8;

import ::anno::*;
import ::state::*;
import ::tex::*;

using ::gltf::pbr import *;

module [[
    anno::version( 1, 0, 0),
    anno::display_name("Cesium MDL functions")
]];

float4 alpha_blend(float4 src, float4 dst) {
    return src * float4(src.w, src.w, src.w, 1.0) + dst * (1.0 - src.w);
}

export gltf_texture_lookup_value cesium_texture_lookup(*) [[ anno::hidden() ]] = gltf_texture_lookup();

export material cesium_material(
    gltf_texture_lookup_value imagery_layers_texture = gltf_texture_lookup_value(true, float4(0.0)),
    uniform color debug_color = color(1.0),
    // gltf_material inputs below
    gltf_texture_lookup_value base_color_texture = gltf_texture_lookup_value(),
    uniform color base_color_factor = color(1.0),
    uniform float metallic_factor = 1.0,
    uniform float roughness_factor = 1.0,
    uniform color emissive_factor = color(0.0),
    uniform gltf_alpha_mode alpha_mode = opaque,
    uniform float base_alpha = 1.0,
    uniform float alpha_cutoff  = 0.5
) [[ anno::hidden() ]] = let {
    auto base_color_texture_value = base_color_texture.valid ? base_color_texture.value : float4(1.0);
    auto final_base_color_texture_value = alpha_blend(imagery_layers_texture.value, base_color_texture_value);
    auto final_base_color_texture = gltf_texture_lookup_value(true, final_base_color_texture_value);
    auto final_base_color_factor = base_color_factor * debug_color;

    material base = gltf_material(
        base_color_factor: final_base_color_factor,
        base_color_texture: final_base_color_texture,
        metallic_factor: metallic_factor,
        roughness_factor: roughness_factor,
        emissive_factor: emissive_factor,
        alpha_mode: alpha_mode,
        base_alpha: base_alpha,
        alpha_cutoff: alpha_cutoff
    );

} in material(
    thin_walled: base.thin_walled,
    surface: base.surface,
    volume: base.volume,
    ior: base.ior,
    geometry: base.geometry
);

export gltf_texture_lookup_value cesium_imagery_layer_resolver(
    uniform int imagery_layers_count = 0,
    gltf_texture_lookup_value imagery_layer_0 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_1 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_2 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_3 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_4 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_5 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_6 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_7 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_8 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_9 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_10 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_11 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_12 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_13 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_14 = gltf_texture_lookup(),
    gltf_texture_lookup_value imagery_layer_15 = gltf_texture_lookup()
) [[ anno::hidden() ]] {
    // The array length should match MAX_IMAGERY_LAYERS_COUNT in Tokens.h
    gltf_texture_lookup_value[16] imagery_layers(
        imagery_layer_0,
        imagery_layer_1,
        imagery_layer_2,
        imagery_layer_3,
        imagery_layer_4,
        imagery_layer_5,
        imagery_layer_6,
        imagery_layer_7,
        imagery_layer_8,
        imagery_layer_9,
        imagery_layer_10,
        imagery_layer_11,
        imagery_layer_12,
        imagery_layer_13,
        imagery_layer_14,
        imagery_layer_15,
    );

    auto resolved_value = float4(0.0);

    for (int i = 0; i < imagery_layers_count; i++) {
        auto imagery_layer = imagery_layers[i];
        if (imagery_layer.valid) {
            resolved_value = alpha_blend(imagery_layer.value, resolved_value);
        }
    }

    return gltf_texture_lookup_value(true, resolved_value);
}
